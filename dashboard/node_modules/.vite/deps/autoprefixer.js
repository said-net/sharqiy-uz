import {
  require_path,
  require_picocolors_browser,
  require_postcss
} from "./chunk-XO6QFFLS.js";
import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/node-releases/data/processed/envs.json
var require_envs = __commonJS({
  "node_modules/node-releases/data/processed/envs.json"(exports, module) {
    module.exports = [{ name: "nodejs", version: "0.2.0", date: "2011-08-26", lts: false, security: false, v8: "2.3.8.0" }, { name: "nodejs", version: "0.3.0", date: "2011-08-26", lts: false, security: false, v8: "2.5.1.0" }, { name: "nodejs", version: "0.4.0", date: "2011-08-26", lts: false, security: false, v8: "3.1.2.0" }, { name: "nodejs", version: "0.5.0", date: "2011-08-26", lts: false, security: false, v8: "3.1.8.25" }, { name: "nodejs", version: "0.6.0", date: "2011-11-04", lts: false, security: false, v8: "3.6.6.6" }, { name: "nodejs", version: "0.7.0", date: "2012-01-17", lts: false, security: false, v8: "3.8.6.0" }, { name: "nodejs", version: "0.8.0", date: "2012-06-22", lts: false, security: false, v8: "3.11.10.10" }, { name: "nodejs", version: "0.9.0", date: "2012-07-20", lts: false, security: false, v8: "3.11.10.15" }, { name: "nodejs", version: "0.10.0", date: "2013-03-11", lts: false, security: false, v8: "3.14.5.8" }, { name: "nodejs", version: "0.11.0", date: "2013-03-28", lts: false, security: false, v8: "3.17.13.0" }, { name: "nodejs", version: "0.12.0", date: "2015-02-06", lts: false, security: false, v8: "3.28.73.0" }, { name: "nodejs", version: "4.0.0", date: "2015-09-08", lts: false, security: false, v8: "4.5.103.30" }, { name: "nodejs", version: "4.1.0", date: "2015-09-17", lts: false, security: false, v8: "4.5.103.33" }, { name: "nodejs", version: "4.2.0", date: "2015-10-12", lts: "Argon", security: false, v8: "4.5.103.35" }, { name: "nodejs", version: "4.3.0", date: "2016-02-09", lts: "Argon", security: false, v8: "4.5.103.35" }, { name: "nodejs", version: "4.4.0", date: "2016-03-08", lts: "Argon", security: false, v8: "4.5.103.35" }, { name: "nodejs", version: "4.5.0", date: "2016-08-16", lts: "Argon", security: false, v8: "4.5.103.37" }, { name: "nodejs", version: "4.6.0", date: "2016-09-27", lts: "Argon", security: true, v8: "4.5.103.37" }, { name: "nodejs", version: "4.7.0", date: "2016-12-06", lts: "Argon", security: false, v8: "4.5.103.43" }, { name: "nodejs", version: "4.8.0", date: "2017-02-21", lts: "Argon", security: false, v8: "4.5.103.45" }, { name: "nodejs", version: "4.9.0", date: "2018-03-28", lts: "Argon", security: true, v8: "4.5.103.53" }, { name: "nodejs", version: "5.0.0", date: "2015-10-29", lts: false, security: false, v8: "4.6.85.28" }, { name: "nodejs", version: "5.1.0", date: "2015-11-17", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.2.0", date: "2015-12-09", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.3.0", date: "2015-12-15", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.4.0", date: "2016-01-06", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.5.0", date: "2016-01-21", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.6.0", date: "2016-02-09", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.7.0", date: "2016-02-23", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.8.0", date: "2016-03-09", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.9.0", date: "2016-03-16", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.10.0", date: "2016-04-01", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.11.0", date: "2016-04-21", lts: false, security: false, v8: "4.6.85.31" }, { name: "nodejs", version: "5.12.0", date: "2016-06-23", lts: false, security: false, v8: "4.6.85.32" }, { name: "nodejs", version: "6.0.0", date: "2016-04-26", lts: false, security: false, v8: "5.0.71.35" }, { name: "nodejs", version: "6.1.0", date: "2016-05-05", lts: false, security: false, v8: "5.0.71.35" }, { name: "nodejs", version: "6.2.0", date: "2016-05-17", lts: false, security: false, v8: "5.0.71.47" }, { name: "nodejs", version: "6.3.0", date: "2016-07-06", lts: false, security: false, v8: "5.0.71.52" }, { name: "nodejs", version: "6.4.0", date: "2016-08-12", lts: false, security: false, v8: "5.0.71.60" }, { name: "nodejs", version: "6.5.0", date: "2016-08-26", lts: false, security: false, v8: "5.1.281.81" }, { name: "nodejs", version: "6.6.0", date: "2016-09-14", lts: false, security: false, v8: "5.1.281.83" }, { name: "nodejs", version: "6.7.0", date: "2016-09-27", lts: false, security: true, v8: "5.1.281.83" }, { name: "nodejs", version: "6.8.0", date: "2016-10-12", lts: false, security: false, v8: "5.1.281.84" }, { name: "nodejs", version: "6.9.0", date: "2016-10-18", lts: "Boron", security: false, v8: "5.1.281.84" }, { name: "nodejs", version: "6.10.0", date: "2017-02-21", lts: "Boron", security: false, v8: "5.1.281.93" }, { name: "nodejs", version: "6.11.0", date: "2017-06-06", lts: "Boron", security: false, v8: "5.1.281.102" }, { name: "nodejs", version: "6.12.0", date: "2017-11-06", lts: "Boron", security: false, v8: "5.1.281.108" }, { name: "nodejs", version: "6.13.0", date: "2018-02-10", lts: "Boron", security: false, v8: "5.1.281.111" }, { name: "nodejs", version: "6.14.0", date: "2018-03-28", lts: "Boron", security: true, v8: "5.1.281.111" }, { name: "nodejs", version: "6.15.0", date: "2018-11-27", lts: "Boron", security: true, v8: "5.1.281.111" }, { name: "nodejs", version: "6.16.0", date: "2018-12-26", lts: "Boron", security: false, v8: "5.1.281.111" }, { name: "nodejs", version: "6.17.0", date: "2019-02-28", lts: "Boron", security: true, v8: "5.1.281.111" }, { name: "nodejs", version: "7.0.0", date: "2016-10-25", lts: false, security: false, v8: "5.4.500.36" }, { name: "nodejs", version: "7.1.0", date: "2016-11-08", lts: false, security: false, v8: "5.4.500.36" }, { name: "nodejs", version: "7.2.0", date: "2016-11-22", lts: false, security: false, v8: "5.4.500.43" }, { name: "nodejs", version: "7.3.0", date: "2016-12-20", lts: false, security: false, v8: "5.4.500.45" }, { name: "nodejs", version: "7.4.0", date: "2017-01-04", lts: false, security: false, v8: "5.4.500.45" }, { name: "nodejs", version: "7.5.0", date: "2017-01-31", lts: false, security: false, v8: "5.4.500.48" }, { name: "nodejs", version: "7.6.0", date: "2017-02-21", lts: false, security: false, v8: "5.5.372.40" }, { name: "nodejs", version: "7.7.0", date: "2017-02-28", lts: false, security: false, v8: "5.5.372.41" }, { name: "nodejs", version: "7.8.0", date: "2017-03-29", lts: false, security: false, v8: "5.5.372.43" }, { name: "nodejs", version: "7.9.0", date: "2017-04-11", lts: false, security: false, v8: "5.5.372.43" }, { name: "nodejs", version: "7.10.0", date: "2017-05-02", lts: false, security: false, v8: "5.5.372.43" }, { name: "nodejs", version: "8.0.0", date: "2017-05-30", lts: false, security: false, v8: "5.8.283.41" }, { name: "nodejs", version: "8.1.0", date: "2017-06-08", lts: false, security: false, v8: "5.8.283.41" }, { name: "nodejs", version: "8.2.0", date: "2017-07-19", lts: false, security: false, v8: "5.8.283.41" }, { name: "nodejs", version: "8.3.0", date: "2017-08-08", lts: false, security: false, v8: "6.0.286.52" }, { name: "nodejs", version: "8.4.0", date: "2017-08-15", lts: false, security: false, v8: "6.0.286.52" }, { name: "nodejs", version: "8.5.0", date: "2017-09-12", lts: false, security: false, v8: "6.0.287.53" }, { name: "nodejs", version: "8.6.0", date: "2017-09-26", lts: false, security: false, v8: "6.0.287.53" }, { name: "nodejs", version: "8.7.0", date: "2017-10-11", lts: false, security: false, v8: "6.1.534.42" }, { name: "nodejs", version: "8.8.0", date: "2017-10-24", lts: false, security: false, v8: "6.1.534.42" }, { name: "nodejs", version: "8.9.0", date: "2017-10-31", lts: "Carbon", security: false, v8: "6.1.534.46" }, { name: "nodejs", version: "8.10.0", date: "2018-03-06", lts: "Carbon", security: false, v8: "6.2.414.50" }, { name: "nodejs", version: "8.11.0", date: "2018-03-28", lts: "Carbon", security: true, v8: "6.2.414.50" }, { name: "nodejs", version: "8.12.0", date: "2018-09-10", lts: "Carbon", security: false, v8: "6.2.414.66" }, { name: "nodejs", version: "8.13.0", date: "2018-11-20", lts: "Carbon", security: false, v8: "6.2.414.72" }, { name: "nodejs", version: "8.14.0", date: "2018-11-27", lts: "Carbon", security: true, v8: "6.2.414.72" }, { name: "nodejs", version: "8.15.0", date: "2018-12-26", lts: "Carbon", security: false, v8: "6.2.414.75" }, { name: "nodejs", version: "8.16.0", date: "2019-04-16", lts: "Carbon", security: false, v8: "6.2.414.77" }, { name: "nodejs", version: "8.17.0", date: "2019-12-17", lts: "Carbon", security: true, v8: "6.2.414.78" }, { name: "nodejs", version: "9.0.0", date: "2017-10-31", lts: false, security: false, v8: "6.2.414.32" }, { name: "nodejs", version: "9.1.0", date: "2017-11-07", lts: false, security: false, v8: "6.2.414.32" }, { name: "nodejs", version: "9.2.0", date: "2017-11-14", lts: false, security: false, v8: "6.2.414.44" }, { name: "nodejs", version: "9.3.0", date: "2017-12-12", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.4.0", date: "2018-01-10", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.5.0", date: "2018-01-31", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.6.0", date: "2018-02-21", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.7.0", date: "2018-03-01", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.8.0", date: "2018-03-07", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.9.0", date: "2018-03-21", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "9.10.0", date: "2018-03-28", lts: false, security: true, v8: "6.2.414.46" }, { name: "nodejs", version: "9.11.0", date: "2018-04-04", lts: false, security: false, v8: "6.2.414.46" }, { name: "nodejs", version: "10.0.0", date: "2018-04-24", lts: false, security: false, v8: "6.6.346.24" }, { name: "nodejs", version: "10.1.0", date: "2018-05-08", lts: false, security: false, v8: "6.6.346.27" }, { name: "nodejs", version: "10.2.0", date: "2018-05-23", lts: false, security: false, v8: "6.6.346.32" }, { name: "nodejs", version: "10.3.0", date: "2018-05-29", lts: false, security: false, v8: "6.6.346.32" }, { name: "nodejs", version: "10.4.0", date: "2018-06-06", lts: false, security: false, v8: "6.7.288.43" }, { name: "nodejs", version: "10.5.0", date: "2018-06-20", lts: false, security: false, v8: "6.7.288.46" }, { name: "nodejs", version: "10.6.0", date: "2018-07-04", lts: false, security: false, v8: "6.7.288.46" }, { name: "nodejs", version: "10.7.0", date: "2018-07-18", lts: false, security: false, v8: "6.7.288.49" }, { name: "nodejs", version: "10.8.0", date: "2018-08-01", lts: false, security: false, v8: "6.7.288.49" }, { name: "nodejs", version: "10.9.0", date: "2018-08-15", lts: false, security: false, v8: "6.8.275.24" }, { name: "nodejs", version: "10.10.0", date: "2018-09-06", lts: false, security: false, v8: "6.8.275.30" }, { name: "nodejs", version: "10.11.0", date: "2018-09-19", lts: false, security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.12.0", date: "2018-10-10", lts: false, security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.13.0", date: "2018-10-30", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.14.0", date: "2018-11-27", lts: "Dubnium", security: true, v8: "6.8.275.32" }, { name: "nodejs", version: "10.15.0", date: "2018-12-26", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.16.0", date: "2019-05-28", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.17.0", date: "2019-10-22", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.18.0", date: "2019-12-17", lts: "Dubnium", security: true, v8: "6.8.275.32" }, { name: "nodejs", version: "10.19.0", date: "2020-02-05", lts: "Dubnium", security: true, v8: "6.8.275.32" }, { name: "nodejs", version: "10.20.0", date: "2020-03-26", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.21.0", date: "2020-06-02", lts: "Dubnium", security: true, v8: "6.8.275.32" }, { name: "nodejs", version: "10.22.0", date: "2020-07-21", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.23.0", date: "2020-10-27", lts: "Dubnium", security: false, v8: "6.8.275.32" }, { name: "nodejs", version: "10.24.0", date: "2021-02-23", lts: "Dubnium", security: true, v8: "6.8.275.32" }, { name: "nodejs", version: "11.0.0", date: "2018-10-23", lts: false, security: false, v8: "7.0.276.28" }, { name: "nodejs", version: "11.1.0", date: "2018-10-30", lts: false, security: false, v8: "7.0.276.32" }, { name: "nodejs", version: "11.2.0", date: "2018-11-15", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.3.0", date: "2018-11-27", lts: false, security: true, v8: "7.0.276.38" }, { name: "nodejs", version: "11.4.0", date: "2018-12-07", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.5.0", date: "2018-12-18", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.6.0", date: "2018-12-26", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.7.0", date: "2019-01-17", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.8.0", date: "2019-01-24", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.9.0", date: "2019-01-30", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.10.0", date: "2019-02-14", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.11.0", date: "2019-03-05", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.12.0", date: "2019-03-14", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.13.0", date: "2019-03-28", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.14.0", date: "2019-04-10", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "11.15.0", date: "2019-04-30", lts: false, security: false, v8: "7.0.276.38" }, { name: "nodejs", version: "12.0.0", date: "2019-04-23", lts: false, security: false, v8: "7.4.288.21" }, { name: "nodejs", version: "12.1.0", date: "2019-04-29", lts: false, security: false, v8: "7.4.288.21" }, { name: "nodejs", version: "12.2.0", date: "2019-05-07", lts: false, security: false, v8: "7.4.288.21" }, { name: "nodejs", version: "12.3.0", date: "2019-05-21", lts: false, security: false, v8: "7.4.288.27" }, { name: "nodejs", version: "12.4.0", date: "2019-06-04", lts: false, security: false, v8: "7.4.288.27" }, { name: "nodejs", version: "12.5.0", date: "2019-06-26", lts: false, security: false, v8: "7.5.288.22" }, { name: "nodejs", version: "12.6.0", date: "2019-07-03", lts: false, security: false, v8: "7.5.288.22" }, { name: "nodejs", version: "12.7.0", date: "2019-07-23", lts: false, security: false, v8: "7.5.288.22" }, { name: "nodejs", version: "12.8.0", date: "2019-08-06", lts: false, security: false, v8: "7.5.288.22" }, { name: "nodejs", version: "12.9.0", date: "2019-08-20", lts: false, security: false, v8: "7.6.303.29" }, { name: "nodejs", version: "12.10.0", date: "2019-09-04", lts: false, security: false, v8: "7.6.303.29" }, { name: "nodejs", version: "12.11.0", date: "2019-09-25", lts: false, security: false, v8: "7.7.299.11" }, { name: "nodejs", version: "12.12.0", date: "2019-10-11", lts: false, security: false, v8: "7.7.299.13" }, { name: "nodejs", version: "12.13.0", date: "2019-10-21", lts: "Erbium", security: false, v8: "7.7.299.13" }, { name: "nodejs", version: "12.14.0", date: "2019-12-17", lts: "Erbium", security: true, v8: "7.7.299.13" }, { name: "nodejs", version: "12.15.0", date: "2020-02-05", lts: "Erbium", security: true, v8: "7.7.299.13" }, { name: "nodejs", version: "12.16.0", date: "2020-02-11", lts: "Erbium", security: false, v8: "7.8.279.23" }, { name: "nodejs", version: "12.17.0", date: "2020-05-26", lts: "Erbium", security: false, v8: "7.8.279.23" }, { name: "nodejs", version: "12.18.0", date: "2020-06-02", lts: "Erbium", security: true, v8: "7.8.279.23" }, { name: "nodejs", version: "12.19.0", date: "2020-10-06", lts: "Erbium", security: false, v8: "7.8.279.23" }, { name: "nodejs", version: "12.20.0", date: "2020-11-24", lts: "Erbium", security: false, v8: "7.8.279.23" }, { name: "nodejs", version: "12.21.0", date: "2021-02-23", lts: "Erbium", security: true, v8: "7.8.279.23" }, { name: "nodejs", version: "12.22.0", date: "2021-03-30", lts: "Erbium", security: false, v8: "7.8.279.23" }, { name: "nodejs", version: "13.0.0", date: "2019-10-22", lts: false, security: false, v8: "7.8.279.17" }, { name: "nodejs", version: "13.1.0", date: "2019-11-05", lts: false, security: false, v8: "7.8.279.17" }, { name: "nodejs", version: "13.2.0", date: "2019-11-21", lts: false, security: false, v8: "7.9.317.23" }, { name: "nodejs", version: "13.3.0", date: "2019-12-03", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.4.0", date: "2019-12-17", lts: false, security: true, v8: "7.9.317.25" }, { name: "nodejs", version: "13.5.0", date: "2019-12-18", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.6.0", date: "2020-01-07", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.7.0", date: "2020-01-21", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.8.0", date: "2020-02-05", lts: false, security: true, v8: "7.9.317.25" }, { name: "nodejs", version: "13.9.0", date: "2020-02-18", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.10.0", date: "2020-03-04", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.11.0", date: "2020-03-12", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.12.0", date: "2020-03-26", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.13.0", date: "2020-04-14", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "13.14.0", date: "2020-04-29", lts: false, security: false, v8: "7.9.317.25" }, { name: "nodejs", version: "14.0.0", date: "2020-04-21", lts: false, security: false, v8: "8.1.307.30" }, { name: "nodejs", version: "14.1.0", date: "2020-04-29", lts: false, security: false, v8: "8.1.307.31" }, { name: "nodejs", version: "14.2.0", date: "2020-05-05", lts: false, security: false, v8: "8.1.307.31" }, { name: "nodejs", version: "14.3.0", date: "2020-05-19", lts: false, security: false, v8: "8.1.307.31" }, { name: "nodejs", version: "14.4.0", date: "2020-06-02", lts: false, security: true, v8: "8.1.307.31" }, { name: "nodejs", version: "14.5.0", date: "2020-06-30", lts: false, security: false, v8: "8.3.110.9" }, { name: "nodejs", version: "14.6.0", date: "2020-07-20", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.7.0", date: "2020-07-29", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.8.0", date: "2020-08-11", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.9.0", date: "2020-08-27", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.10.0", date: "2020-09-08", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.11.0", date: "2020-09-15", lts: false, security: true, v8: "8.4.371.19" }, { name: "nodejs", version: "14.12.0", date: "2020-09-22", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.13.0", date: "2020-09-29", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.14.0", date: "2020-10-15", lts: false, security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.15.0", date: "2020-10-27", lts: "Fermium", security: false, v8: "8.4.371.19" }, { name: "nodejs", version: "14.16.0", date: "2021-02-23", lts: "Fermium", security: true, v8: "8.4.371.19" }, { name: "nodejs", version: "14.17.0", date: "2021-05-11", lts: "Fermium", security: false, v8: "8.4.371.23" }, { name: "nodejs", version: "14.18.0", date: "2021-09-28", lts: "Fermium", security: false, v8: "8.4.371.23" }, { name: "nodejs", version: "14.19.0", date: "2022-02-01", lts: "Fermium", security: false, v8: "8.4.371.23" }, { name: "nodejs", version: "14.20.0", date: "2022-07-07", lts: "Fermium", security: true, v8: "8.4.371.23" }, { name: "nodejs", version: "14.21.0", date: "2022-11-01", lts: "Fermium", security: false, v8: "8.4.371.23" }, { name: "nodejs", version: "15.0.0", date: "2020-10-20", lts: false, security: false, v8: "8.6.395.16" }, { name: "nodejs", version: "15.1.0", date: "2020-11-04", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.2.0", date: "2020-11-10", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.3.0", date: "2020-11-24", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.4.0", date: "2020-12-09", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.5.0", date: "2020-12-22", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.6.0", date: "2021-01-14", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.7.0", date: "2021-01-25", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.8.0", date: "2021-02-02", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.9.0", date: "2021-02-18", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.10.0", date: "2021-02-23", lts: false, security: true, v8: "8.6.395.17" }, { name: "nodejs", version: "15.11.0", date: "2021-03-03", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.12.0", date: "2021-03-17", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.13.0", date: "2021-03-31", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "15.14.0", date: "2021-04-06", lts: false, security: false, v8: "8.6.395.17" }, { name: "nodejs", version: "16.0.0", date: "2021-04-20", lts: false, security: false, v8: "9.0.257.17" }, { name: "nodejs", version: "16.1.0", date: "2021-05-04", lts: false, security: false, v8: "9.0.257.24" }, { name: "nodejs", version: "16.2.0", date: "2021-05-19", lts: false, security: false, v8: "9.0.257.25" }, { name: "nodejs", version: "16.3.0", date: "2021-06-03", lts: false, security: false, v8: "9.0.257.25" }, { name: "nodejs", version: "16.4.0", date: "2021-06-23", lts: false, security: false, v8: "9.1.269.36" }, { name: "nodejs", version: "16.5.0", date: "2021-07-14", lts: false, security: false, v8: "9.1.269.38" }, { name: "nodejs", version: "16.6.0", date: "2021-07-29", lts: false, security: true, v8: "9.2.230.21" }, { name: "nodejs", version: "16.7.0", date: "2021-08-18", lts: false, security: false, v8: "9.2.230.21" }, { name: "nodejs", version: "16.8.0", date: "2021-08-25", lts: false, security: false, v8: "9.2.230.21" }, { name: "nodejs", version: "16.9.0", date: "2021-09-07", lts: false, security: false, v8: "9.3.345.16" }, { name: "nodejs", version: "16.10.0", date: "2021-09-22", lts: false, security: false, v8: "9.3.345.19" }, { name: "nodejs", version: "16.11.0", date: "2021-10-08", lts: false, security: false, v8: "9.4.146.19" }, { name: "nodejs", version: "16.12.0", date: "2021-10-20", lts: false, security: false, v8: "9.4.146.19" }, { name: "nodejs", version: "16.13.0", date: "2021-10-26", lts: "Gallium", security: false, v8: "9.4.146.19" }, { name: "nodejs", version: "16.14.0", date: "2022-02-08", lts: "Gallium", security: false, v8: "9.4.146.24" }, { name: "nodejs", version: "16.15.0", date: "2022-04-26", lts: "Gallium", security: false, v8: "9.4.146.24" }, { name: "nodejs", version: "16.16.0", date: "2022-07-07", lts: "Gallium", security: true, v8: "9.4.146.24" }, { name: "nodejs", version: "16.17.0", date: "2022-08-16", lts: "Gallium", security: false, v8: "9.4.146.26" }, { name: "nodejs", version: "16.18.0", date: "2022-10-12", lts: "Gallium", security: false, v8: "9.4.146.26" }, { name: "nodejs", version: "16.19.0", date: "2022-12-13", lts: "Gallium", security: false, v8: "9.4.146.26" }, { name: "nodejs", version: "16.20.0", date: "2023-03-28", lts: "Gallium", security: false, v8: "9.4.146.26" }, { name: "nodejs", version: "17.0.0", date: "2021-10-19", lts: false, security: false, v8: "9.5.172.21" }, { name: "nodejs", version: "17.1.0", date: "2021-11-09", lts: false, security: false, v8: "9.5.172.25" }, { name: "nodejs", version: "17.2.0", date: "2021-11-30", lts: false, security: false, v8: "9.6.180.14" }, { name: "nodejs", version: "17.3.0", date: "2021-12-17", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "17.4.0", date: "2022-01-18", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "17.5.0", date: "2022-02-10", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "17.6.0", date: "2022-02-22", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "17.7.0", date: "2022-03-09", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "17.8.0", date: "2022-03-22", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "17.9.0", date: "2022-04-07", lts: false, security: false, v8: "9.6.180.15" }, { name: "nodejs", version: "18.0.0", date: "2022-04-18", lts: false, security: false, v8: "10.1.124.8" }, { name: "nodejs", version: "18.1.0", date: "2022-05-03", lts: false, security: false, v8: "10.1.124.8" }, { name: "nodejs", version: "18.2.0", date: "2022-05-17", lts: false, security: false, v8: "10.1.124.8" }, { name: "nodejs", version: "18.3.0", date: "2022-06-02", lts: false, security: false, v8: "10.2.154.4" }, { name: "nodejs", version: "18.4.0", date: "2022-06-16", lts: false, security: false, v8: "10.2.154.4" }, { name: "nodejs", version: "18.5.0", date: "2022-07-06", lts: false, security: true, v8: "10.2.154.4" }, { name: "nodejs", version: "18.6.0", date: "2022-07-13", lts: false, security: false, v8: "10.2.154.13" }, { name: "nodejs", version: "18.7.0", date: "2022-07-26", lts: false, security: false, v8: "10.2.154.13" }, { name: "nodejs", version: "18.8.0", date: "2022-08-24", lts: false, security: false, v8: "10.2.154.13" }, { name: "nodejs", version: "18.9.0", date: "2022-09-07", lts: false, security: false, v8: "10.2.154.15" }, { name: "nodejs", version: "18.10.0", date: "2022-09-28", lts: false, security: false, v8: "10.2.154.15" }, { name: "nodejs", version: "18.11.0", date: "2022-10-13", lts: false, security: false, v8: "10.2.154.15" }, { name: "nodejs", version: "18.12.0", date: "2022-10-25", lts: "Hydrogen", security: false, v8: "10.2.154.15" }, { name: "nodejs", version: "18.13.0", date: "2023-01-05", lts: "Hydrogen", security: false, v8: "10.2.154.23" }, { name: "nodejs", version: "18.14.0", date: "2023-02-01", lts: "Hydrogen", security: false, v8: "10.2.154.23" }, { name: "nodejs", version: "18.15.0", date: "2023-03-05", lts: "Hydrogen", security: false, v8: "10.2.154.26" }, { name: "nodejs", version: "18.16.0", date: "2023-04-12", lts: "Hydrogen", security: false, v8: "10.2.154.26" }, { name: "nodejs", version: "19.0.0", date: "2022-10-17", lts: false, security: false, v8: "10.7.193.13" }, { name: "nodejs", version: "19.1.0", date: "2022-11-14", lts: false, security: false, v8: "10.7.193.20" }, { name: "nodejs", version: "19.2.0", date: "2022-11-29", lts: false, security: false, v8: "10.8.168.20" }, { name: "nodejs", version: "19.3.0", date: "2022-12-14", lts: false, security: false, v8: "10.8.168.21" }, { name: "nodejs", version: "19.4.0", date: "2023-01-05", lts: false, security: false, v8: "10.8.168.25" }, { name: "nodejs", version: "19.5.0", date: "2023-01-24", lts: false, security: false, v8: "10.8.168.25" }, { name: "nodejs", version: "19.6.0", date: "2023-02-01", lts: false, security: false, v8: "10.8.168.25" }, { name: "nodejs", version: "19.7.0", date: "2023-02-21", lts: false, security: false, v8: "10.8.168.25" }, { name: "nodejs", version: "19.8.0", date: "2023-03-14", lts: false, security: false, v8: "10.8.168.25" }, { name: "nodejs", version: "19.9.0", date: "2023-04-10", lts: false, security: false, v8: "10.8.168.25" }, { name: "nodejs", version: "20.0.0", date: "2023-04-17", lts: false, security: false, v8: "11.3.244.4" }, { name: "nodejs", version: "20.1.0", date: "2023-05-03", lts: false, security: false, v8: "11.3.244.8" }, { name: "nodejs", version: "20.2.0", date: "2023-05-16", lts: false, security: false, v8: "11.3.244.8" }, { name: "nodejs", version: "20.3.0", date: "2023-06-08", lts: false, security: false, v8: "11.3.244.8" }, { name: "nodejs", version: "20.4.0", date: "2023-07-04", lts: false, security: false, v8: "11.3.244.8" }];
  }
});

// node_modules/caniuse-lite/data/browsers.js
var require_browsers = __commonJS({
  "node_modules/caniuse-lite/data/browsers.js"(exports, module) {
    module.exports = { A: "ie", B: "edge", C: "firefox", D: "chrome", E: "safari", F: "opera", G: "ios_saf", H: "op_mini", I: "android", J: "bb", K: "op_mob", L: "and_chr", M: "and_ff", N: "ie_mob", O: "and_uc", P: "samsung", Q: "and_qq", R: "baidu", S: "kaios" };
  }
});

// node_modules/caniuse-lite/dist/unpacker/browsers.js
var require_browsers2 = __commonJS({
  "node_modules/caniuse-lite/dist/unpacker/browsers.js"(exports, module) {
    module.exports.browsers = require_browsers();
  }
});

// node_modules/caniuse-lite/data/browserVersions.js
var require_browserVersions = __commonJS({
  "node_modules/caniuse-lite/data/browserVersions.js"(exports, module) {
    module.exports = { "0": "5", "1": "19", "2": "22", "3": "23", "4": "24", "5": "25", "6": "26", "7": "27", "8": "28", "9": "29", A: "10", B: "11", C: "12", D: "17", E: "7", F: "8", G: "9", H: "15", I: "114", J: "4", K: "6", L: "13", M: "14", N: "16", O: "18", P: "79", Q: "80", R: "81", S: "83", T: "84", U: "85", V: "86", W: "87", X: "88", Y: "89", Z: "90", a: "91", b: "92", c: "93", d: "94", e: "95", f: "96", g: "97", h: "98", i: "99", j: "100", k: "20", l: "21", m: "73", n: "101", o: "102", p: "103", q: "104", r: "105", s: "106", t: "107", u: "108", v: "109", w: "110", x: "111", y: "112", z: "113", AB: "30", BB: "31", CB: "32", DB: "33", EB: "34", FB: "35", GB: "36", HB: "37", IB: "38", JB: "39", KB: "40", LB: "41", MB: "42", NB: "43", OB: "44", PB: "45", QB: "46", RB: "47", SB: "48", TB: "49", UB: "50", VB: "51", WB: "52", XB: "53", YB: "54", ZB: "55", aB: "56", bB: "57", cB: "58", dB: "60", eB: "62", fB: "63", gB: "64", hB: "65", iB: "66", jB: "67", kB: "68", lB: "69", mB: "70", nB: "71", oB: "72", pB: "74", qB: "75", rB: "76", sB: "77", tB: "78", uB: "115", vB: "11.1", wB: "12.1", xB: "15.5", yB: "16.0", zB: "3", "0B": "59", "1B": "61", "2B": "82", "3B": "116", "4B": "117", "5B": "3.2", "6B": "10.1", "7B": "13.1", "8B": "15.2-15.3", "9B": "15.4", AC: "15.6", BC: "16.1", CC: "16.2", DC: "16.3", EC: "16.4", FC: "16.5", GC: "16.6", HC: "11.5", IC: "4.2-4.3", JC: "5.5", KC: "2", LC: "3.5", MC: "3.6", NC: "3.1", OC: "5.1", PC: "6.1", QC: "7.1", RC: "9.1", SC: "14.1", TC: "15.1", UC: "TP", VC: "9.5-9.6", WC: "10.0-10.1", XC: "10.5", YC: "10.6", ZC: "11.6", aC: "4.0-4.1", bC: "5.0-5.1", cC: "6.0-6.1", dC: "7.0-7.1", eC: "8.1-8.4", fC: "9.0-9.2", gC: "9.3", hC: "10.0-10.2", iC: "10.3", jC: "11.0-11.2", kC: "11.3-11.4", lC: "12.0-12.1", mC: "12.2-12.5", nC: "13.0-13.1", oC: "13.2", pC: "13.3", qC: "13.4-13.7", rC: "14.0-14.4", sC: "14.5-14.8", tC: "15.0-15.1", uC: "all", vC: "2.1", wC: "2.2", xC: "2.3", yC: "4.1", zC: "4.4", "0C": "4.4.3-4.4.4", "1C": "5.0-5.4", "2C": "6.2-6.4", "3C": "7.2-7.4", "4C": "8.2", "5C": "9.2", "6C": "11.1-11.2", "7C": "12.0", "8C": "13.0", "9C": "14.0", AD: "15.0", BD: "17.0", CD: "18.0", DD: "19.0", ED: "13.18", FD: "2.5", GD: "3.0-3.1" };
  }
});

// node_modules/caniuse-lite/dist/unpacker/browserVersions.js
var require_browserVersions2 = __commonJS({
  "node_modules/caniuse-lite/dist/unpacker/browserVersions.js"(exports, module) {
    module.exports.browserVersions = require_browserVersions();
  }
});

// node_modules/caniuse-lite/data/agents.js
var require_agents = __commonJS({
  "node_modules/caniuse-lite/data/agents.js"(exports, module) {
    module.exports = { A: { A: { K: 0, E: 0, F: 0.0326854, G: 0.0435805, A: 0, B: 0.392224, JC: 0 }, B: "ms{ JC: 962323200, K: 998870400, E: 1161129600, F: 1237420800, G: 1300060800, A: 1346716800, B: 1381968e3 } }, B: { A: { C: 0, L: 0, M: 0, H: 4259e-6, N: 0, D: 4259e-6, O: 0.012777, P: 0, Q: 4259e-6, R: 4259e-6, S: 4259e-6, T: 8518e-6, U: 4259e-6, V: 4259e-6, W: 4259e-6, X: 0, Y: 4259e-6, Z: 4259e-6, a: 0, b: 0.012777, c: 0, d: 0, e: 0, f: 0, g: 0, h: 0, i: 8518e-6, j: 0, n: 8518e-6, o: 8518e-6, p: 4259e-6, q: 0, r: 0, s: 4259e-6, t: 8518e-6, u: 0.012777, v: 0.076662, w: 0.021295, x: 0.029813, y: 0.579224, z: 0.745325, I: 3.56904 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "C", "L", "M", "H", "N", "D", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "I", "", "", ""], E: "Edge", F: { C: 1438128e3, L: 1447286400, M: 1470096e3, H: 1491868800, N: 1508198400, D: 1525046400, O: 1542067200, P: 1579046400, Q: 1581033600, R: 1586736e3, S: 1590019200, T: 1594857600, U: 1598486400, V: 1602201600, W: 1605830400, X: 161136e4, Y: 1614816e3, Z: 1618358400, a: 1622073600, b: 1626912e3, c: 1630627200, d: 1632441600, e: 1634774400, f: 1637539200, g: 1641427200, h: 1643932800, i: 1646265600, j: 1649635200, n: 1651190400, o: 1653955200, p: 1655942400, q: 1659657600, r: 1661990400, s: 1664755200, t: 1666915200, u: 1670198400, v: 1673481600, w: 1675900800, x: 1678665600, y: 1680825600, z: 1683158400, I: 1685664e3 }, D: { C: "ms", L: "ms", M: "ms", H: "ms", N: "ms", D: "ms", O: "ms" } }, C: { A: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, KC: 0, zB: 0, J: 0, K: 0, E: 0, F: 0, G: 0, A: 0, B: 8518e-6, C: 0, L: 0, M: 0, H: 0, N: 0, D: 0, O: 0, k: 0, l: 0, AB: 0, BB: 0, CB: 0, DB: 0, EB: 0, FB: 0, GB: 0, HB: 0, IB: 0, JB: 0, KB: 0, LB: 0, MB: 0, NB: 0.012777, OB: 4259e-6, PB: 0, QB: 0, RB: 0, SB: 0, TB: 0, UB: 0, VB: 0, WB: 0.051108, XB: 0, YB: 0, ZB: 0, aB: 4259e-6, bB: 0, cB: 0, "0B": 4259e-6, dB: 0, "1B": 0, eB: 0, fB: 0, gB: 0, hB: 0, iB: 0, jB: 0, kB: 4259e-6, lB: 0, mB: 0, nB: 0, oB: 8518e-6, m: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0.051108, P: 0, Q: 0, R: 0, "2B": 0, S: 0, T: 0.017036, U: 0, V: 0, W: 8518e-6, X: 4259e-6, Y: 0, Z: 0, a: 0.012777, b: 0, c: 0, d: 4259e-6, e: 0, f: 0, g: 0, h: 0, i: 0, j: 0, n: 0, o: 0.110734, p: 0.012777, q: 0, r: 8518e-6, s: 4259e-6, t: 8518e-6, u: 0.012777, v: 0.012777, w: 0.012777, x: 0.025554, y: 0.055367, z: 0.660145, I: 1.2564, uB: 0.012777, "3B": 0, "4B": 0, LC: 0, MC: 0 }, B: "moz", C: ["KC", "zB", "LC", "MC", "J", "0", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "D", "O", "1", "k", "l", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "0B", "dB", "1B", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "m", "pB", "qB", "rB", "sB", "tB", "P", "Q", "R", "2B", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "I", "uB", "3B", "4B", ""], E: "Firefox", F: { "0": 1308614400, "1": 1357603200, "2": 1368489600, "3": 1372118400, "4": 1375747200, "5": 1379376e3, "6": 1386633600, "7": 1391472e3, "8": 1395100800, "9": 1398729600, KC: 1161648e3, zB: 1213660800, LC: 124632e4, MC: 1264032e3, J: 1300752e3, K: 1313452800, E: 1317081600, F: 1317081600, G: 1320710400, A: 1324339200, B: 1327968e3, C: 1331596800, L: 1335225600, M: 1338854400, H: 1342483200, N: 1346112e3, D: 1349740800, O: 1353628800, k: 1361232e3, l: 1364860800, AB: 1402358400, BB: 1405987200, CB: 1409616e3, DB: 1413244800, EB: 1417392e3, FB: 1421107200, GB: 1424736e3, HB: 1428278400, IB: 1431475200, JB: 1435881600, KB: 1439251200, LB: 144288e4, MB: 1446508800, NB: 1450137600, OB: 1453852800, PB: 1457395200, QB: 1461628800, RB: 1465257600, SB: 1470096e3, TB: 1474329600, UB: 1479168e3, VB: 1485216e3, WB: 1488844800, XB: 149256e4, YB: 1497312e3, ZB: 1502150400, aB: 1506556800, bB: 1510617600, cB: 1516665600, "0B": 1520985600, dB: 1525824e3, "1B": 1529971200, eB: 1536105600, fB: 1540252800, gB: 1544486400, hB: 154872e4, iB: 1552953600, jB: 1558396800, kB: 1562630400, lB: 1567468800, mB: 1571788800, nB: 1575331200, oB: 1578355200, m: 1581379200, pB: 1583798400, qB: 1586304e3, rB: 1588636800, sB: 1591056e3, tB: 1593475200, P: 1595894400, Q: 1598313600, R: 1600732800, "2B": 1603152e3, S: 1605571200, T: 1607990400, U: 1611619200, V: 1614038400, W: 1616457600, X: 1618790400, Y: 1622505600, Z: 1626134400, a: 1628553600, b: 1630972800, c: 1633392e3, d: 1635811200, e: 1638835200, f: 1641859200, g: 1644364800, h: 1646697600, i: 1649116800, j: 1651536e3, n: 1653955200, o: 1656374400, p: 1658793600, q: 1661212800, r: 1663632e3, s: 1666051200, t: 1668470400, u: 1670889600, v: 1673913600, w: 1676332800, x: 1678752e3, y: 1681171200, z: 1683590400, I: 1686009600, uB: 1688428800, "3B": null, "4B": null } }, D: { A: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, J: 0, K: 0, E: 0, F: 0, G: 0, A: 0, B: 0, C: 0, L: 0, M: 0, H: 0, N: 0, D: 0, O: 0, k: 0, l: 0, AB: 0, BB: 0, CB: 0, DB: 0, EB: 8518e-6, FB: 0, GB: 0, HB: 0, IB: 0.017036, JB: 0, KB: 0.012777, LB: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0, RB: 8518e-6, SB: 0.017036, TB: 0.038331, UB: 8518e-6, VB: 0, WB: 4259e-6, XB: 8518e-6, YB: 0, ZB: 4259e-6, aB: 0.051108, bB: 0, cB: 0, "0B": 0, dB: 0.017036, "1B": 0.012777, eB: 0, fB: 4259e-6, gB: 0, hB: 0.012777, iB: 0.029813, jB: 8518e-6, kB: 0.025554, lB: 0.051108, mB: 0.04259, nB: 0.017036, oB: 0.025554, m: 0.012777, pB: 0.059626, qB: 0.059626, rB: 0.093698, sB: 0.025554, tB: 0.038331, P: 0.200173, Q: 0.051108, R: 0.051108, S: 0.110734, T: 0.029813, U: 0.089439, V: 0.072403, W: 0.089439, X: 0.046849, Y: 0.038331, Z: 0.055367, a: 0.089439, b: 0.038331, c: 0.17036, d: 0.034072, e: 0.021295, f: 0.025554, g: 0.025554, h: 0.063885, i: 0.055367, j: 0.046849, n: 0.04259, o: 0.051108, p: 0.268317, q: 0.063885, r: 0.076662, s: 0.051108, t: 0.059626, u: 0.149065, v: 1.96766, w: 0.123511, x: 0.455713, y: 0.630332, z: 3.9268, I: 14.553, uB: 0.021295, "3B": 0.021295, "4B": 0 }, B: "webkit", C: ["", "", "", "", "", "", "J", "0", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "D", "O", "1", "k", "l", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "0B", "dB", "1B", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "m", "pB", "qB", "rB", "sB", "tB", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "I", "uB", "3B", "4B"], E: "Chrome", F: { "0": 1274745600, "1": 1332892800, "2": 1343692800, "3": 1348531200, "4": 1352246400, "5": 1357862400, "6": 1361404800, "7": 1364428800, "8": 1369094400, "9": 1374105600, J: 1264377600, K: 1283385600, E: 1287619200, F: 1291248e3, G: 1296777600, A: 1299542400, B: 1303862400, C: 1307404800, L: 1312243200, M: 1316131200, H: 1316131200, N: 1319500800, D: 1323734400, O: 1328659200, k: 133704e4, l: 1340668800, AB: 1376956800, BB: 1384214400, CB: 1389657600, DB: 1392940800, EB: 1397001600, FB: 1400544e3, GB: 1405468800, HB: 1409011200, IB: 141264e4, JB: 1416268800, KB: 1421798400, LB: 1425513600, MB: 1429401600, NB: 143208e4, OB: 1437523200, PB: 1441152e3, QB: 1444780800, RB: 1449014400, SB: 1453248e3, TB: 1456963200, UB: 1460592e3, VB: 1464134400, WB: 1469059200, XB: 1472601600, YB: 1476230400, ZB: 1480550400, aB: 1485302400, bB: 1489017600, cB: 149256e4, "0B": 1496707200, dB: 1500940800, "1B": 1504569600, eB: 1508198400, fB: 1512518400, gB: 1516752e3, hB: 1520294400, iB: 1523923200, jB: 1527552e3, kB: 1532390400, lB: 1536019200, mB: 1539648e3, nB: 1543968e3, oB: 154872e4, m: 1552348800, pB: 1555977600, qB: 1559606400, rB: 1564444800, sB: 1568073600, tB: 1571702400, P: 1575936e3, Q: 1580860800, R: 1586304e3, S: 1589846400, T: 1594684800, U: 1598313600, V: 1601942400, W: 1605571200, X: 1611014400, Y: 1614556800, Z: 1618272e3, a: 1621987200, b: 1626739200, c: 1630368e3, d: 1632268800, e: 1634601600, f: 1637020800, g: 1641340800, h: 1643673600, i: 1646092800, j: 1648512e3, n: 1650931200, o: 1653350400, p: 1655769600, q: 1659398400, r: 1661817600, s: 1664236800, t: 1666656e3, u: 166968e4, v: 1673308800, w: 1675728e3, x: 1678147200, y: 1680566400, z: 1682985600, I: 1685404800, uB: null, "3B": null, "4B": null } }, E: { A: { "0": 0, J: 0, K: 0, E: 0, F: 0, G: 0, A: 0, B: 0, C: 0, L: 0.025554, M: 0.12777, H: 0.029813, D: 8518e-6, NC: 0, "5B": 0, OC: 8518e-6, PC: 0, QC: 0, RC: 0.102216, "6B": 0, vB: 8518e-6, wB: 0.038331, "7B": 0.166101, SC: 0.332202, TC: 0.055367, "8B": 0.046849, "9B": 0.106475, xB: 0.191655, AC: 0.779397, yB: 0.080921, BC: 0.25554, CC: 0.289612, DC: 0.706994, EC: 0.498303, FC: 2.00599, GC: 0.021295, UC: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "NC", "5B", "J", "0", "OC", "K", "PC", "E", "QC", "F", "G", "RC", "A", "6B", "B", "vB", "C", "wB", "L", "7B", "M", "SC", "H", "TC", "8B", "9B", "xB", "AC", "yB", "BC", "CC", "DC", "EC", "FC", "GC", "D", "UC"], E: "Safari", F: { "0": 1275868800, NC: 1205798400, "5B": 1226534400, J: 1244419200, OC: 131112e4, K: 1343174400, PC: 13824e5, E: 13824e5, QC: 1410998400, F: 1413417600, G: 1443657600, RC: 1458518400, A: 1474329600, "6B": 1490572800, B: 1505779200, vB: 1522281600, C: 1537142400, wB: 1553472e3, L: 1568851200, "7B": 1585008e3, M: 1600214400, SC: 1619395200, H: 1632096e3, TC: 1635292800, "8B": 1639353600, "9B": 1647216e3, xB: 1652745600, AC: 1658275200, yB: 1662940800, BC: 1666569600, CC: 1670889600, DC: 1674432e3, EC: 1679875200, FC: 1684368e3, GC: null, D: null, UC: null } }, F: { A: { "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 8518e-6, "9": 0, G: 0, B: 0.038331, C: 0, H: 0, N: 0, D: 0, O: 0, k: 0, l: 0, AB: 0, BB: 0, CB: 0, DB: 0, EB: 0, FB: 0, GB: 0, HB: 0, IB: 0, JB: 0, KB: 4259e-6, LB: 0, MB: 0, NB: 0, OB: 0, PB: 0, QB: 0.017036, RB: 0, SB: 0, TB: 0, UB: 0, VB: 0, WB: 0, XB: 0, YB: 0, ZB: 0, aB: 0, bB: 0, cB: 0, dB: 0, eB: 0, fB: 0, gB: 0, hB: 0, iB: 0, jB: 0, kB: 0, lB: 0, mB: 0, nB: 0, oB: 0, m: 0, pB: 0, qB: 0, rB: 0, sB: 0, tB: 0, P: 0, Q: 0, R: 0, "2B": 0, S: 0, T: 0, U: 4259e-6, V: 0, W: 0, X: 0, Y: 0, Z: 0, a: 0, b: 0, c: 0, d: 0, e: 0.059626, f: 0.012777, g: 0.021295, h: 0.664404, i: 1.29048, j: 0.012777, VC: 0, WC: 0, XC: 0, YC: 0, vB: 0, HC: 0, ZC: 0, wB: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "G", "VC", "WC", "XC", "YC", "B", "vB", "HC", "ZC", "C", "wB", "H", "N", "D", "O", "1", "k", "l", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "GB", "HB", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "m", "pB", "qB", "rB", "sB", "tB", "P", "Q", "R", "2B", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "", "", ""], E: "Opera", F: { "1": 1390867200, "2": 1401753600, "3": 1405987200, "4": 1409616e3, "5": 1413331200, "6": 1417132800, "7": 1422316800, "8": 1425945600, "9": 1430179200, G: 1150761600, VC: 1223424e3, WC: 1251763200, XC: 1267488e3, YC: 1277942400, B: 1292457600, vB: 1302566400, HC: 1309219200, ZC: 1323129600, C: 1323129600, wB: 1352073600, H: 1372723200, N: 1377561600, D: 1381104e3, O: 1386288e3, k: 1393891200, l: 1399334400, AB: 1433808e3, BB: 1438646400, CB: 1442448e3, DB: 1445904e3, EB: 1449100800, FB: 1454371200, GB: 1457308800, HB: 146232e4, IB: 1465344e3, JB: 1470096e3, KB: 1474329600, LB: 1477267200, MB: 1481587200, NB: 1486425600, OB: 1490054400, PB: 1494374400, QB: 1498003200, RB: 1502236800, SB: 1506470400, TB: 1510099200, UB: 1515024e3, VB: 1517961600, WB: 1521676800, XB: 1525910400, YB: 1530144e3, ZB: 1534982400, aB: 1537833600, bB: 1543363200, cB: 1548201600, dB: 1554768e3, eB: 1561593600, fB: 1566259200, gB: 1570406400, hB: 1573689600, iB: 1578441600, jB: 1583971200, kB: 1587513600, lB: 1592956800, mB: 1595894400, nB: 1600128e3, oB: 1603238400, m: 161352e4, pB: 1612224e3, qB: 1616544e3, rB: 1619568e3, sB: 1623715200, tB: 1627948800, P: 1631577600, Q: 1633392e3, R: 1635984e3, "2B": 1638403200, S: 1642550400, T: 1644969600, U: 1647993600, V: 1650412800, W: 1652745600, X: 1654646400, Y: 1657152e3, Z: 1660780800, a: 1663113600, b: 1668816e3, c: 1668643200, d: 1671062400, e: 1675209600, f: 1677024e3, g: 1679529600, h: 1681948800, i: 1684195200, j: 1687219200 }, D: { G: "o", B: "o", C: "o", VC: "o", WC: "o", XC: "o", YC: "o", vB: "o", HC: "o", ZC: "o", wB: "o" } }, G: { A: { F: 0, D: 0.0227641, "5B": 0, aC: 0, IC: 303522e-8, bC: 303522e-8, cC: 455283e-8, dC: 0.0121409, eC: 455283e-8, fC: 910566e-8, gC: 0.0440107, hC: 455283e-8, iC: 0.062222, jC: 0.0303522, kC: 0.0197289, lC: 0.0166937, mC: 0.321733, nC: 910566e-8, oC: 910566e-8, pC: 0.0227641, qC: 0.0773981, rC: 0.20336, sC: 0.374849, tC: 0.119891, "8B": 0.141138, "9B": 0.160867, xB: 0.239782, AC: 0.582762, yB: 0.648019, BC: 1.23837, CC: 0.661678, DC: 1.56617, EC: 1.0259, FC: 6.55152, GC: 0.0637396 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "5B", "aC", "IC", "bC", "cC", "dC", "F", "eC", "fC", "gC", "hC", "iC", "jC", "kC", "lC", "mC", "nC", "oC", "pC", "qC", "rC", "sC", "tC", "8B", "9B", "xB", "AC", "yB", "BC", "CC", "DC", "EC", "FC", "GC", "D", ""], E: "Safari on iOS", F: { "5B": 1270252800, aC: 1283904e3, IC: 1299628800, bC: 1331078400, cC: 1359331200, dC: 1394409600, F: 1410912e3, eC: 1413763200, fC: 1442361600, gC: 1458518400, hC: 1473724800, iC: 1490572800, jC: 1505779200, kC: 1522281600, lC: 1537142400, mC: 1553472e3, nC: 1568851200, oC: 1572220800, pC: 1580169600, qC: 1585008e3, rC: 1600214400, sC: 1619395200, tC: 1632096e3, "8B": 1639353600, "9B": 1647216e3, xB: 1652659200, AC: 1658275200, yB: 1662940800, BC: 1666569600, CC: 1670889600, DC: 1674432e3, EC: 1679875200, FC: 1684368e3, GC: null, D: null } }, H: { A: { uC: 0.956597 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "uC", "", "", ""], E: "Opera Mini", F: { uC: 1426464e3 } }, I: { A: { zB: 0, J: 0.0252848, I: 0, vC: 0, wC: 842828e-8, xC: 0, yC: 0.0168566, IC: 0.092711, zC: 0, "0C": 0.252848 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "vC", "wC", "xC", "zB", "J", "yC", "IC", "zC", "0C", "I", "", "", ""], E: "Android Browser", F: { vC: 1256515200, wC: 1274313600, xC: 1291593600, zB: 1298332800, J: 1318896e3, yC: 1341792e3, IC: 1374624e3, zC: 1386547200, "0C": 1401667200, I: 1685404800 } }, J: { A: { E: 0, A: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "E", "A", "", "", ""], E: "Blackberry Browser", F: { E: 1325376e3, A: 1359504e3 } }, K: { A: { A: 0, B: 0, C: 0, m: 0, vB: 0, HC: 0, wB: 0 }, B: "o", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A", "B", "vB", "HC", "C", "wB", "m", "", "", ""], E: "Opera Mobile", F: { A: 1287100800, B: 1300752e3, vB: 1314835200, HC: 1318291200, C: 1330300800, wB: 1349740800, m: 1673827200 }, D: { m: "webkit" } }, L: { A: { I: 38.2012 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "I", "", "", ""], E: "Chrome for Android", F: { I: 1685404800 } }, M: { A: { uB: 0.281309 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "uB", "", "", ""], E: "Firefox for Android", F: { uB: 1688428800 } }, N: { A: { A: 0, B: 0 }, B: "ms", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A", "B", "", "", ""], E: "IE Mobile", F: { A: 1340150400, B: 1353456e3 } }, O: { A: { xB: 1.04486 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "xB", "", "", ""], E: "UC Browser for Android", F: { xB: 1687132800 }, D: { xB: "webkit" } }, P: { A: { J: 0.156242, k: 0.229156, l: 1.74991, "1C": 0, "2C": 0, "3C": 0.0520808, "4C": 0, "5C": 0, "6B": 0, "6C": 0.0208323, "7C": 0, "8C": 0.0208323, "9C": 0.0208323, AD: 0.0104162, yB: 0.0416646, BD: 0.0416646, CD: 0.0416646, DD: 0.0833293 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "J", "1C", "2C", "3C", "4C", "5C", "6B", "6C", "7C", "8C", "9C", "AD", "yB", "BD", "CD", "DD", "k", "l", "", "", ""], E: "Samsung Internet", F: { J: 1461024e3, "1C": 1481846400, "2C": 1509408e3, "3C": 1528329600, "4C": 1546128e3, "5C": 1554163200, "6B": 1567900800, "6C": 1582588800, "7C": 1593475200, "8C": 1605657600, "9C": 1618531200, AD: 1629072e3, yB: 1640736e3, BD: 1651708800, CD: 1659657600, DD: 1667260800, k: 1677369600, l: 1684454400 } }, Q: { A: { "7B": 0.155007 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "7B", "", "", ""], E: "QQ Browser", F: { "7B": 1663718400 } }, R: { A: { ED: 0 }, B: "webkit", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ED", "", "", ""], E: "Baidu Browser", F: { ED: 1663027200 } }, S: { A: { FD: 0.103338, GD: 0 }, B: "moz", C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "FD", "GD", "", "", ""], E: "KaiOS Browser", F: { FD: 1527811200, GD: 1631664e3 } } };
  }
});

// node_modules/caniuse-lite/dist/unpacker/agents.js
var require_agents2 = __commonJS({
  "node_modules/caniuse-lite/dist/unpacker/agents.js"(exports, module) {
    "use strict";
    var browsers = require_browsers2().browsers;
    var versions = require_browserVersions2().browserVersions;
    var agentsData = require_agents();
    function unpackBrowserVersions(versionsData) {
      return Object.keys(versionsData).reduce((usage, version) => {
        usage[versions[version]] = versionsData[version];
        return usage;
      }, {});
    }
    module.exports.agents = Object.keys(agentsData).reduce((map, key) => {
      let versionsData = agentsData[key];
      map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {
        if (entry === "A") {
          data.usage_global = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === "C") {
          data.versions = versionsData[entry].reduce((list, version) => {
            if (version === "") {
              list.push(null);
            } else {
              list.push(versions[version]);
            }
            return list;
          }, []);
        } else if (entry === "D") {
          data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === "E") {
          data.browser = versionsData[entry];
        } else if (entry === "F") {
          data.release_date = Object.keys(versionsData[entry]).reduce(
            (map2, key2) => {
              map2[versions[key2]] = versionsData[entry][key2];
              return map2;
            },
            {}
          );
        } else {
          data.prefix = versionsData[entry];
        }
        return data;
      }, {});
      return map;
    }, {});
  }
});

// node_modules/node-releases/data/release-schedule/release-schedule.json
var require_release_schedule = __commonJS({
  "node_modules/node-releases/data/release-schedule/release-schedule.json"(exports, module) {
    module.exports = { "v0.8": { start: "2012-06-25", end: "2014-07-31" }, "v0.10": { start: "2013-03-11", end: "2016-10-31" }, "v0.12": { start: "2015-02-06", end: "2016-12-31" }, v4: { start: "2015-09-08", lts: "2015-10-12", maintenance: "2017-04-01", end: "2018-04-30", codename: "Argon" }, v5: { start: "2015-10-29", maintenance: "2016-04-30", end: "2016-06-30" }, v6: { start: "2016-04-26", lts: "2016-10-18", maintenance: "2018-04-30", end: "2019-04-30", codename: "Boron" }, v7: { start: "2016-10-25", maintenance: "2017-04-30", end: "2017-06-30" }, v8: { start: "2017-05-30", lts: "2017-10-31", maintenance: "2019-01-01", end: "2019-12-31", codename: "Carbon" }, v9: { start: "2017-10-01", maintenance: "2018-04-01", end: "2018-06-30" }, v10: { start: "2018-04-24", lts: "2018-10-30", maintenance: "2020-05-19", end: "2021-04-30", codename: "Dubnium" }, v11: { start: "2018-10-23", maintenance: "2019-04-22", end: "2019-06-01" }, v12: { start: "2019-04-23", lts: "2019-10-21", maintenance: "2020-11-30", end: "2022-04-30", codename: "Erbium" }, v13: { start: "2019-10-22", maintenance: "2020-04-01", end: "2020-06-01" }, v14: { start: "2020-04-21", lts: "2020-10-27", maintenance: "2021-10-19", end: "2023-04-30", codename: "Fermium" }, v15: { start: "2020-10-20", maintenance: "2021-04-01", end: "2021-06-01" }, v16: { start: "2021-04-20", lts: "2021-10-26", maintenance: "2022-10-18", end: "2023-09-11", codename: "Gallium" }, v17: { start: "2021-10-19", maintenance: "2022-04-01", end: "2022-06-01" }, v18: { start: "2022-04-19", lts: "2022-10-25", maintenance: "2023-10-18", end: "2025-04-30", codename: "Hydrogen" }, v19: { start: "2022-10-18", maintenance: "2023-04-01", end: "2023-06-01" }, v20: { start: "2023-04-18", lts: "2023-10-24", maintenance: "2024-10-22", end: "2026-04-30", codename: "" } };
  }
});

// node_modules/electron-to-chromium/versions.js
var require_versions = __commonJS({
  "node_modules/electron-to-chromium/versions.js"(exports, module) {
    module.exports = {
      "0.20": "39",
      "0.21": "41",
      "0.22": "41",
      "0.23": "41",
      "0.24": "41",
      "0.25": "42",
      "0.26": "42",
      "0.27": "43",
      "0.28": "43",
      "0.29": "43",
      "0.30": "44",
      "0.31": "45",
      "0.32": "45",
      "0.33": "45",
      "0.34": "45",
      "0.35": "45",
      "0.36": "47",
      "0.37": "49",
      "1.0": "49",
      "1.1": "50",
      "1.2": "51",
      "1.3": "52",
      "1.4": "53",
      "1.5": "54",
      "1.6": "56",
      "1.7": "58",
      "1.8": "59",
      "2.0": "61",
      "2.1": "61",
      "3.0": "66",
      "3.1": "66",
      "4.0": "69",
      "4.1": "69",
      "4.2": "69",
      "5.0": "73",
      "6.0": "76",
      "6.1": "76",
      "7.0": "78",
      "7.1": "78",
      "7.2": "78",
      "7.3": "78",
      "8.0": "80",
      "8.1": "80",
      "8.2": "80",
      "8.3": "80",
      "8.4": "80",
      "8.5": "80",
      "9.0": "83",
      "9.1": "83",
      "9.2": "83",
      "9.3": "83",
      "9.4": "83",
      "10.0": "85",
      "10.1": "85",
      "10.2": "85",
      "10.3": "85",
      "10.4": "85",
      "11.0": "87",
      "11.1": "87",
      "11.2": "87",
      "11.3": "87",
      "11.4": "87",
      "11.5": "87",
      "12.0": "89",
      "12.1": "89",
      "12.2": "89",
      "13.0": "91",
      "13.1": "91",
      "13.2": "91",
      "13.3": "91",
      "13.4": "91",
      "13.5": "91",
      "13.6": "91",
      "14.0": "93",
      "14.1": "93",
      "14.2": "93",
      "15.0": "94",
      "15.1": "94",
      "15.2": "94",
      "15.3": "94",
      "15.4": "94",
      "15.5": "94",
      "16.0": "96",
      "16.1": "96",
      "16.2": "96",
      "17.0": "98",
      "17.1": "98",
      "17.2": "98",
      "17.3": "98",
      "17.4": "98",
      "18.0": "100",
      "18.1": "100",
      "18.2": "100",
      "18.3": "100",
      "19.0": "102",
      "19.1": "102",
      "20.0": "104",
      "20.1": "104",
      "20.2": "104",
      "20.3": "104",
      "21.0": "106",
      "21.1": "106",
      "21.2": "106",
      "21.3": "106",
      "21.4": "106",
      "22.0": "108",
      "22.1": "108",
      "22.2": "108",
      "22.3": "108",
      "23.0": "110",
      "23.1": "110",
      "23.2": "110",
      "23.3": "110",
      "24.0": "112",
      "24.1": "112",
      "24.2": "112",
      "24.3": "112",
      "24.4": "112",
      "24.5": "112",
      "24.6": "112",
      "25.0": "114",
      "25.1": "114",
      "25.2": "114",
      "25.3": "114",
      "26.0": "116"
    };
  }
});

// node_modules/browserslist/error.js
var require_error = __commonJS({
  "node_modules/browserslist/error.js"(exports, module) {
    function BrowserslistError(message) {
      this.name = "BrowserslistError";
      this.message = message;
      this.browserslist = true;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, BrowserslistError);
      }
    }
    BrowserslistError.prototype = Error.prototype;
    module.exports = BrowserslistError;
  }
});

// node_modules/browserslist/parse.js
var require_parse = __commonJS({
  "node_modules/browserslist/parse.js"(exports, module) {
    var AND_REGEXP = /^\s+and\s+(.*)/i;
    var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
    function flatten(array) {
      if (!Array.isArray(array))
        return [array];
      return array.reduce(function(a, b) {
        return a.concat(flatten(b));
      }, []);
    }
    function find(string, predicate) {
      for (var n = 1, max = string.length; n <= max; n++) {
        var parsed = string.substr(-n, n);
        if (predicate(parsed, n, max)) {
          return string.slice(0, -n);
        }
      }
      return "";
    }
    function matchQuery(all, query) {
      var node = { query };
      if (query.indexOf("not ") === 0) {
        node.not = true;
        query = query.slice(4);
      }
      for (var name in all) {
        var type = all[name];
        var match = query.match(type.regexp);
        if (match) {
          node.type = name;
          for (var i = 0; i < type.matches.length; i++) {
            node[type.matches[i]] = match[i + 1];
          }
          return node;
        }
      }
      node.type = "unknown";
      return node;
    }
    function matchBlock(all, string, qs) {
      var node;
      return find(string, function(parsed, n, max) {
        if (AND_REGEXP.test(parsed)) {
          node = matchQuery(all, parsed.match(AND_REGEXP)[1]);
          node.compose = "and";
          qs.unshift(node);
          return true;
        } else if (OR_REGEXP.test(parsed)) {
          node = matchQuery(all, parsed.match(OR_REGEXP)[1]);
          node.compose = "or";
          qs.unshift(node);
          return true;
        } else if (n === max) {
          node = matchQuery(all, parsed.trim());
          node.compose = "or";
          qs.unshift(node);
          return true;
        }
        return false;
      });
    }
    module.exports = function parse(all, queries) {
      if (!Array.isArray(queries))
        queries = [queries];
      return flatten(
        queries.map(function(block) {
          var qs = [];
          do {
            block = matchBlock(all, block, qs);
          } while (block);
          return qs;
        })
      );
    };
  }
});

// node_modules/browserslist/browser.js
var require_browser = __commonJS({
  "node_modules/browserslist/browser.js"(exports, module) {
    var BrowserslistError = require_error();
    function noop() {
    }
    module.exports = {
      loadQueries: function loadQueries() {
        throw new BrowserslistError(
          "Sharable configs are not supported in client-side build of Browserslist"
        );
      },
      getStat: function getStat(opts) {
        return opts.stats;
      },
      loadConfig: function loadConfig(opts) {
        if (opts.config) {
          throw new BrowserslistError(
            "Browserslist config are not supported in client-side build"
          );
        }
      },
      loadCountry: function loadCountry() {
        throw new BrowserslistError(
          "Country statistics are not supported in client-side build of Browserslist"
        );
      },
      loadFeature: function loadFeature() {
        throw new BrowserslistError(
          "Supports queries are not available in client-side build of Browserslist"
        );
      },
      currentNode: function currentNode(resolve, context) {
        return resolve(["maintained node versions"], context)[0];
      },
      parseConfig: noop,
      readConfig: noop,
      findConfig: noop,
      clearCaches: noop,
      oldDataWarning: noop,
      env: {}
    };
  }
});

// node_modules/browserslist/index.js
var require_browserslist = __commonJS({
  "node_modules/browserslist/index.js"(exports, module) {
    var jsReleases = require_envs();
    var agents = require_agents2().agents;
    var jsEOL = require_release_schedule();
    var path = require_path();
    var e2c = require_versions();
    var BrowserslistError = require_error();
    var parse = require_parse();
    var env = require_browser();
    var YEAR = 365.259641 * 24 * 60 * 60 * 1e3;
    var ANDROID_EVERGREEN_FIRST = "37";
    var OP_MOB_BLINK_FIRST = 14;
    function isVersionsMatch(versionA, versionB) {
      return (versionA + ".").indexOf(versionB + ".") === 0;
    }
    function isEolReleased(name) {
      var version = name.slice(1);
      return browserslist.nodeVersions.some(function(i) {
        return isVersionsMatch(i, version);
      });
    }
    function normalize(versions) {
      return versions.filter(function(version) {
        return typeof version === "string";
      });
    }
    function normalizeElectron(version) {
      var versionToUse = version;
      if (version.split(".").length === 3) {
        versionToUse = version.split(".").slice(0, -1).join(".");
      }
      return versionToUse;
    }
    function nameMapper(name) {
      return function mapName(version) {
        return name + " " + version;
      };
    }
    function getMajor(version) {
      return parseInt(version.split(".")[0]);
    }
    function getMajorVersions(released, number) {
      if (released.length === 0)
        return [];
      var majorVersions = uniq(released.map(getMajor));
      var minimum = majorVersions[majorVersions.length - number];
      if (!minimum) {
        return released;
      }
      var selected = [];
      for (var i = released.length - 1; i >= 0; i--) {
        if (minimum > getMajor(released[i]))
          break;
        selected.unshift(released[i]);
      }
      return selected;
    }
    function uniq(array) {
      var filtered = [];
      for (var i = 0; i < array.length; i++) {
        if (filtered.indexOf(array[i]) === -1)
          filtered.push(array[i]);
      }
      return filtered;
    }
    function fillUsage(result, name, data) {
      for (var i in data) {
        result[name + " " + i] = data[i];
      }
    }
    function generateFilter(sign, version) {
      version = parseFloat(version);
      if (sign === ">") {
        return function(v) {
          return parseFloat(v) > version;
        };
      } else if (sign === ">=") {
        return function(v) {
          return parseFloat(v) >= version;
        };
      } else if (sign === "<") {
        return function(v) {
          return parseFloat(v) < version;
        };
      } else {
        return function(v) {
          return parseFloat(v) <= version;
        };
      }
    }
    function generateSemverFilter(sign, version) {
      version = version.split(".").map(parseSimpleInt);
      version[1] = version[1] || 0;
      version[2] = version[2] || 0;
      if (sign === ">") {
        return function(v) {
          v = v.split(".").map(parseSimpleInt);
          return compareSemver(v, version) > 0;
        };
      } else if (sign === ">=") {
        return function(v) {
          v = v.split(".").map(parseSimpleInt);
          return compareSemver(v, version) >= 0;
        };
      } else if (sign === "<") {
        return function(v) {
          v = v.split(".").map(parseSimpleInt);
          return compareSemver(version, v) > 0;
        };
      } else {
        return function(v) {
          v = v.split(".").map(parseSimpleInt);
          return compareSemver(version, v) >= 0;
        };
      }
    }
    function parseSimpleInt(x) {
      return parseInt(x);
    }
    function compare(a, b) {
      if (a < b)
        return -1;
      if (a > b)
        return 1;
      return 0;
    }
    function compareSemver(a, b) {
      return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || "0"), parseInt(b[1] || "0")) || compare(parseInt(a[2] || "0"), parseInt(b[2] || "0"));
    }
    function semverFilterLoose(operator, range) {
      range = range.split(".").map(parseSimpleInt);
      if (typeof range[1] === "undefined") {
        range[1] = "x";
      }
      switch (operator) {
        case "<=":
          return function(version) {
            version = version.split(".").map(parseSimpleInt);
            return compareSemverLoose(version, range) <= 0;
          };
        case ">=":
        default:
          return function(version) {
            version = version.split(".").map(parseSimpleInt);
            return compareSemverLoose(version, range) >= 0;
          };
      }
    }
    function compareSemverLoose(version, range) {
      if (version[0] !== range[0]) {
        return version[0] < range[0] ? -1 : 1;
      }
      if (range[1] === "x") {
        return 0;
      }
      if (version[1] !== range[1]) {
        return version[1] < range[1] ? -1 : 1;
      }
      return 0;
    }
    function resolveVersion(data, version) {
      if (data.versions.indexOf(version) !== -1) {
        return version;
      } else if (browserslist.versionAliases[data.name][version]) {
        return browserslist.versionAliases[data.name][version];
      } else {
        return false;
      }
    }
    function normalizeVersion(data, version) {
      var resolved = resolveVersion(data, version);
      if (resolved) {
        return resolved;
      } else if (data.versions.length === 1) {
        return data.versions[0];
      } else {
        return false;
      }
    }
    function filterByYear(since, context) {
      since = since / 1e3;
      return Object.keys(agents).reduce(function(selected, name) {
        var data = byName(name, context);
        if (!data)
          return selected;
        var versions = Object.keys(data.releaseDate).filter(function(v) {
          var date = data.releaseDate[v];
          return date !== null && date >= since;
        });
        return selected.concat(versions.map(nameMapper(data.name)));
      }, []);
    }
    function cloneData(data) {
      return {
        name: data.name,
        versions: data.versions,
        released: data.released,
        releaseDate: data.releaseDate
      };
    }
    function byName(name, context) {
      name = name.toLowerCase();
      name = browserslist.aliases[name] || name;
      if (context.mobileToDesktop && browserslist.desktopNames[name]) {
        var desktop = browserslist.data[browserslist.desktopNames[name]];
        if (name === "android") {
          return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
        } else {
          var cloned = cloneData(desktop);
          cloned.name = name;
          return cloned;
        }
      }
      return browserslist.data[name];
    }
    function normalizeAndroidVersions(androidVersions, chromeVersions) {
      var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
      return androidVersions.filter(function(version) {
        return /^(?:[2-4]\.|[34]$)/.test(version);
      }).concat(chromeVersions.slice(iFirstEvergreen));
    }
    function normalizeAndroidData(android, chrome) {
      android.released = normalizeAndroidVersions(android.released, chrome.released);
      android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
      android.released.forEach(function(v) {
        if (android.releaseDate[v] === void 0) {
          android.releaseDate[v] = chrome.releaseDate[v];
        }
      });
      return android;
    }
    function checkName(name, context) {
      var data = byName(name, context);
      if (!data)
        throw new BrowserslistError("Unknown browser " + name);
      return data;
    }
    function unknownQuery(query) {
      return new BrowserslistError(
        "Unknown browser query `" + query + "`. Maybe you are using old Browserslist or made typo in query."
      );
    }
    function filterJumps(list, name, nVersions, context) {
      var jump = 1;
      switch (name) {
        case "android":
          if (context.mobileToDesktop)
            return list;
          var released = browserslist.data.chrome.released;
          jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
          break;
        case "op_mob":
          var latest = browserslist.data.op_mob.released.slice(-1)[0];
          jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;
          break;
        default:
          return list;
      }
      if (nVersions <= jump) {
        return list.slice(-1);
      }
      return list.slice(jump - 1 - nVersions);
    }
    function isSupported(flags) {
      return typeof flags === "string" && (flags.indexOf("y") >= 0 || flags.indexOf("a") >= 0);
    }
    function resolve(queries, context) {
      return parse(QUERIES, queries).reduce(function(result, node, index) {
        if (node.not && index === 0) {
          throw new BrowserslistError(
            "Write any browsers query (for instance, `defaults`) before `" + node.query + "`"
          );
        }
        var type = QUERIES[node.type];
        var array = type.select.call(browserslist, context, node).map(function(j) {
          var parts = j.split(" ");
          if (parts[1] === "0") {
            return parts[0] + " " + byName(parts[0], context).versions[0];
          } else {
            return j;
          }
        });
        if (node.compose === "and") {
          if (node.not) {
            return result.filter(function(j) {
              return array.indexOf(j) === -1;
            });
          } else {
            return result.filter(function(j) {
              return array.indexOf(j) !== -1;
            });
          }
        } else {
          if (node.not) {
            var filter = {};
            array.forEach(function(j) {
              filter[j] = true;
            });
            return result.filter(function(j) {
              return !filter[j];
            });
          }
          return result.concat(array);
        }
      }, []);
    }
    function prepareOpts(opts) {
      if (typeof opts === "undefined")
        opts = {};
      if (typeof opts.path === "undefined") {
        opts.path = path.resolve ? path.resolve(".") : ".";
      }
      return opts;
    }
    function prepareQueries(queries, opts) {
      if (typeof queries === "undefined" || queries === null) {
        var config = browserslist.loadConfig(opts);
        if (config) {
          queries = config;
        } else {
          queries = browserslist.defaults;
        }
      }
      return queries;
    }
    function checkQueries(queries) {
      if (!(typeof queries === "string" || Array.isArray(queries))) {
        throw new BrowserslistError(
          "Browser queries must be an array or string. Got " + typeof queries + "."
        );
      }
    }
    var cache = {};
    function browserslist(queries, opts) {
      opts = prepareOpts(opts);
      queries = prepareQueries(queries, opts);
      checkQueries(queries);
      var context = {
        ignoreUnknownVersions: opts.ignoreUnknownVersions,
        dangerousExtend: opts.dangerousExtend,
        mobileToDesktop: opts.mobileToDesktop,
        path: opts.path,
        env: opts.env
      };
      env.oldDataWarning(browserslist.data);
      var stats = env.getStat(opts, browserslist.data);
      if (stats) {
        context.customUsage = {};
        for (var browser in stats) {
          fillUsage(context.customUsage, browser, stats[browser]);
        }
      }
      var cacheKey = JSON.stringify([queries, context]);
      if (cache[cacheKey])
        return cache[cacheKey];
      var result = uniq(resolve(queries, context)).sort(function(name1, name2) {
        name1 = name1.split(" ");
        name2 = name2.split(" ");
        if (name1[0] === name2[0]) {
          var version1 = name1[1].split("-")[0];
          var version2 = name2[1].split("-")[0];
          return compareSemver(version2.split("."), version1.split("."));
        } else {
          return compare(name1[0], name2[0]);
        }
      });
      if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
        cache[cacheKey] = result;
      }
      return result;
    }
    browserslist.parse = function(queries, opts) {
      opts = prepareOpts(opts);
      queries = prepareQueries(queries, opts);
      checkQueries(queries);
      return parse(QUERIES, queries);
    };
    browserslist.cache = {};
    browserslist.data = {};
    browserslist.usage = {
      global: {},
      custom: null
    };
    browserslist.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];
    browserslist.aliases = {
      fx: "firefox",
      ff: "firefox",
      ios: "ios_saf",
      explorer: "ie",
      blackberry: "bb",
      explorermobile: "ie_mob",
      operamini: "op_mini",
      operamobile: "op_mob",
      chromeandroid: "and_chr",
      firefoxandroid: "and_ff",
      ucandroid: "and_uc",
      qqandroid: "and_qq"
    };
    browserslist.desktopNames = {
      and_chr: "chrome",
      and_ff: "firefox",
      ie_mob: "ie",
      android: "chrome"
    };
    browserslist.versionAliases = {};
    browserslist.clearCaches = env.clearCaches;
    browserslist.parseConfig = env.parseConfig;
    browserslist.readConfig = env.readConfig;
    browserslist.findConfig = env.findConfig;
    browserslist.loadConfig = env.loadConfig;
    browserslist.coverage = function(browsers, stats) {
      var data;
      if (typeof stats === "undefined") {
        data = browserslist.usage.global;
      } else if (stats === "my stats") {
        var opts = {};
        opts.path = path.resolve ? path.resolve(".") : ".";
        var customStats = env.getStat(opts);
        if (!customStats) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        data = {};
        for (var browser in customStats) {
          fillUsage(data, browser, customStats[browser]);
        }
      } else if (typeof stats === "string") {
        if (stats.length > 2) {
          stats = stats.toLowerCase();
        } else {
          stats = stats.toUpperCase();
        }
        env.loadCountry(browserslist.usage, stats, browserslist.data);
        data = browserslist.usage[stats];
      } else {
        if ("dataByBrowser" in stats) {
          stats = stats.dataByBrowser;
        }
        data = {};
        for (var name in stats) {
          for (var version in stats[name]) {
            data[name + " " + version] = stats[name][version];
          }
        }
      }
      return browsers.reduce(function(all, i) {
        var usage = data[i];
        if (usage === void 0) {
          usage = data[i.replace(/ \S+$/, " 0")];
        }
        return all + (usage || 0);
      }, 0);
    };
    function nodeQuery(context, node) {
      var matched = browserslist.nodeVersions.filter(function(i) {
        return isVersionsMatch(i, node.version);
      });
      if (matched.length === 0) {
        if (context.ignoreUnknownVersions) {
          return [];
        } else {
          throw new BrowserslistError(
            "Unknown version " + node.version + " of Node.js"
          );
        }
      }
      return ["node " + matched[matched.length - 1]];
    }
    function sinceQuery(context, node) {
      var year = parseInt(node.year);
      var month = parseInt(node.month || "01") - 1;
      var day = parseInt(node.day || "01");
      return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context);
    }
    function coverQuery(context, node) {
      var coverage = parseFloat(node.coverage);
      var usage = browserslist.usage.global;
      if (node.place) {
        if (node.place.match(/^my\s+stats$/i)) {
          if (!context.customUsage) {
            throw new BrowserslistError("Custom usage statistics was not provided");
          }
          usage = context.customUsage;
        } else {
          var place;
          if (node.place.length === 2) {
            place = node.place.toUpperCase();
          } else {
            place = node.place.toLowerCase();
          }
          env.loadCountry(browserslist.usage, place, browserslist.data);
          usage = browserslist.usage[place];
        }
      }
      var versions = Object.keys(usage).sort(function(a, b) {
        return usage[b] - usage[a];
      });
      var coveraged = 0;
      var result = [];
      var version;
      for (var i = 0; i < versions.length; i++) {
        version = versions[i];
        if (usage[version] === 0)
          break;
        coveraged += usage[version];
        result.push(version);
        if (coveraged >= coverage)
          break;
      }
      return result;
    }
    var QUERIES = {
      last_major_versions: {
        matches: ["versions"],
        regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
        select: function(context, node) {
          return Object.keys(agents).reduce(function(selected, name) {
            var data = byName(name, context);
            if (!data)
              return selected;
            var list = getMajorVersions(data.released, node.versions);
            list = list.map(nameMapper(data.name));
            list = filterJumps(list, data.name, node.versions, context);
            return selected.concat(list);
          }, []);
        }
      },
      last_versions: {
        matches: ["versions"],
        regexp: /^last\s+(\d+)\s+versions?$/i,
        select: function(context, node) {
          return Object.keys(agents).reduce(function(selected, name) {
            var data = byName(name, context);
            if (!data)
              return selected;
            var list = data.released.slice(-node.versions);
            list = list.map(nameMapper(data.name));
            list = filterJumps(list, data.name, node.versions, context);
            return selected.concat(list);
          }, []);
        }
      },
      last_electron_major_versions: {
        matches: ["versions"],
        regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
        select: function(context, node) {
          var validVersions = getMajorVersions(Object.keys(e2c), node.versions);
          return validVersions.map(function(i) {
            return "chrome " + e2c[i];
          });
        }
      },
      last_node_major_versions: {
        matches: ["versions"],
        regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
        select: function(context, node) {
          return getMajorVersions(browserslist.nodeVersions, node.versions).map(
            function(version) {
              return "node " + version;
            }
          );
        }
      },
      last_browser_major_versions: {
        matches: ["versions", "browser"],
        regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
        select: function(context, node) {
          var data = checkName(node.browser, context);
          var validVersions = getMajorVersions(data.released, node.versions);
          var list = validVersions.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node.versions, context);
          return list;
        }
      },
      last_electron_versions: {
        matches: ["versions"],
        regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
        select: function(context, node) {
          return Object.keys(e2c).slice(-node.versions).map(function(i) {
            return "chrome " + e2c[i];
          });
        }
      },
      last_node_versions: {
        matches: ["versions"],
        regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
        select: function(context, node) {
          return browserslist.nodeVersions.slice(-node.versions).map(function(version) {
            return "node " + version;
          });
        }
      },
      last_browser_versions: {
        matches: ["versions", "browser"],
        regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
        select: function(context, node) {
          var data = checkName(node.browser, context);
          var list = data.released.slice(-node.versions).map(nameMapper(data.name));
          list = filterJumps(list, data.name, node.versions, context);
          return list;
        }
      },
      unreleased_versions: {
        matches: [],
        regexp: /^unreleased\s+versions$/i,
        select: function(context) {
          return Object.keys(agents).reduce(function(selected, name) {
            var data = byName(name, context);
            if (!data)
              return selected;
            var list = data.versions.filter(function(v) {
              return data.released.indexOf(v) === -1;
            });
            list = list.map(nameMapper(data.name));
            return selected.concat(list);
          }, []);
        }
      },
      unreleased_electron_versions: {
        matches: [],
        regexp: /^unreleased\s+electron\s+versions?$/i,
        select: function() {
          return [];
        }
      },
      unreleased_browser_versions: {
        matches: ["browser"],
        regexp: /^unreleased\s+(\w+)\s+versions?$/i,
        select: function(context, node) {
          var data = checkName(node.browser, context);
          return data.versions.filter(function(v) {
            return data.released.indexOf(v) === -1;
          }).map(nameMapper(data.name));
        }
      },
      last_years: {
        matches: ["years"],
        regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
        select: function(context, node) {
          return filterByYear(Date.now() - YEAR * node.years, context);
        }
      },
      since_y: {
        matches: ["year"],
        regexp: /^since (\d+)$/i,
        select: sinceQuery
      },
      since_y_m: {
        matches: ["year", "month"],
        regexp: /^since (\d+)-(\d+)$/i,
        select: sinceQuery
      },
      since_y_m_d: {
        matches: ["year", "month", "day"],
        regexp: /^since (\d+)-(\d+)-(\d+)$/i,
        select: sinceQuery
      },
      popularity: {
        matches: ["sign", "popularity"],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
        select: function(context, node) {
          var popularity = parseFloat(node.popularity);
          var usage = browserslist.usage.global;
          return Object.keys(usage).reduce(function(result, version) {
            if (node.sign === ">") {
              if (usage[version] > popularity) {
                result.push(version);
              }
            } else if (node.sign === "<") {
              if (usage[version] < popularity) {
                result.push(version);
              }
            } else if (node.sign === "<=") {
              if (usage[version] <= popularity) {
                result.push(version);
              }
            } else if (usage[version] >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      popularity_in_my_stats: {
        matches: ["sign", "popularity"],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
        select: function(context, node) {
          var popularity = parseFloat(node.popularity);
          if (!context.customUsage) {
            throw new BrowserslistError("Custom usage statistics was not provided");
          }
          var usage = context.customUsage;
          return Object.keys(usage).reduce(function(result, version) {
            var percentage = usage[version];
            if (percentage == null) {
              return result;
            }
            if (node.sign === ">") {
              if (percentage > popularity) {
                result.push(version);
              }
            } else if (node.sign === "<") {
              if (percentage < popularity) {
                result.push(version);
              }
            } else if (node.sign === "<=") {
              if (percentage <= popularity) {
                result.push(version);
              }
            } else if (percentage >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      popularity_in_config_stats: {
        matches: ["sign", "popularity", "config"],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
        select: function(context, node) {
          var popularity = parseFloat(node.popularity);
          var stats = env.loadStat(context, node.config, browserslist.data);
          if (stats) {
            context.customUsage = {};
            for (var browser in stats) {
              fillUsage(context.customUsage, browser, stats[browser]);
            }
          }
          if (!context.customUsage) {
            throw new BrowserslistError("Custom usage statistics was not provided");
          }
          var usage = context.customUsage;
          return Object.keys(usage).reduce(function(result, version) {
            var percentage = usage[version];
            if (percentage == null) {
              return result;
            }
            if (node.sign === ">") {
              if (percentage > popularity) {
                result.push(version);
              }
            } else if (node.sign === "<") {
              if (percentage < popularity) {
                result.push(version);
              }
            } else if (node.sign === "<=") {
              if (percentage <= popularity) {
                result.push(version);
              }
            } else if (percentage >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      popularity_in_place: {
        matches: ["sign", "popularity", "place"],
        regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
        select: function(context, node) {
          var popularity = parseFloat(node.popularity);
          var place = node.place;
          if (place.length === 2) {
            place = place.toUpperCase();
          } else {
            place = place.toLowerCase();
          }
          env.loadCountry(browserslist.usage, place, browserslist.data);
          var usage = browserslist.usage[place];
          return Object.keys(usage).reduce(function(result, version) {
            var percentage = usage[version];
            if (percentage == null) {
              return result;
            }
            if (node.sign === ">") {
              if (percentage > popularity) {
                result.push(version);
              }
            } else if (node.sign === "<") {
              if (percentage < popularity) {
                result.push(version);
              }
            } else if (node.sign === "<=") {
              if (percentage <= popularity) {
                result.push(version);
              }
            } else if (percentage >= popularity) {
              result.push(version);
            }
            return result;
          }, []);
        }
      },
      cover: {
        matches: ["coverage"],
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
        select: coverQuery
      },
      cover_in: {
        matches: ["coverage", "place"],
        regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
        select: coverQuery
      },
      supports: {
        matches: ["feature"],
        regexp: /^supports\s+([\w-]+)$/,
        select: function(context, node) {
          env.loadFeature(browserslist.cache, node.feature);
          var features = browserslist.cache[node.feature];
          var result = [];
          for (var name in features) {
            var data = byName(name, context);
            var checkDesktop = context.mobileToDesktop && name in browserslist.desktopNames && isSupported(features[name][data.released.slice(-1)[0]]);
            data.versions.forEach(function(version) {
              var flags = features[name][version];
              if (flags === void 0 && checkDesktop) {
                flags = features[browserslist.desktopNames[name]][version];
              }
              if (isSupported(flags)) {
                result.push(name + " " + version);
              }
            });
          }
          return result;
        }
      },
      electron_range: {
        matches: ["from", "to"],
        regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
          var fromToUse = normalizeElectron(node.from);
          var toToUse = normalizeElectron(node.to);
          var from = parseFloat(node.from);
          var to = parseFloat(node.to);
          if (!e2c[fromToUse]) {
            throw new BrowserslistError("Unknown version " + from + " of electron");
          }
          if (!e2c[toToUse]) {
            throw new BrowserslistError("Unknown version " + to + " of electron");
          }
          return Object.keys(e2c).filter(function(i) {
            var parsed = parseFloat(i);
            return parsed >= from && parsed <= to;
          }).map(function(i) {
            return "chrome " + e2c[i];
          });
        }
      },
      node_range: {
        matches: ["from", "to"],
        regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
          return browserslist.nodeVersions.filter(semverFilterLoose(">=", node.from)).filter(semverFilterLoose("<=", node.to)).map(function(v) {
            return "node " + v;
          });
        }
      },
      browser_range: {
        matches: ["browser", "from", "to"],
        regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
        select: function(context, node) {
          var data = checkName(node.browser, context);
          var from = parseFloat(normalizeVersion(data, node.from) || node.from);
          var to = parseFloat(normalizeVersion(data, node.to) || node.to);
          function filter(v) {
            var parsed = parseFloat(v);
            return parsed >= from && parsed <= to;
          }
          return data.released.filter(filter).map(nameMapper(data.name));
        }
      },
      electron_ray: {
        matches: ["sign", "version"],
        regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(context, node) {
          var versionToUse = normalizeElectron(node.version);
          return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function(i) {
            return "chrome " + e2c[i];
          });
        }
      },
      node_ray: {
        matches: ["sign", "version"],
        regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
        select: function(context, node) {
          return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function(v) {
            return "node " + v;
          });
        }
      },
      browser_ray: {
        matches: ["browser", "sign", "version"],
        regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
        select: function(context, node) {
          var version = node.version;
          var data = checkName(node.browser, context);
          var alias = browserslist.versionAliases[data.name][version];
          if (alias)
            version = alias;
          return data.released.filter(generateFilter(node.sign, version)).map(function(v) {
            return data.name + " " + v;
          });
        }
      },
      firefox_esr: {
        matches: [],
        regexp: /^(firefox|ff|fx)\s+esr$/i,
        select: function() {
          return ["firefox 102"];
        }
      },
      opera_mini_all: {
        matches: [],
        regexp: /(operamini|op_mini)\s+all/i,
        select: function() {
          return ["op_mini all"];
        }
      },
      electron_version: {
        matches: ["version"],
        regexp: /^electron\s+([\d.]+)$/i,
        select: function(context, node) {
          var versionToUse = normalizeElectron(node.version);
          var chrome = e2c[versionToUse];
          if (!chrome) {
            throw new BrowserslistError(
              "Unknown version " + node.version + " of electron"
            );
          }
          return ["chrome " + chrome];
        }
      },
      node_major_version: {
        matches: ["version"],
        regexp: /^node\s+(\d+)$/i,
        select: nodeQuery
      },
      node_minor_version: {
        matches: ["version"],
        regexp: /^node\s+(\d+\.\d+)$/i,
        select: nodeQuery
      },
      node_patch_version: {
        matches: ["version"],
        regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
        select: nodeQuery
      },
      current_node: {
        matches: [],
        regexp: /^current\s+node$/i,
        select: function(context) {
          return [env.currentNode(resolve, context)];
        }
      },
      maintained_node: {
        matches: [],
        regexp: /^maintained\s+node\s+versions$/i,
        select: function(context) {
          var now = Date.now();
          var queries = Object.keys(jsEOL).filter(function(key) {
            return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
          }).map(function(key) {
            return "node " + key.slice(1);
          });
          return resolve(queries, context);
        }
      },
      phantomjs_1_9: {
        matches: [],
        regexp: /^phantomjs\s+1.9$/i,
        select: function() {
          return ["safari 5"];
        }
      },
      phantomjs_2_1: {
        matches: [],
        regexp: /^phantomjs\s+2.1$/i,
        select: function() {
          return ["safari 6"];
        }
      },
      browser_version: {
        matches: ["browser", "version"],
        regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
        select: function(context, node) {
          var version = node.version;
          if (/^tp$/i.test(version))
            version = "TP";
          var data = checkName(node.browser, context);
          var alias = normalizeVersion(data, version);
          if (alias) {
            version = alias;
          } else {
            if (version.indexOf(".") === -1) {
              alias = version + ".0";
            } else {
              alias = version.replace(/\.0$/, "");
            }
            alias = normalizeVersion(data, alias);
            if (alias) {
              version = alias;
            } else if (context.ignoreUnknownVersions) {
              return [];
            } else {
              throw new BrowserslistError(
                "Unknown version " + version + " of " + node.browser
              );
            }
          }
          return [data.name + " " + version];
        }
      },
      browserslist_config: {
        matches: [],
        regexp: /^browserslist config$/i,
        select: function(context) {
          return browserslist(void 0, context);
        }
      },
      extends: {
        matches: ["config"],
        regexp: /^extends (.+)$/i,
        select: function(context, node) {
          return resolve(env.loadQueries(context, node.config), context);
        }
      },
      defaults: {
        matches: [],
        regexp: /^defaults$/i,
        select: function(context) {
          return resolve(browserslist.defaults, context);
        }
      },
      dead: {
        matches: [],
        regexp: /^dead$/i,
        select: function(context) {
          var dead = [
            "Baidu >= 0",
            "ie <= 11",
            "ie_mob <= 11",
            "bb <= 10",
            "op_mob <= 12.1",
            "samsung 4"
          ];
          return resolve(dead, context);
        }
      },
      unknown: {
        matches: [],
        regexp: /^(\w+)$/i,
        select: function(context, node) {
          if (byName(node.query, context)) {
            throw new BrowserslistError(
              "Specify versions in Browserslist query for browser " + node.query
            );
          } else {
            throw unknownQuery(node.query);
          }
        }
      }
    };
    (function() {
      for (var name in agents) {
        var browser = agents[name];
        browserslist.data[name] = {
          name,
          versions: normalize(agents[name].versions),
          released: normalize(agents[name].versions.slice(0, -3)),
          releaseDate: agents[name].release_date
        };
        fillUsage(browserslist.usage.global, name, browser.usage_global);
        browserslist.versionAliases[name] = {};
        for (var i = 0; i < browser.versions.length; i++) {
          var full = browser.versions[i];
          if (!full)
            continue;
          if (full.indexOf("-") !== -1) {
            var interval = full.split("-");
            for (var j = 0; j < interval.length; j++) {
              browserslist.versionAliases[name][interval[j]] = full;
            }
          }
        }
      }
      browserslist.nodeVersions = jsReleases.map(function(release) {
        return release.version;
      });
    })();
    module.exports = browserslist;
  }
});

// node_modules/autoprefixer/lib/utils.js
var require_utils = __commonJS({
  "node_modules/autoprefixer/lib/utils.js"(exports, module) {
    var { list } = require_postcss();
    module.exports.error = function(text) {
      let err = new Error(text);
      err.autoprefixer = true;
      throw err;
    };
    module.exports.uniq = function(array) {
      return [...new Set(array)];
    };
    module.exports.removeNote = function(string) {
      if (!string.includes(" ")) {
        return string;
      }
      return string.split(" ")[0];
    };
    module.exports.escapeRegexp = function(string) {
      return string.replace(/[$()*+-.?[\\\]^{|}]/g, "\\$&");
    };
    module.exports.regexp = function(word, escape = true) {
      if (escape) {
        word = this.escapeRegexp(word);
      }
      return new RegExp(`(^|[\\s,(])(${word}($|[\\s(,]))`, "gi");
    };
    module.exports.editList = function(value, callback) {
      let origin = list.comma(value);
      let changed = callback(origin, []);
      if (origin === changed) {
        return value;
      }
      let join = value.match(/,\s*/);
      join = join ? join[0] : ", ";
      return changed.join(join);
    };
    module.exports.splitSelector = function(selector) {
      return list.comma(selector).map((i) => {
        return list.space(i).map((k) => {
          return k.split(/(?=\.|#)/g);
        });
      });
    };
    module.exports.isPureNumber = function(value) {
      if (typeof value === "number") {
        return true;
      }
      if (typeof value === "string") {
        return /^[0-9]+$/.test(value);
      }
      return false;
    };
  }
});

// node_modules/autoprefixer/lib/browsers.js
var require_browsers3 = __commonJS({
  "node_modules/autoprefixer/lib/browsers.js"(exports, module) {
    var browserslist = require_browserslist();
    var { agents } = require_agents2();
    var utils = require_utils();
    var Browsers = class {
      static prefixes() {
        if (this.prefixesCache) {
          return this.prefixesCache;
        }
        this.prefixesCache = [];
        for (let name in agents) {
          this.prefixesCache.push(`-${agents[name].prefix}-`);
        }
        this.prefixesCache = utils.uniq(this.prefixesCache).sort((a, b) => b.length - a.length);
        return this.prefixesCache;
      }
      static withPrefix(value) {
        if (!this.prefixesRegexp) {
          this.prefixesRegexp = new RegExp(this.prefixes().join("|"));
        }
        return this.prefixesRegexp.test(value);
      }
      constructor(data, requirements, options, browserslistOpts) {
        this.data = data;
        this.options = options || {};
        this.browserslistOpts = browserslistOpts || {};
        this.selected = this.parse(requirements);
      }
      parse(requirements) {
        let opts = {};
        for (let i in this.browserslistOpts) {
          opts[i] = this.browserslistOpts[i];
        }
        opts.path = this.options.from;
        return browserslist(requirements, opts);
      }
      prefix(browser) {
        let [name, version] = browser.split(" ");
        let data = this.data[name];
        let prefix = data.prefix_exceptions && data.prefix_exceptions[version];
        if (!prefix) {
          prefix = data.prefix;
        }
        return `-${prefix}-`;
      }
      isSelected(browser) {
        return this.selected.includes(browser);
      }
    };
    module.exports = Browsers;
  }
});

// node_modules/autoprefixer/lib/vendor.js
var require_vendor = __commonJS({
  "node_modules/autoprefixer/lib/vendor.js"(exports, module) {
    module.exports = {
      prefix(prop) {
        let match = prop.match(/^(-\w+-)/);
        if (match) {
          return match[0];
        }
        return "";
      },
      unprefixed(prop) {
        return prop.replace(/^-\w+-/, "");
      }
    };
  }
});

// node_modules/autoprefixer/lib/prefixer.js
var require_prefixer = __commonJS({
  "node_modules/autoprefixer/lib/prefixer.js"(exports, module) {
    var Browsers = require_browsers3();
    var vendor = require_vendor();
    var utils = require_utils();
    function clone(obj, parent) {
      let cloned = new obj.constructor();
      for (let i of Object.keys(obj || {})) {
        let value = obj[i];
        if (i === "parent" && typeof value === "object") {
          if (parent) {
            cloned[i] = parent;
          }
        } else if (i === "source" || i === null) {
          cloned[i] = value;
        } else if (Array.isArray(value)) {
          cloned[i] = value.map((x) => clone(x, cloned));
        } else if (i !== "_autoprefixerPrefix" && i !== "_autoprefixerValues" && i !== "proxyCache") {
          if (typeof value === "object" && value !== null) {
            value = clone(value, cloned);
          }
          cloned[i] = value;
        }
      }
      return cloned;
    }
    var Prefixer = class {
      static hack(klass) {
        if (!this.hacks) {
          this.hacks = {};
        }
        return klass.names.map((name) => {
          this.hacks[name] = klass;
          return this.hacks[name];
        });
      }
      static load(name, prefixes, all) {
        let Klass = this.hacks && this.hacks[name];
        if (Klass) {
          return new Klass(name, prefixes, all);
        } else {
          return new this(name, prefixes, all);
        }
      }
      static clone(node, overrides) {
        let cloned = clone(node);
        for (let name in overrides) {
          cloned[name] = overrides[name];
        }
        return cloned;
      }
      constructor(name, prefixes, all) {
        this.prefixes = prefixes;
        this.name = name;
        this.all = all;
      }
      parentPrefix(node) {
        let prefix;
        if (typeof node._autoprefixerPrefix !== "undefined") {
          prefix = node._autoprefixerPrefix;
        } else if (node.type === "decl" && node.prop[0] === "-") {
          prefix = vendor.prefix(node.prop);
        } else if (node.type === "root") {
          prefix = false;
        } else if (node.type === "rule" && node.selector.includes(":-") && /:(-\w+-)/.test(node.selector)) {
          prefix = node.selector.match(/:(-\w+-)/)[1];
        } else if (node.type === "atrule" && node.name[0] === "-") {
          prefix = vendor.prefix(node.name);
        } else {
          prefix = this.parentPrefix(node.parent);
        }
        if (!Browsers.prefixes().includes(prefix)) {
          prefix = false;
        }
        node._autoprefixerPrefix = prefix;
        return node._autoprefixerPrefix;
      }
      process(node, result) {
        if (!this.check(node)) {
          return void 0;
        }
        let parent = this.parentPrefix(node);
        let prefixes = this.prefixes.filter(
          (prefix) => !parent || parent === utils.removeNote(prefix)
        );
        let added = [];
        for (let prefix of prefixes) {
          if (this.add(node, prefix, added.concat([prefix]), result)) {
            added.push(prefix);
          }
        }
        return added;
      }
      clone(node, overrides) {
        return Prefixer.clone(node, overrides);
      }
    };
    module.exports = Prefixer;
  }
});

// node_modules/autoprefixer/lib/declaration.js
var require_declaration = __commonJS({
  "node_modules/autoprefixer/lib/declaration.js"(exports, module) {
    var Prefixer = require_prefixer();
    var Browsers = require_browsers3();
    var utils = require_utils();
    var Declaration = class extends Prefixer {
      check() {
        return true;
      }
      prefixed(prop, prefix) {
        return prefix + prop;
      }
      normalize(prop) {
        return prop;
      }
      otherPrefixes(value, prefix) {
        for (let other of Browsers.prefixes()) {
          if (other === prefix) {
            continue;
          }
          if (value.includes(other)) {
            return value.replace(/var\([^)]+\)/, "").includes(other);
          }
        }
        return false;
      }
      set(decl, prefix) {
        decl.prop = this.prefixed(decl.prop, prefix);
        return decl;
      }
      needCascade(decl) {
        if (!decl._autoprefixerCascade) {
          decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw("before").includes("\n");
        }
        return decl._autoprefixerCascade;
      }
      maxPrefixed(prefixes, decl) {
        if (decl._autoprefixerMax) {
          return decl._autoprefixerMax;
        }
        let max = 0;
        for (let prefix of prefixes) {
          prefix = utils.removeNote(prefix);
          if (prefix.length > max) {
            max = prefix.length;
          }
        }
        decl._autoprefixerMax = max;
        return decl._autoprefixerMax;
      }
      calcBefore(prefixes, decl, prefix = "") {
        let max = this.maxPrefixed(prefixes, decl);
        let diff = max - utils.removeNote(prefix).length;
        let before = decl.raw("before");
        if (diff > 0) {
          before += Array(diff).fill(" ").join("");
        }
        return before;
      }
      restoreBefore(decl) {
        let lines = decl.raw("before").split("\n");
        let min = lines[lines.length - 1];
        this.all.group(decl).up((prefixed) => {
          let array = prefixed.raw("before").split("\n");
          let last = array[array.length - 1];
          if (last.length < min.length) {
            min = last;
          }
        });
        lines[lines.length - 1] = min;
        decl.raws.before = lines.join("\n");
      }
      insert(decl, prefix, prefixes) {
        let cloned = this.set(this.clone(decl), prefix);
        if (!cloned)
          return void 0;
        let already = decl.parent.some(
          (i) => i.prop === cloned.prop && i.value === cloned.value
        );
        if (already) {
          return void 0;
        }
        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, cloned);
      }
      isAlready(decl, prefixed) {
        let already = this.all.group(decl).up((i) => i.prop === prefixed);
        if (!already) {
          already = this.all.group(decl).down((i) => i.prop === prefixed);
        }
        return already;
      }
      add(decl, prefix, prefixes, result) {
        let prefixed = this.prefixed(decl.prop, prefix);
        if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {
          return void 0;
        }
        return this.insert(decl, prefix, prefixes, result);
      }
      process(decl, result) {
        if (!this.needCascade(decl)) {
          super.process(decl, result);
          return;
        }
        let prefixes = super.process(decl, result);
        if (!prefixes || !prefixes.length) {
          return;
        }
        this.restoreBefore(decl);
        decl.raws.before = this.calcBefore(prefixes, decl);
      }
      old(prop, prefix) {
        return [this.prefixed(prop, prefix)];
      }
    };
    module.exports = Declaration;
  }
});

// node_modules/fraction.js/fraction.js
var require_fraction = __commonJS({
  "node_modules/fraction.js/fraction.js"(exports, module) {
    (function(root) {
      "use strict";
      var MAX_CYCLE_LEN = 2e3;
      var P = {
        "s": 1,
        "n": 0,
        "d": 1
      };
      function assign(n, s) {
        if (isNaN(n = parseInt(n, 10))) {
          throw Fraction["InvalidParameter"];
        }
        return n * s;
      }
      function newFraction(n, d) {
        if (d === 0) {
          throw Fraction["DivisionByZero"];
        }
        var f = Object.create(Fraction.prototype);
        f["s"] = n < 0 ? -1 : 1;
        n = n < 0 ? -n : n;
        var a = gcd(n, d);
        f["n"] = n / a;
        f["d"] = d / a;
        return f;
      }
      function factorize(num) {
        var factors = {};
        var n = num;
        var i = 2;
        var s = 4;
        while (s <= n) {
          while (n % i === 0) {
            n /= i;
            factors[i] = (factors[i] || 0) + 1;
          }
          s += 1 + 2 * i++;
        }
        if (n !== num) {
          if (n > 1)
            factors[n] = (factors[n] || 0) + 1;
        } else {
          factors[num] = (factors[num] || 0) + 1;
        }
        return factors;
      }
      var parse = function(p1, p2) {
        var n = 0, d = 1, s = 1;
        var v = 0, w = 0, x = 0, y = 1, z = 1;
        var A = 0, B = 1;
        var C = 1, D = 1;
        var N = 1e7;
        var M;
        if (p1 === void 0 || p1 === null) {
        } else if (p2 !== void 0) {
          n = p1;
          d = p2;
          s = n * d;
          if (n % 1 !== 0 || d % 1 !== 0) {
            throw Fraction["NonIntegerParameter"];
          }
        } else
          switch (typeof p1) {
            case "object": {
              if ("d" in p1 && "n" in p1) {
                n = p1["n"];
                d = p1["d"];
                if ("s" in p1)
                  n *= p1["s"];
              } else if (0 in p1) {
                n = p1[0];
                if (1 in p1)
                  d = p1[1];
              } else {
                throw Fraction["InvalidParameter"];
              }
              s = n * d;
              break;
            }
            case "number": {
              if (p1 < 0) {
                s = p1;
                p1 = -p1;
              }
              if (p1 % 1 === 0) {
                n = p1;
              } else if (p1 > 0) {
                if (p1 >= 1) {
                  z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                  p1 /= z;
                }
                while (B <= N && D <= N) {
                  M = (A + C) / (B + D);
                  if (p1 === M) {
                    if (B + D <= N) {
                      n = A + C;
                      d = B + D;
                    } else if (D > B) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                    break;
                  } else {
                    if (p1 > M) {
                      A += C;
                      B += D;
                    } else {
                      C += A;
                      D += B;
                    }
                    if (B > N) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                  }
                }
                n *= z;
              } else if (isNaN(p1) || isNaN(p2)) {
                d = n = NaN;
              }
              break;
            }
            case "string": {
              B = p1.match(/\d+|./g);
              if (B === null)
                throw Fraction["InvalidParameter"];
              if (B[A] === "-") {
                s = -1;
                A++;
              } else if (B[A] === "+") {
                A++;
              }
              if (B.length === A + 1) {
                w = assign(B[A++], s);
              } else if (B[A + 1] === "." || B[A] === ".") {
                if (B[A] !== ".") {
                  v = assign(B[A++], s);
                }
                A++;
                if (A + 1 === B.length || B[A + 1] === "(" && B[A + 3] === ")" || B[A + 1] === "'" && B[A + 3] === "'") {
                  w = assign(B[A], s);
                  y = Math.pow(10, B[A].length);
                  A++;
                }
                if (B[A] === "(" && B[A + 2] === ")" || B[A] === "'" && B[A + 2] === "'") {
                  x = assign(B[A + 1], s);
                  z = Math.pow(10, B[A + 1].length) - 1;
                  A += 3;
                }
              } else if (B[A + 1] === "/" || B[A + 1] === ":") {
                w = assign(B[A], s);
                y = assign(B[A + 2], 1);
                A += 3;
              } else if (B[A + 3] === "/" && B[A + 1] === " ") {
                v = assign(B[A], s);
                w = assign(B[A + 2], s);
                y = assign(B[A + 4], 1);
                A += 5;
              }
              if (B.length <= A) {
                d = y * z;
                s = n = x + d * v + z * w;
                break;
              }
            }
            default:
              throw Fraction["InvalidParameter"];
          }
        if (d === 0) {
          throw Fraction["DivisionByZero"];
        }
        P["s"] = s < 0 ? -1 : 1;
        P["n"] = Math.abs(n);
        P["d"] = Math.abs(d);
      };
      function modpow(b, e, m) {
        var r = 1;
        for (; e > 0; b = b * b % m, e >>= 1) {
          if (e & 1) {
            r = r * b % m;
          }
        }
        return r;
      }
      function cycleLen(n, d) {
        for (; d % 2 === 0; d /= 2) {
        }
        for (; d % 5 === 0; d /= 5) {
        }
        if (d === 1)
          return 0;
        var rem = 10 % d;
        var t = 1;
        for (; rem !== 1; t++) {
          rem = rem * 10 % d;
          if (t > MAX_CYCLE_LEN)
            return 0;
        }
        return t;
      }
      function cycleStart(n, d, len) {
        var rem1 = 1;
        var rem2 = modpow(10, len, d);
        for (var t = 0; t < 300; t++) {
          if (rem1 === rem2)
            return t;
          rem1 = rem1 * 10 % d;
          rem2 = rem2 * 10 % d;
        }
        return 0;
      }
      function gcd(a, b) {
        if (!a)
          return b;
        if (!b)
          return a;
        while (1) {
          a %= b;
          if (!a)
            return b;
          b %= a;
          if (!b)
            return a;
        }
      }
      ;
      function Fraction(a, b) {
        parse(a, b);
        if (this instanceof Fraction) {
          a = gcd(P["d"], P["n"]);
          this["s"] = P["s"];
          this["n"] = P["n"] / a;
          this["d"] = P["d"] / a;
        } else {
          return newFraction(P["s"] * P["n"], P["d"]);
        }
      }
      Fraction["DivisionByZero"] = new Error("Division by Zero");
      Fraction["InvalidParameter"] = new Error("Invalid argument");
      Fraction["NonIntegerParameter"] = new Error("Parameters must be integer");
      Fraction.prototype = {
        "s": 1,
        "n": 0,
        "d": 1,
        "abs": function() {
          return newFraction(this["n"], this["d"]);
        },
        "neg": function() {
          return newFraction(-this["s"] * this["n"], this["d"]);
        },
        "add": function(a, b) {
          parse(a, b);
          return newFraction(
            this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },
        "sub": function(a, b) {
          parse(a, b);
          return newFraction(
            this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
            this["d"] * P["d"]
          );
        },
        "mul": function(a, b) {
          parse(a, b);
          return newFraction(
            this["s"] * P["s"] * this["n"] * P["n"],
            this["d"] * P["d"]
          );
        },
        "div": function(a, b) {
          parse(a, b);
          return newFraction(
            this["s"] * P["s"] * this["n"] * P["d"],
            this["d"] * P["n"]
          );
        },
        "clone": function() {
          return newFraction(this["s"] * this["n"], this["d"]);
        },
        "mod": function(a, b) {
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          if (a === void 0) {
            return newFraction(this["s"] * this["n"] % this["d"], 1);
          }
          parse(a, b);
          if (0 === P["n"] && 0 === this["d"]) {
            throw Fraction["DivisionByZero"];
          }
          return newFraction(
            this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
            P["d"] * this["d"]
          );
        },
        "gcd": function(a, b) {
          parse(a, b);
          return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
        },
        "lcm": function(a, b) {
          parse(a, b);
          if (P["n"] === 0 && this["n"] === 0) {
            return newFraction(0, 1);
          }
          return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
        },
        "ceil": function(places) {
          places = Math.pow(10, places || 0);
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
        },
        "floor": function(places) {
          places = Math.pow(10, places || 0);
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
        },
        "round": function(places) {
          places = Math.pow(10, places || 0);
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return new Fraction(NaN);
          }
          return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
        },
        "inverse": function() {
          return newFraction(this["s"] * this["d"], this["n"]);
        },
        "pow": function(a, b) {
          parse(a, b);
          if (P["d"] === 1) {
            if (P["s"] < 0) {
              return newFraction(Math.pow(this["s"] * this["d"], P["n"]), Math.pow(this["n"], P["n"]));
            } else {
              return newFraction(Math.pow(this["s"] * this["n"], P["n"]), Math.pow(this["d"], P["n"]));
            }
          }
          if (this["s"] < 0)
            return null;
          var N = factorize(this["n"]);
          var D = factorize(this["d"]);
          var n = 1;
          var d = 1;
          for (var k in N) {
            if (k === "1")
              continue;
            if (k === "0") {
              n = 0;
              break;
            }
            N[k] *= P["n"];
            if (N[k] % P["d"] === 0) {
              N[k] /= P["d"];
            } else
              return null;
            n *= Math.pow(k, N[k]);
          }
          for (var k in D) {
            if (k === "1")
              continue;
            D[k] *= P["n"];
            if (D[k] % P["d"] === 0) {
              D[k] /= P["d"];
            } else
              return null;
            d *= Math.pow(k, D[k]);
          }
          if (P["s"] < 0) {
            return newFraction(d, n);
          }
          return newFraction(n, d);
        },
        "equals": function(a, b) {
          parse(a, b);
          return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"];
        },
        "compare": function(a, b) {
          parse(a, b);
          var t = this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"];
          return (0 < t) - (t < 0);
        },
        "simplify": function(eps) {
          if (isNaN(this["n"]) || isNaN(this["d"])) {
            return this;
          }
          eps = eps || 1e-3;
          var thisABS = this["abs"]();
          var cont = thisABS["toContinued"]();
          for (var i = 1; i < cont.length; i++) {
            var s = newFraction(cont[i - 1], 1);
            for (var k = i - 2; k >= 0; k--) {
              s = s["inverse"]()["add"](cont[k]);
            }
            if (s["sub"](thisABS)["abs"]().valueOf() < eps) {
              return s["mul"](this["s"]);
            }
          }
          return this;
        },
        "divisible": function(a, b) {
          parse(a, b);
          return !(!(P["n"] * this["d"]) || this["n"] * P["d"] % (P["n"] * this["d"]));
        },
        "valueOf": function() {
          return this["s"] * this["n"] / this["d"];
        },
        "toFraction": function(excludeWhole) {
          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str += "-";
          }
          if (d === 1) {
            str += n;
          } else {
            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str += whole;
              str += " ";
              n %= d;
            }
            str += n;
            str += "/";
            str += d;
          }
          return str;
        },
        "toLatex": function(excludeWhole) {
          var whole, str = "";
          var n = this["n"];
          var d = this["d"];
          if (this["s"] < 0) {
            str += "-";
          }
          if (d === 1) {
            str += n;
          } else {
            if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
              str += whole;
              n %= d;
            }
            str += "\\frac{";
            str += n;
            str += "}{";
            str += d;
            str += "}";
          }
          return str;
        },
        "toContinued": function() {
          var t;
          var a = this["n"];
          var b = this["d"];
          var res = [];
          if (isNaN(a) || isNaN(b)) {
            return res;
          }
          do {
            res.push(Math.floor(a / b));
            t = a % b;
            a = b;
            b = t;
          } while (a !== 1);
          return res;
        },
        "toString": function(dec) {
          var N = this["n"];
          var D = this["d"];
          if (isNaN(N) || isNaN(D)) {
            return "NaN";
          }
          dec = dec || 15;
          var cycLen = cycleLen(N, D);
          var cycOff = cycleStart(N, D, cycLen);
          var str = this["s"] < 0 ? "-" : "";
          str += N / D | 0;
          N %= D;
          N *= 10;
          if (N)
            str += ".";
          if (cycLen) {
            for (var i = cycOff; i--; ) {
              str += N / D | 0;
              N %= D;
              N *= 10;
            }
            str += "(";
            for (var i = cycLen; i--; ) {
              str += N / D | 0;
              N %= D;
              N *= 10;
            }
            str += ")";
          } else {
            for (var i = dec; N && i--; ) {
              str += N / D | 0;
              N %= D;
              N *= 10;
            }
          }
          return str;
        }
      };
      if (typeof define === "function" && define["amd"]) {
        define([], function() {
          return Fraction;
        });
      } else if (typeof exports === "object") {
        Object.defineProperty(Fraction, "__esModule", { "value": true });
        Fraction["default"] = Fraction;
        Fraction["Fraction"] = Fraction;
        module["exports"] = Fraction;
      } else {
        root["Fraction"] = Fraction;
      }
    })(exports);
  }
});

// node_modules/autoprefixer/lib/resolution.js
var require_resolution = __commonJS({
  "node_modules/autoprefixer/lib/resolution.js"(exports, module) {
    var FractionJs = require_fraction();
    var Prefixer = require_prefixer();
    var utils = require_utils();
    var REGEXP = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpcm|dpi|x)/gi;
    var SPLIT = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpcm|dpi|x)/i;
    var Resolution = class extends Prefixer {
      prefixName(prefix, name) {
        if (prefix === "-moz-") {
          return name + "--moz-device-pixel-ratio";
        } else {
          return prefix + name + "-device-pixel-ratio";
        }
      }
      prefixQuery(prefix, name, colon, value, units) {
        value = new FractionJs(value);
        if (units === "dpi") {
          value = value.div(96);
        } else if (units === "dpcm") {
          value = value.mul(2.54).div(96);
        }
        value = value.simplify();
        if (prefix === "-o-") {
          value = value.n + "/" + value.d;
        }
        return this.prefixName(prefix, name) + colon + value;
      }
      clean(rule) {
        if (!this.bad) {
          this.bad = [];
          for (let prefix of this.prefixes) {
            this.bad.push(this.prefixName(prefix, "min"));
            this.bad.push(this.prefixName(prefix, "max"));
          }
        }
        rule.params = utils.editList(rule.params, (queries) => {
          return queries.filter((query) => this.bad.every((i) => !query.includes(i)));
        });
      }
      process(rule) {
        let parent = this.parentPrefix(rule);
        let prefixes = parent ? [parent] : this.prefixes;
        rule.params = utils.editList(rule.params, (origin, prefixed) => {
          for (let query of origin) {
            if (!query.includes("min-resolution") && !query.includes("max-resolution")) {
              prefixed.push(query);
              continue;
            }
            for (let prefix of prefixes) {
              let processed = query.replace(REGEXP, (str) => {
                let parts = str.match(SPLIT);
                return this.prefixQuery(
                  prefix,
                  parts[1],
                  parts[2],
                  parts[3],
                  parts[4]
                );
              });
              prefixed.push(processed);
            }
            prefixed.push(query);
          }
          return utils.uniq(prefixed);
        });
      }
    };
    module.exports = Resolution;
  }
});

// node_modules/postcss-value-parser/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/postcss-value-parser/lib/parse.js"(exports, module) {
    var openParentheses = "(".charCodeAt(0);
    var closeParentheses = ")".charCodeAt(0);
    var singleQuote = "'".charCodeAt(0);
    var doubleQuote = '"'.charCodeAt(0);
    var backslash = "\\".charCodeAt(0);
    var slash = "/".charCodeAt(0);
    var comma = ",".charCodeAt(0);
    var colon = ":".charCodeAt(0);
    var star = "*".charCodeAt(0);
    var uLower = "u".charCodeAt(0);
    var uUpper = "U".charCodeAt(0);
    var plus = "+".charCodeAt(0);
    var isUnicodeRange = /^[a-f0-9?-]+$/i;
    module.exports = function(input) {
      var tokens = [];
      var value = input;
      var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;
      var pos = 0;
      var code = value.charCodeAt(pos);
      var max = value.length;
      var stack = [{ nodes: tokens }];
      var balanced = 0;
      var parent;
      var name = "";
      var before = "";
      var after = "";
      while (pos < max) {
        if (code <= 32) {
          next = pos;
          do {
            next += 1;
            code = value.charCodeAt(next);
          } while (code <= 32);
          token = value.slice(pos, next);
          prev = tokens[tokens.length - 1];
          if (code === closeParentheses && balanced) {
            after = token;
          } else if (prev && prev.type === "div") {
            prev.after = token;
            prev.sourceEndIndex += token.length;
          } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === "function" && parent.value !== "calc")) {
            before = token;
          } else {
            tokens.push({
              type: "space",
              sourceIndex: pos,
              sourceEndIndex: next,
              value: token
            });
          }
          pos = next;
        } else if (code === singleQuote || code === doubleQuote) {
          next = pos;
          quote = code === singleQuote ? "'" : '"';
          token = {
            type: "string",
            sourceIndex: pos,
            quote
          };
          do {
            escape = false;
            next = value.indexOf(quote, next + 1);
            if (~next) {
              escapePos = next;
              while (value.charCodeAt(escapePos - 1) === backslash) {
                escapePos -= 1;
                escape = !escape;
              }
            } else {
              value += quote;
              next = value.length - 1;
              token.unclosed = true;
            }
          } while (escape);
          token.value = value.slice(pos + 1, next);
          token.sourceEndIndex = token.unclosed ? next : next + 1;
          tokens.push(token);
          pos = next + 1;
          code = value.charCodeAt(pos);
        } else if (code === slash && value.charCodeAt(pos + 1) === star) {
          next = value.indexOf("*/", pos);
          token = {
            type: "comment",
            sourceIndex: pos,
            sourceEndIndex: next + 2
          };
          if (next === -1) {
            token.unclosed = true;
            next = value.length;
            token.sourceEndIndex = next;
          }
          token.value = value.slice(pos + 2, next);
          tokens.push(token);
          pos = next + 2;
          code = value.charCodeAt(pos);
        } else if ((code === slash || code === star) && parent && parent.type === "function" && parent.value === "calc") {
          token = value[pos];
          tokens.push({
            type: "word",
            sourceIndex: pos - before.length,
            sourceEndIndex: pos + token.length,
            value: token
          });
          pos += 1;
          code = value.charCodeAt(pos);
        } else if (code === slash || code === comma || code === colon) {
          token = value[pos];
          tokens.push({
            type: "div",
            sourceIndex: pos - before.length,
            sourceEndIndex: pos + token.length,
            value: token,
            before,
            after: ""
          });
          before = "";
          pos += 1;
          code = value.charCodeAt(pos);
        } else if (openParentheses === code) {
          next = pos;
          do {
            next += 1;
            code = value.charCodeAt(next);
          } while (code <= 32);
          parenthesesOpenPos = pos;
          token = {
            type: "function",
            sourceIndex: pos - name.length,
            value: name,
            before: value.slice(parenthesesOpenPos + 1, next)
          };
          pos = next;
          if (name === "url" && code !== singleQuote && code !== doubleQuote) {
            next -= 1;
            do {
              escape = false;
              next = value.indexOf(")", next + 1);
              if (~next) {
                escapePos = next;
                while (value.charCodeAt(escapePos - 1) === backslash) {
                  escapePos -= 1;
                  escape = !escape;
                }
              } else {
                value += ")";
                next = value.length - 1;
                token.unclosed = true;
              }
            } while (escape);
            whitespacePos = next;
            do {
              whitespacePos -= 1;
              code = value.charCodeAt(whitespacePos);
            } while (code <= 32);
            if (parenthesesOpenPos < whitespacePos) {
              if (pos !== whitespacePos + 1) {
                token.nodes = [
                  {
                    type: "word",
                    sourceIndex: pos,
                    sourceEndIndex: whitespacePos + 1,
                    value: value.slice(pos, whitespacePos + 1)
                  }
                ];
              } else {
                token.nodes = [];
              }
              if (token.unclosed && whitespacePos + 1 !== next) {
                token.after = "";
                token.nodes.push({
                  type: "space",
                  sourceIndex: whitespacePos + 1,
                  sourceEndIndex: next,
                  value: value.slice(whitespacePos + 1, next)
                });
              } else {
                token.after = value.slice(whitespacePos + 1, next);
                token.sourceEndIndex = next;
              }
            } else {
              token.after = "";
              token.nodes = [];
            }
            pos = next + 1;
            token.sourceEndIndex = token.unclosed ? next : pos;
            code = value.charCodeAt(pos);
            tokens.push(token);
          } else {
            balanced += 1;
            token.after = "";
            token.sourceEndIndex = pos + 1;
            tokens.push(token);
            stack.push(token);
            tokens = token.nodes = [];
            parent = token;
          }
          name = "";
        } else if (closeParentheses === code && balanced) {
          pos += 1;
          code = value.charCodeAt(pos);
          parent.after = after;
          parent.sourceEndIndex += after.length;
          after = "";
          balanced -= 1;
          stack[stack.length - 1].sourceEndIndex = pos;
          stack.pop();
          parent = stack[balanced];
          tokens = parent.nodes;
        } else {
          next = pos;
          do {
            if (code === backslash) {
              next += 1;
            }
            next += 1;
            code = value.charCodeAt(next);
          } while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === "function" && parent.value === "calc" || code === slash && parent.type === "function" && parent.value === "calc" || code === closeParentheses && balanced));
          token = value.slice(pos, next);
          if (openParentheses === code) {
            name = token;
          } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {
            tokens.push({
              type: "unicode-range",
              sourceIndex: pos,
              sourceEndIndex: next,
              value: token
            });
          } else {
            tokens.push({
              type: "word",
              sourceIndex: pos,
              sourceEndIndex: next,
              value: token
            });
          }
          pos = next;
        }
      }
      for (pos = stack.length - 1; pos; pos -= 1) {
        stack[pos].unclosed = true;
        stack[pos].sourceEndIndex = value.length;
      }
      return stack[0].nodes;
    };
  }
});

// node_modules/postcss-value-parser/lib/walk.js
var require_walk = __commonJS({
  "node_modules/postcss-value-parser/lib/walk.js"(exports, module) {
    module.exports = function walk(nodes, cb, bubble) {
      var i, max, node, result;
      for (i = 0, max = nodes.length; i < max; i += 1) {
        node = nodes[i];
        if (!bubble) {
          result = cb(node, i, nodes);
        }
        if (result !== false && node.type === "function" && Array.isArray(node.nodes)) {
          walk(node.nodes, cb, bubble);
        }
        if (bubble) {
          cb(node, i, nodes);
        }
      }
    };
  }
});

// node_modules/postcss-value-parser/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/postcss-value-parser/lib/stringify.js"(exports, module) {
    function stringifyNode(node, custom) {
      var type = node.type;
      var value = node.value;
      var buf;
      var customResult;
      if (custom && (customResult = custom(node)) !== void 0) {
        return customResult;
      } else if (type === "word" || type === "space") {
        return value;
      } else if (type === "string") {
        buf = node.quote || "";
        return buf + value + (node.unclosed ? "" : buf);
      } else if (type === "comment") {
        return "/*" + value + (node.unclosed ? "" : "*/");
      } else if (type === "div") {
        return (node.before || "") + value + (node.after || "");
      } else if (Array.isArray(node.nodes)) {
        buf = stringify(node.nodes, custom);
        if (type !== "function") {
          return buf;
        }
        return value + "(" + (node.before || "") + buf + (node.after || "") + (node.unclosed ? "" : ")");
      }
      return value;
    }
    function stringify(nodes, custom) {
      var result, i;
      if (Array.isArray(nodes)) {
        result = "";
        for (i = nodes.length - 1; ~i; i -= 1) {
          result = stringifyNode(nodes[i], custom) + result;
        }
        return result;
      }
      return stringifyNode(nodes, custom);
    }
    module.exports = stringify;
  }
});

// node_modules/postcss-value-parser/lib/unit.js
var require_unit = __commonJS({
  "node_modules/postcss-value-parser/lib/unit.js"(exports, module) {
    var minus = "-".charCodeAt(0);
    var plus = "+".charCodeAt(0);
    var dot = ".".charCodeAt(0);
    var exp = "e".charCodeAt(0);
    var EXP = "E".charCodeAt(0);
    function likeNumber(value) {
      var code = value.charCodeAt(0);
      var nextCode;
      if (code === plus || code === minus) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) {
          return true;
        }
        var nextNextCode = value.charCodeAt(2);
        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
          return true;
        }
        return false;
      }
      if (code === dot) {
        nextCode = value.charCodeAt(1);
        if (nextCode >= 48 && nextCode <= 57) {
          return true;
        }
        return false;
      }
      if (code >= 48 && code <= 57) {
        return true;
      }
      return false;
    }
    module.exports = function(value) {
      var pos = 0;
      var length = value.length;
      var code;
      var nextCode;
      var nextNextCode;
      if (length === 0 || !likeNumber(value)) {
        return false;
      }
      code = value.charCodeAt(pos);
      if (code === plus || code === minus) {
        pos++;
      }
      while (pos < length) {
        code = value.charCodeAt(pos);
        if (code < 48 || code > 57) {
          break;
        }
        pos += 1;
      }
      code = value.charCodeAt(pos);
      nextCode = value.charCodeAt(pos + 1);
      if (code === dot && nextCode >= 48 && nextCode <= 57) {
        pos += 2;
        while (pos < length) {
          code = value.charCodeAt(pos);
          if (code < 48 || code > 57) {
            break;
          }
          pos += 1;
        }
      }
      code = value.charCodeAt(pos);
      nextCode = value.charCodeAt(pos + 1);
      nextNextCode = value.charCodeAt(pos + 2);
      if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {
        pos += nextCode === plus || nextCode === minus ? 3 : 2;
        while (pos < length) {
          code = value.charCodeAt(pos);
          if (code < 48 || code > 57) {
            break;
          }
          pos += 1;
        }
      }
      return {
        number: value.slice(0, pos),
        unit: value.slice(pos)
      };
    };
  }
});

// node_modules/postcss-value-parser/lib/index.js
var require_lib = __commonJS({
  "node_modules/postcss-value-parser/lib/index.js"(exports, module) {
    var parse = require_parse2();
    var walk = require_walk();
    var stringify = require_stringify();
    function ValueParser(value) {
      if (this instanceof ValueParser) {
        this.nodes = parse(value);
        return this;
      }
      return new ValueParser(value);
    }
    ValueParser.prototype.toString = function() {
      return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
    };
    ValueParser.prototype.walk = function(cb, bubble) {
      walk(this.nodes, cb, bubble);
      return this;
    };
    ValueParser.unit = require_unit();
    ValueParser.walk = walk;
    ValueParser.stringify = stringify;
    module.exports = ValueParser;
  }
});

// node_modules/autoprefixer/lib/transition.js
var require_transition = __commonJS({
  "node_modules/autoprefixer/lib/transition.js"(exports, module) {
    var { list } = require_postcss();
    var parser = require_lib();
    var Browsers = require_browsers3();
    var vendor = require_vendor();
    var Transition = class {
      constructor(prefixes) {
        this.props = ["transition", "transition-property"];
        this.prefixes = prefixes;
      }
      add(decl, result) {
        let prefix, prop;
        let add = this.prefixes.add[decl.prop];
        let vendorPrefixes = this.ruleVendorPrefixes(decl);
        let declPrefixes = vendorPrefixes || add && add.prefixes || [];
        let params = this.parse(decl.value);
        let names = params.map((i) => this.findProp(i));
        let added = [];
        if (names.some((i) => i[0] === "-")) {
          return;
        }
        for (let param of params) {
          prop = this.findProp(param);
          if (prop[0] === "-")
            continue;
          let prefixer = this.prefixes.add[prop];
          if (!prefixer || !prefixer.prefixes)
            continue;
          for (prefix of prefixer.prefixes) {
            if (vendorPrefixes && !vendorPrefixes.some((p) => prefix.includes(p))) {
              continue;
            }
            let prefixed = this.prefixes.prefixed(prop, prefix);
            if (prefixed !== "-ms-transform" && !names.includes(prefixed)) {
              if (!this.disabled(prop, prefix)) {
                added.push(this.clone(prop, prefixed, param));
              }
            }
          }
        }
        params = params.concat(added);
        let value = this.stringify(params);
        let webkitClean = this.stringify(
          this.cleanFromUnprefixed(params, "-webkit-")
        );
        if (declPrefixes.includes("-webkit-")) {
          this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean);
        }
        this.cloneBefore(decl, decl.prop, webkitClean);
        if (declPrefixes.includes("-o-")) {
          let operaClean = this.stringify(this.cleanFromUnprefixed(params, "-o-"));
          this.cloneBefore(decl, `-o-${decl.prop}`, operaClean);
        }
        for (prefix of declPrefixes) {
          if (prefix !== "-webkit-" && prefix !== "-o-") {
            let prefixValue = this.stringify(
              this.cleanOtherPrefixes(params, prefix)
            );
            this.cloneBefore(decl, prefix + decl.prop, prefixValue);
          }
        }
        if (value !== decl.value && !this.already(decl, decl.prop, value)) {
          this.checkForWarning(result, decl);
          decl.cloneBefore();
          decl.value = value;
        }
      }
      findProp(param) {
        let prop = param[0].value;
        if (/^\d/.test(prop)) {
          for (let [i, token] of param.entries()) {
            if (i !== 0 && token.type === "word") {
              return token.value;
            }
          }
        }
        return prop;
      }
      already(decl, prop, value) {
        return decl.parent.some((i) => i.prop === prop && i.value === value);
      }
      cloneBefore(decl, prop, value) {
        if (!this.already(decl, prop, value)) {
          decl.cloneBefore({ prop, value });
        }
      }
      checkForWarning(result, decl) {
        if (decl.prop !== "transition-property") {
          return;
        }
        let isPrefixed = false;
        let hasAssociatedProp = false;
        decl.parent.each((i) => {
          if (i.type !== "decl") {
            return void 0;
          }
          if (i.prop.indexOf("transition-") !== 0) {
            return void 0;
          }
          let values = list.comma(i.value);
          if (i.prop === "transition-property") {
            values.forEach((value) => {
              let lookup = this.prefixes.add[value];
              if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {
                isPrefixed = true;
              }
            });
            return void 0;
          }
          hasAssociatedProp = hasAssociatedProp || values.length > 1;
          return false;
        });
        if (isPrefixed && hasAssociatedProp) {
          decl.warn(
            result,
            "Replace transition-property to transition, because Autoprefixer could not support any cases of transition-property and other transition-*"
          );
        }
      }
      remove(decl) {
        let params = this.parse(decl.value);
        params = params.filter((i) => {
          let prop = this.prefixes.remove[this.findProp(i)];
          return !prop || !prop.remove;
        });
        let value = this.stringify(params);
        if (decl.value === value) {
          return;
        }
        if (params.length === 0) {
          decl.remove();
          return;
        }
        let double = decl.parent.some((i) => {
          return i.prop === decl.prop && i.value === value;
        });
        let smaller = decl.parent.some((i) => {
          return i !== decl && i.prop === decl.prop && i.value.length > value.length;
        });
        if (double || smaller) {
          decl.remove();
          return;
        }
        decl.value = value;
      }
      parse(value) {
        let ast = parser(value);
        let result = [];
        let param = [];
        for (let node of ast.nodes) {
          param.push(node);
          if (node.type === "div" && node.value === ",") {
            result.push(param);
            param = [];
          }
        }
        result.push(param);
        return result.filter((i) => i.length > 0);
      }
      stringify(params) {
        if (params.length === 0) {
          return "";
        }
        let nodes = [];
        for (let param of params) {
          if (param[param.length - 1].type !== "div") {
            param.push(this.div(params));
          }
          nodes = nodes.concat(param);
        }
        if (nodes[0].type === "div") {
          nodes = nodes.slice(1);
        }
        if (nodes[nodes.length - 1].type === "div") {
          nodes = nodes.slice(0, -2 + 1 || void 0);
        }
        return parser.stringify({ nodes });
      }
      clone(origin, name, param) {
        let result = [];
        let changed = false;
        for (let i of param) {
          if (!changed && i.type === "word" && i.value === origin) {
            result.push({ type: "word", value: name });
            changed = true;
          } else {
            result.push(i);
          }
        }
        return result;
      }
      div(params) {
        for (let param of params) {
          for (let node of param) {
            if (node.type === "div" && node.value === ",") {
              return node;
            }
          }
        }
        return { type: "div", value: ",", after: " " };
      }
      cleanOtherPrefixes(params, prefix) {
        return params.filter((param) => {
          let current = vendor.prefix(this.findProp(param));
          return current === "" || current === prefix;
        });
      }
      cleanFromUnprefixed(params, prefix) {
        let remove = params.map((i) => this.findProp(i)).filter((i) => i.slice(0, prefix.length) === prefix).map((i) => this.prefixes.unprefixed(i));
        let result = [];
        for (let param of params) {
          let prop = this.findProp(param);
          let p = vendor.prefix(prop);
          if (!remove.includes(prop) && (p === prefix || p === "")) {
            result.push(param);
          }
        }
        return result;
      }
      disabled(prop, prefix) {
        let other = ["order", "justify-content", "align-self", "align-content"];
        if (prop.includes("flex") || other.includes(prop)) {
          if (this.prefixes.options.flexbox === false) {
            return true;
          }
          if (this.prefixes.options.flexbox === "no-2009") {
            return prefix.includes("2009");
          }
        }
        return void 0;
      }
      ruleVendorPrefixes(decl) {
        let { parent } = decl;
        if (parent.type !== "rule") {
          return false;
        } else if (!parent.selector.includes(":-")) {
          return false;
        }
        let selectors = Browsers.prefixes().filter(
          (s) => parent.selector.includes(":" + s)
        );
        return selectors.length > 0 ? selectors : false;
      }
    };
    module.exports = Transition;
  }
});

// node_modules/autoprefixer/lib/old-value.js
var require_old_value = __commonJS({
  "node_modules/autoprefixer/lib/old-value.js"(exports, module) {
    var utils = require_utils();
    var OldValue = class {
      constructor(unprefixed, prefixed, string, regexp) {
        this.unprefixed = unprefixed;
        this.prefixed = prefixed;
        this.string = string || prefixed;
        this.regexp = regexp || utils.regexp(prefixed);
      }
      check(value) {
        if (value.includes(this.string)) {
          return !!value.match(this.regexp);
        }
        return false;
      }
    };
    module.exports = OldValue;
  }
});

// node_modules/autoprefixer/lib/value.js
var require_value = __commonJS({
  "node_modules/autoprefixer/lib/value.js"(exports, module) {
    var Prefixer = require_prefixer();
    var OldValue = require_old_value();
    var vendor = require_vendor();
    var utils = require_utils();
    var Value = class extends Prefixer {
      static save(prefixes, decl) {
        let prop = decl.prop;
        let result = [];
        for (let prefix in decl._autoprefixerValues) {
          let value = decl._autoprefixerValues[prefix];
          if (value === decl.value) {
            continue;
          }
          let item;
          let propPrefix = vendor.prefix(prop);
          if (propPrefix === "-pie-") {
            continue;
          }
          if (propPrefix === prefix) {
            item = decl.value = value;
            result.push(item);
            continue;
          }
          let prefixed = prefixes.prefixed(prop, prefix);
          let rule = decl.parent;
          if (!rule.every((i) => i.prop !== prefixed)) {
            result.push(item);
            continue;
          }
          let trimmed = value.replace(/\s+/, " ");
          let already = rule.some(
            (i) => i.prop === decl.prop && i.value.replace(/\s+/, " ") === trimmed
          );
          if (already) {
            result.push(item);
            continue;
          }
          let cloned = this.clone(decl, { value });
          item = decl.parent.insertBefore(decl, cloned);
          result.push(item);
        }
        return result;
      }
      check(decl) {
        let value = decl.value;
        if (!value.includes(this.name)) {
          return false;
        }
        return !!value.match(this.regexp());
      }
      regexp() {
        return this.regexpCache || (this.regexpCache = utils.regexp(this.name));
      }
      replace(string, prefix) {
        return string.replace(this.regexp(), `$1${prefix}$2`);
      }
      value(decl) {
        if (decl.raws.value && decl.raws.value.value === decl.value) {
          return decl.raws.value.raw;
        } else {
          return decl.value;
        }
      }
      add(decl, prefix) {
        if (!decl._autoprefixerValues) {
          decl._autoprefixerValues = {};
        }
        let value = decl._autoprefixerValues[prefix] || this.value(decl);
        let before;
        do {
          before = value;
          value = this.replace(value, prefix);
          if (value === false)
            return;
        } while (value !== before);
        decl._autoprefixerValues[prefix] = value;
      }
      old(prefix) {
        return new OldValue(this.name, prefix + this.name);
      }
    };
    module.exports = Value;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-utils.js
var require_grid_utils = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-utils.js"(exports) {
    var parser = require_lib();
    var list = require_postcss().list;
    var uniq = require_utils().uniq;
    var escapeRegexp = require_utils().escapeRegexp;
    var splitSelector = require_utils().splitSelector;
    function convert(value) {
      if (value && value.length === 2 && value[0] === "span" && parseInt(value[1], 10) > 0) {
        return [false, parseInt(value[1], 10)];
      }
      if (value && value.length === 1 && parseInt(value[0], 10) > 0) {
        return [parseInt(value[0], 10), false];
      }
      return [false, false];
    }
    exports.translate = translate;
    function translate(values, startIndex, endIndex) {
      let startValue = values[startIndex];
      let endValue = values[endIndex];
      if (!startValue) {
        return [false, false];
      }
      let [start, spanStart] = convert(startValue);
      let [end, spanEnd] = convert(endValue);
      if (start && !endValue) {
        return [start, false];
      }
      if (spanStart && end) {
        return [end - spanStart, spanStart];
      }
      if (start && spanEnd) {
        return [start, spanEnd];
      }
      if (start && end) {
        return [start, end - start];
      }
      return [false, false];
    }
    exports.parse = parse;
    function parse(decl) {
      let node = parser(decl.value);
      let values = [];
      let current = 0;
      values[current] = [];
      for (let i of node.nodes) {
        if (i.type === "div") {
          current += 1;
          values[current] = [];
        } else if (i.type === "word") {
          values[current].push(i.value);
        }
      }
      return values;
    }
    exports.insertDecl = insertDecl;
    function insertDecl(decl, prop, value) {
      if (value && !decl.parent.some((i) => i.prop === `-ms-${prop}`)) {
        decl.cloneBefore({
          prop: `-ms-${prop}`,
          value: value.toString()
        });
      }
    }
    exports.prefixTrackProp = prefixTrackProp;
    function prefixTrackProp({ prop, prefix }) {
      return prefix + prop.replace("template-", "");
    }
    function transformRepeat({ nodes }, { gap }) {
      let { count, size } = nodes.reduce(
        (result, node) => {
          if (node.type === "div" && node.value === ",") {
            result.key = "size";
          } else {
            result[result.key].push(parser.stringify(node));
          }
          return result;
        },
        {
          key: "count",
          size: [],
          count: []
        }
      );
      if (gap) {
        size = size.filter((i) => i.trim());
        let val = [];
        for (let i = 1; i <= count; i++) {
          size.forEach((item, index) => {
            if (index > 0 || i > 1) {
              val.push(gap);
            }
            val.push(item);
          });
        }
        return val.join(" ");
      }
      return `(${size.join("")})[${count.join("")}]`;
    }
    exports.prefixTrackValue = prefixTrackValue;
    function prefixTrackValue({ value, gap }) {
      let result = parser(value).nodes.reduce((nodes, node) => {
        if (node.type === "function" && node.value === "repeat") {
          return nodes.concat({
            type: "word",
            value: transformRepeat(node, { gap })
          });
        }
        if (gap && node.type === "space") {
          return nodes.concat(
            {
              type: "space",
              value: " "
            },
            {
              type: "word",
              value: gap
            },
            node
          );
        }
        return nodes.concat(node);
      }, []);
      return parser.stringify(result);
    }
    var DOTS = /^\.+$/;
    function track(start, end) {
      return { start, end, span: end - start };
    }
    function getColumns(line) {
      return line.trim().split(/\s+/g);
    }
    exports.parseGridAreas = parseGridAreas;
    function parseGridAreas({ rows, gap }) {
      return rows.reduce((areas, line, rowIndex) => {
        if (gap.row)
          rowIndex *= 2;
        if (line.trim() === "")
          return areas;
        getColumns(line).forEach((area, columnIndex) => {
          if (DOTS.test(area))
            return;
          if (gap.column)
            columnIndex *= 2;
          if (typeof areas[area] === "undefined") {
            areas[area] = {
              column: track(columnIndex + 1, columnIndex + 2),
              row: track(rowIndex + 1, rowIndex + 2)
            };
          } else {
            let { column, row } = areas[area];
            column.start = Math.min(column.start, columnIndex + 1);
            column.end = Math.max(column.end, columnIndex + 2);
            column.span = column.end - column.start;
            row.start = Math.min(row.start, rowIndex + 1);
            row.end = Math.max(row.end, rowIndex + 2);
            row.span = row.end - row.start;
          }
        });
        return areas;
      }, {});
    }
    function testTrack(node) {
      return node.type === "word" && /^\[.+]$/.test(node.value);
    }
    function verifyRowSize(result) {
      if (result.areas.length > result.rows.length) {
        result.rows.push("auto");
      }
      return result;
    }
    exports.parseTemplate = parseTemplate;
    function parseTemplate({ decl, gap }) {
      let gridTemplate = parser(decl.value).nodes.reduce(
        (result, node) => {
          let { type, value } = node;
          if (testTrack(node) || type === "space")
            return result;
          if (type === "string") {
            result = verifyRowSize(result);
            result.areas.push(value);
          }
          if (type === "word" || type === "function") {
            result[result.key].push(parser.stringify(node));
          }
          if (type === "div" && value === "/") {
            result.key = "columns";
            result = verifyRowSize(result);
          }
          return result;
        },
        {
          key: "rows",
          columns: [],
          rows: [],
          areas: []
        }
      );
      return {
        areas: parseGridAreas({
          rows: gridTemplate.areas,
          gap
        }),
        columns: prefixTrackValue({
          value: gridTemplate.columns.join(" "),
          gap: gap.column
        }),
        rows: prefixTrackValue({
          value: gridTemplate.rows.join(" "),
          gap: gap.row
        })
      };
    }
    function getMSDecls(area, addRowSpan = false, addColumnSpan = false) {
      let result = [
        {
          prop: "-ms-grid-row",
          value: String(area.row.start)
        }
      ];
      if (area.row.span > 1 || addRowSpan) {
        result.push({
          prop: "-ms-grid-row-span",
          value: String(area.row.span)
        });
      }
      result.push({
        prop: "-ms-grid-column",
        value: String(area.column.start)
      });
      if (area.column.span > 1 || addColumnSpan) {
        result.push({
          prop: "-ms-grid-column-span",
          value: String(area.column.span)
        });
      }
      return result;
    }
    function getParentMedia(parent) {
      if (parent.type === "atrule" && parent.name === "media") {
        return parent;
      }
      if (!parent.parent) {
        return false;
      }
      return getParentMedia(parent.parent);
    }
    function changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {
      ruleSelectors = ruleSelectors.map((selector) => {
        let selectorBySpace = list.space(selector);
        let selectorByComma = list.comma(selector);
        if (selectorBySpace.length > selectorByComma.length) {
          selector = selectorBySpace.slice(-1).join("");
        }
        return selector;
      });
      return ruleSelectors.map((ruleSelector) => {
        let newSelector = templateSelectors.map((tplSelector, index) => {
          let space = index === 0 ? "" : " ";
          return `${space}${tplSelector} > ${ruleSelector}`;
        });
        return newSelector;
      });
    }
    function selectorsEqual(ruleA, ruleB) {
      return ruleA.selectors.some((sel) => {
        return ruleB.selectors.includes(sel);
      });
    }
    function parseGridTemplatesData(css) {
      let parsed = [];
      css.walkDecls(/grid-template(-areas)?$/, (d) => {
        let rule = d.parent;
        let media = getParentMedia(rule);
        let gap = getGridGap(d);
        let inheritedGap = inheritGridGap(d, gap);
        let { areas } = parseTemplate({ decl: d, gap: inheritedGap || gap });
        let areaNames = Object.keys(areas);
        if (areaNames.length === 0) {
          return true;
        }
        let index = parsed.reduce((acc, { allAreas }, idx) => {
          let hasAreas = allAreas && areaNames.some((area) => allAreas.includes(area));
          return hasAreas ? idx : acc;
        }, null);
        if (index !== null) {
          let { allAreas, rules } = parsed[index];
          let hasNoDuplicates = rules.some((r) => {
            return r.hasDuplicates === false && selectorsEqual(r, rule);
          });
          let duplicatesFound = false;
          let duplicateAreaNames = rules.reduce((acc, r) => {
            if (!r.params && selectorsEqual(r, rule)) {
              duplicatesFound = true;
              return r.duplicateAreaNames;
            }
            if (!duplicatesFound) {
              areaNames.forEach((name) => {
                if (r.areas[name]) {
                  acc.push(name);
                }
              });
            }
            return uniq(acc);
          }, []);
          rules.forEach((r) => {
            areaNames.forEach((name) => {
              let area = r.areas[name];
              if (area && area.row.span !== areas[name].row.span) {
                areas[name].row.updateSpan = true;
              }
              if (area && area.column.span !== areas[name].column.span) {
                areas[name].column.updateSpan = true;
              }
            });
          });
          parsed[index].allAreas = uniq([...allAreas, ...areaNames]);
          parsed[index].rules.push({
            hasDuplicates: !hasNoDuplicates,
            params: media.params,
            selectors: rule.selectors,
            node: rule,
            duplicateAreaNames,
            areas
          });
        } else {
          parsed.push({
            allAreas: areaNames,
            areasCount: 0,
            rules: [
              {
                hasDuplicates: false,
                duplicateRules: [],
                params: media.params,
                selectors: rule.selectors,
                node: rule,
                duplicateAreaNames: [],
                areas
              }
            ]
          });
        }
        return void 0;
      });
      return parsed;
    }
    exports.insertAreas = insertAreas;
    function insertAreas(css, isDisabled) {
      let gridTemplatesData = parseGridTemplatesData(css);
      if (gridTemplatesData.length === 0) {
        return void 0;
      }
      let rulesToInsert = {};
      css.walkDecls("grid-area", (gridArea) => {
        let gridAreaRule = gridArea.parent;
        let hasPrefixedRow = gridAreaRule.first.prop === "-ms-grid-row";
        let gridAreaMedia = getParentMedia(gridAreaRule);
        if (isDisabled(gridArea)) {
          return void 0;
        }
        let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);
        let value = gridArea.value;
        let data = gridTemplatesData.filter((d) => d.allAreas.includes(value))[0];
        if (!data) {
          return true;
        }
        let lastArea = data.allAreas[data.allAreas.length - 1];
        let selectorBySpace = list.space(gridAreaRule.selector);
        let selectorByComma = list.comma(gridAreaRule.selector);
        let selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length;
        if (hasPrefixedRow) {
          return false;
        }
        if (!rulesToInsert[lastArea]) {
          rulesToInsert[lastArea] = {};
        }
        let lastRuleIsSet = false;
        for (let rule of data.rules) {
          let area = rule.areas[value];
          let hasDuplicateName = rule.duplicateAreaNames.includes(value);
          if (!area) {
            let lastRule = rulesToInsert[lastArea].lastRule;
            let lastRuleIndex;
            if (lastRule) {
              lastRuleIndex = css.index(lastRule);
            } else {
              lastRuleIndex = -1;
            }
            if (gridAreaRuleIndex > lastRuleIndex) {
              rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
            }
            continue;
          }
          if (rule.params && !rulesToInsert[lastArea][rule.params]) {
            rulesToInsert[lastArea][rule.params] = [];
          }
          if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {
            getMSDecls(area, false, false).reverse().forEach(
              (i) => gridAreaRule.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );
            rulesToInsert[lastArea].lastRule = gridAreaRule;
            lastRuleIsSet = true;
          } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {
            let cloned = gridAreaRule.clone();
            cloned.removeAll();
            getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(
              (i) => cloned.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );
            cloned.selectors = changeDuplicateAreaSelectors(
              cloned.selectors,
              rule.selectors
            );
            if (rulesToInsert[lastArea].lastRule) {
              rulesToInsert[lastArea].lastRule.after(cloned);
            }
            rulesToInsert[lastArea].lastRule = cloned;
            lastRuleIsSet = true;
          } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {
            gridAreaRule.walkDecls(/-ms-grid-(row|column)/, (d) => d.remove());
            getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(
              (i) => gridAreaRule.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );
          } else if (rule.params) {
            let cloned = gridAreaRule.clone();
            cloned.removeAll();
            getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(
              (i) => cloned.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );
            if (rule.hasDuplicates && hasDuplicateName) {
              cloned.selectors = changeDuplicateAreaSelectors(
                cloned.selectors,
                rule.selectors
              );
            }
            cloned.raws = rule.node.raws;
            if (css.index(rule.node.parent) > gridAreaRuleIndex) {
              rule.node.parent.append(cloned);
            } else {
              rulesToInsert[lastArea][rule.params].push(cloned);
            }
            if (!lastRuleIsSet) {
              rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
            }
          }
        }
        return void 0;
      });
      Object.keys(rulesToInsert).forEach((area) => {
        let data = rulesToInsert[area];
        let lastRule = data.lastRule;
        Object.keys(data).reverse().filter((p) => p !== "lastRule").forEach((params) => {
          if (data[params].length > 0 && lastRule) {
            lastRule.after({ name: "media", params });
            lastRule.next().append(data[params]);
          }
        });
      });
      return void 0;
    }
    exports.warnMissedAreas = warnMissedAreas;
    function warnMissedAreas(areas, decl, result) {
      let missed = Object.keys(areas);
      decl.root().walkDecls("grid-area", (gridArea) => {
        missed = missed.filter((e) => e !== gridArea.value);
      });
      if (missed.length > 0) {
        decl.warn(result, "Can not find grid areas: " + missed.join(", "));
      }
      return void 0;
    }
    exports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound;
    function warnTemplateSelectorNotFound(decl, result) {
      let rule = decl.parent;
      let root = decl.root();
      let duplicatesFound = false;
      let slicedSelectorArr = list.space(rule.selector).filter((str) => str !== ">").slice(0, -1);
      if (slicedSelectorArr.length > 0) {
        let gridTemplateFound = false;
        let foundAreaSelector = null;
        root.walkDecls(/grid-template(-areas)?$/, (d) => {
          let parent = d.parent;
          let templateSelectors = parent.selectors;
          let { areas } = parseTemplate({ decl: d, gap: getGridGap(d) });
          let hasArea = areas[decl.value];
          for (let tplSelector of templateSelectors) {
            if (gridTemplateFound) {
              break;
            }
            let tplSelectorArr = list.space(tplSelector).filter((str) => str !== ">");
            gridTemplateFound = tplSelectorArr.every(
              (item, idx) => item === slicedSelectorArr[idx]
            );
          }
          if (gridTemplateFound || !hasArea) {
            return true;
          }
          if (!foundAreaSelector) {
            foundAreaSelector = parent.selector;
          }
          if (foundAreaSelector && foundAreaSelector !== parent.selector) {
            duplicatesFound = true;
          }
          return void 0;
        });
        if (!gridTemplateFound && duplicatesFound) {
          decl.warn(
            result,
            `Autoprefixer cannot find a grid-template containing the duplicate grid-area "${decl.value}" with full selector matching: ${slicedSelectorArr.join(" ")}`
          );
        }
      }
    }
    exports.warnIfGridRowColumnExists = warnIfGridRowColumnExists;
    function warnIfGridRowColumnExists(decl, result) {
      let rule = decl.parent;
      let decls = [];
      rule.walkDecls(/^grid-(row|column)/, (d) => {
        if (!d.prop.endsWith("-end") && !d.value.startsWith("span") && !d.prop.endsWith("-gap")) {
          decls.push(d);
        }
      });
      if (decls.length > 0) {
        decls.forEach((d) => {
          d.warn(
            result,
            `You already have a grid-area declaration present in the rule. You should use either grid-area or ${d.prop}, not both`
          );
        });
      }
      return void 0;
    }
    exports.getGridGap = getGridGap;
    function getGridGap(decl) {
      let gap = {};
      let testGap = /^(grid-)?((row|column)-)?gap$/;
      decl.parent.walkDecls(testGap, ({ prop, value }) => {
        if (/^(grid-)?gap$/.test(prop)) {
          let [row, , column] = parser(value).nodes;
          gap.row = row && parser.stringify(row);
          gap.column = column ? parser.stringify(column) : gap.row;
        }
        if (/^(grid-)?row-gap$/.test(prop))
          gap.row = value;
        if (/^(grid-)?column-gap$/.test(prop))
          gap.column = value;
      });
      return gap;
    }
    function parseMediaParams(params) {
      if (!params) {
        return [];
      }
      let parsed = parser(params);
      let prop;
      let value;
      parsed.walk((node) => {
        if (node.type === "word" && /min|max/g.test(node.value)) {
          prop = node.value;
        } else if (node.value.includes("px")) {
          value = parseInt(node.value.replace(/\D/g, ""));
        }
      });
      return [prop, value];
    }
    function shouldInheritGap(selA, selB) {
      let result;
      let splitSelectorArrA = splitSelector(selA);
      let splitSelectorArrB = splitSelector(selB);
      if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {
        return false;
      } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {
        let idx = splitSelectorArrA[0].reduce((res, [item], index) => {
          let firstSelectorPart = splitSelectorArrB[0][0][0];
          if (item === firstSelectorPart) {
            return index;
          }
          return false;
        }, false);
        if (idx) {
          result = splitSelectorArrB[0].every((arr, index) => {
            return arr.every(
              (part, innerIndex) => splitSelectorArrA[0].slice(idx)[index][innerIndex] === part
            );
          });
        }
      } else {
        result = splitSelectorArrB.some((byCommaArr) => {
          return byCommaArr.every((bySpaceArr, index) => {
            return bySpaceArr.every(
              (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part
            );
          });
        });
      }
      return result;
    }
    exports.inheritGridGap = inheritGridGap;
    function inheritGridGap(decl, gap) {
      let rule = decl.parent;
      let mediaRule = getParentMedia(rule);
      let root = rule.root();
      let splitSelectorArr = splitSelector(rule.selector);
      if (Object.keys(gap).length > 0) {
        return false;
      }
      let [prop] = parseMediaParams(mediaRule.params);
      let lastBySpace = splitSelectorArr[0];
      let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);
      let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`);
      let closestRuleGap;
      root.walkRules(regexp, (r) => {
        let gridGap;
        if (rule.toString() === r.toString()) {
          return false;
        }
        r.walkDecls("grid-gap", (d) => gridGap = getGridGap(d));
        if (!gridGap || Object.keys(gridGap).length === 0) {
          return true;
        }
        if (!shouldInheritGap(rule.selector, r.selector)) {
          return true;
        }
        let media = getParentMedia(r);
        if (media) {
          let propToCompare = parseMediaParams(media.params)[0];
          if (propToCompare === prop) {
            closestRuleGap = gridGap;
            return true;
          }
        } else {
          closestRuleGap = gridGap;
          return true;
        }
        return void 0;
      });
      if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {
        return closestRuleGap;
      }
      return false;
    }
    exports.warnGridGap = warnGridGap;
    function warnGridGap({ gap, hasColumns, decl, result }) {
      let hasBothGaps = gap.row && gap.column;
      if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {
        delete gap.column;
        decl.warn(
          result,
          "Can not implement grid-gap without grid-template-columns"
        );
      }
    }
    function normalizeRowColumn(str) {
      let normalized = parser(str).nodes.reduce((result, node) => {
        if (node.type === "function" && node.value === "repeat") {
          let key = "count";
          let [count, value] = node.nodes.reduce(
            (acc, n) => {
              if (n.type === "word" && key === "count") {
                acc[0] = Math.abs(parseInt(n.value));
                return acc;
              }
              if (n.type === "div" && n.value === ",") {
                key = "value";
                return acc;
              }
              if (key === "value") {
                acc[1] += parser.stringify(n);
              }
              return acc;
            },
            [0, ""]
          );
          if (count) {
            for (let i = 0; i < count; i++) {
              result.push(value);
            }
          }
          return result;
        }
        if (node.type === "space") {
          return result;
        }
        return result.concat(parser.stringify(node));
      }, []);
      return normalized;
    }
    exports.autoplaceGridItems = autoplaceGridItems;
    function autoplaceGridItems(decl, result, gap, autoflowValue = "row") {
      let { parent } = decl;
      let rowDecl = parent.nodes.find((i) => i.prop === "grid-template-rows");
      let rows = normalizeRowColumn(rowDecl.value);
      let columns = normalizeRowColumn(decl.value);
      let filledRows = rows.map((_, rowIndex) => {
        return Array.from(
          { length: columns.length },
          (v, k) => k + rowIndex * columns.length + 1
        ).join(" ");
      });
      let areas = parseGridAreas({ rows: filledRows, gap });
      let keys = Object.keys(areas);
      let items = keys.map((i) => areas[i]);
      if (autoflowValue.includes("column")) {
        items = items.sort((a, b) => a.column.start - b.column.start);
      }
      items.reverse().forEach((item, index) => {
        let { column, row } = item;
        let nodeSelector = parent.selectors.map((sel) => sel + ` > *:nth-child(${keys.length - index})`).join(", ");
        let node = parent.clone().removeAll();
        node.selector = nodeSelector;
        node.append({ prop: "-ms-grid-row", value: row.start });
        node.append({ prop: "-ms-grid-column", value: column.start });
        parent.after(node);
      });
      return void 0;
    }
  }
});

// node_modules/autoprefixer/lib/processor.js
var require_processor = __commonJS({
  "node_modules/autoprefixer/lib/processor.js"(exports, module) {
    var parser = require_lib();
    var Value = require_value();
    var insertAreas = require_grid_utils().insertAreas;
    var OLD_LINEAR = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i;
    var OLD_RADIAL = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i;
    var IGNORE_NEXT = /(!\s*)?autoprefixer:\s*ignore\s+next/i;
    var GRID_REGEX = /(!\s*)?autoprefixer\s*grid:\s*(on|off|(no-)?autoplace)/i;
    var SIZES = [
      "width",
      "height",
      "min-width",
      "max-width",
      "min-height",
      "max-height",
      "inline-size",
      "min-inline-size",
      "max-inline-size",
      "block-size",
      "min-block-size",
      "max-block-size"
    ];
    function hasGridTemplate(decl) {
      return decl.parent.some(
        (i) => i.prop === "grid-template" || i.prop === "grid-template-areas"
      );
    }
    function hasRowsAndColumns(decl) {
      let hasRows = decl.parent.some((i) => i.prop === "grid-template-rows");
      let hasColumns = decl.parent.some((i) => i.prop === "grid-template-columns");
      return hasRows && hasColumns;
    }
    var Processor = class {
      constructor(prefixes) {
        this.prefixes = prefixes;
      }
      add(css, result) {
        let resolution = this.prefixes.add["@resolution"];
        let keyframes = this.prefixes.add["@keyframes"];
        let viewport = this.prefixes.add["@viewport"];
        let supports = this.prefixes.add["@supports"];
        css.walkAtRules((rule) => {
          if (rule.name === "keyframes") {
            if (!this.disabled(rule, result)) {
              return keyframes && keyframes.process(rule);
            }
          } else if (rule.name === "viewport") {
            if (!this.disabled(rule, result)) {
              return viewport && viewport.process(rule);
            }
          } else if (rule.name === "supports") {
            if (this.prefixes.options.supports !== false && !this.disabled(rule, result)) {
              return supports.process(rule);
            }
          } else if (rule.name === "media" && rule.params.includes("-resolution")) {
            if (!this.disabled(rule, result)) {
              return resolution && resolution.process(rule);
            }
          }
          return void 0;
        });
        css.walkRules((rule) => {
          if (this.disabled(rule, result))
            return void 0;
          return this.prefixes.add.selectors.map((selector) => {
            return selector.process(rule, result);
          });
        });
        function insideGrid(decl) {
          return decl.parent.nodes.some((node) => {
            if (node.type !== "decl")
              return false;
            let displayGrid = node.prop === "display" && /(inline-)?grid/.test(node.value);
            let gridTemplate = node.prop.startsWith("grid-template");
            let gridGap = /^grid-([A-z]+-)?gap/.test(node.prop);
            return displayGrid || gridTemplate || gridGap;
          });
        }
        function insideFlex(decl) {
          return decl.parent.some((node) => {
            return node.prop === "display" && /(inline-)?flex/.test(node.value);
          });
        }
        let gridPrefixes = this.gridStatus(css, result) && this.prefixes.add["grid-area"] && this.prefixes.add["grid-area"].prefixes;
        css.walkDecls((decl) => {
          if (this.disabledDecl(decl, result))
            return void 0;
          let parent = decl.parent;
          let prop = decl.prop;
          let value = decl.value;
          if (prop === "color-adjust") {
            if (parent.every((i) => i.prop !== "print-color-adjust")) {
              result.warn(
                "Replace color-adjust to print-color-adjust. The color-adjust shorthand is currently deprecated.",
                { node: decl }
              );
            }
          } else if (prop === "grid-row-span") {
            result.warn(
              "grid-row-span is not part of final Grid Layout. Use grid-row.",
              { node: decl }
            );
            return void 0;
          } else if (prop === "grid-column-span") {
            result.warn(
              "grid-column-span is not part of final Grid Layout. Use grid-column.",
              { node: decl }
            );
            return void 0;
          } else if (prop === "display" && value === "box") {
            result.warn(
              "You should write display: flex by final spec instead of display: box",
              { node: decl }
            );
            return void 0;
          } else if (prop === "text-emphasis-position") {
            if (value === "under" || value === "over") {
              result.warn(
                "You should use 2 values for text-emphasis-position For example, `under left` instead of just `under`.",
                { node: decl }
              );
            }
          } else if (/^(align|justify|place)-(items|content)$/.test(prop) && insideFlex(decl)) {
            if (value === "start" || value === "end") {
              result.warn(
                `${value} value has mixed support, consider using flex-${value} instead`,
                { node: decl }
              );
            }
          } else if (prop === "text-decoration-skip" && value === "ink") {
            result.warn(
              "Replace text-decoration-skip: ink to text-decoration-skip-ink: auto, because spec had been changed",
              { node: decl }
            );
          } else {
            if (gridPrefixes && this.gridStatus(decl, result)) {
              if (decl.value === "subgrid") {
                result.warn("IE does not support subgrid", { node: decl });
              }
              if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {
                let fixed = prop.replace("-items", "-self");
                result.warn(
                  `IE does not support ${prop} on grid containers. Try using ${fixed} on child elements instead: ${decl.parent.selector} > * { ${fixed}: ${decl.value} }`,
                  { node: decl }
                );
              } else if (/^(align|justify|place)-content$/.test(prop) && insideGrid(decl)) {
                result.warn(`IE does not support ${decl.prop} on grid containers`, {
                  node: decl
                });
              } else if (prop === "display" && decl.value === "contents") {
                result.warn(
                  "Please do not use display: contents; if you have grid setting enabled",
                  { node: decl }
                );
                return void 0;
              } else if (decl.prop === "grid-gap") {
                let status = this.gridStatus(decl, result);
                if (status === "autoplace" && !hasRowsAndColumns(decl) && !hasGridTemplate(decl)) {
                  result.warn(
                    "grid-gap only works if grid-template(-areas) is being used or both rows and columns have been declared and cells have not been manually placed inside the explicit grid",
                    { node: decl }
                  );
                } else if ((status === true || status === "no-autoplace") && !hasGridTemplate(decl)) {
                  result.warn(
                    "grid-gap only works if grid-template(-areas) is being used",
                    { node: decl }
                  );
                }
              } else if (prop === "grid-auto-columns") {
                result.warn("grid-auto-columns is not supported by IE", {
                  node: decl
                });
                return void 0;
              } else if (prop === "grid-auto-rows") {
                result.warn("grid-auto-rows is not supported by IE", { node: decl });
                return void 0;
              } else if (prop === "grid-auto-flow") {
                let hasRows = parent.some((i) => i.prop === "grid-template-rows");
                let hasCols = parent.some((i) => i.prop === "grid-template-columns");
                if (hasGridTemplate(decl)) {
                  result.warn("grid-auto-flow is not supported by IE", {
                    node: decl
                  });
                } else if (value.includes("dense")) {
                  result.warn("grid-auto-flow: dense is not supported by IE", {
                    node: decl
                  });
                } else if (!hasRows && !hasCols) {
                  result.warn(
                    "grid-auto-flow works only if grid-template-rows and grid-template-columns are present in the same rule",
                    { node: decl }
                  );
                }
                return void 0;
              } else if (value.includes("auto-fit")) {
                result.warn("auto-fit value is not supported by IE", {
                  node: decl,
                  word: "auto-fit"
                });
                return void 0;
              } else if (value.includes("auto-fill")) {
                result.warn("auto-fill value is not supported by IE", {
                  node: decl,
                  word: "auto-fill"
                });
                return void 0;
              } else if (prop.startsWith("grid-template") && value.includes("[")) {
                result.warn(
                  "Autoprefixer currently does not support line names. Try using grid-template-areas instead.",
                  { node: decl, word: "[" }
                );
              }
            }
            if (value.includes("radial-gradient")) {
              if (OLD_RADIAL.test(decl.value)) {
                result.warn(
                  "Gradient has outdated direction syntax. New syntax is like `closest-side at 0 0` instead of `0 0, closest-side`.",
                  { node: decl }
                );
              } else {
                let ast = parser(value);
                for (let i of ast.nodes) {
                  if (i.type === "function" && i.value === "radial-gradient") {
                    for (let word of i.nodes) {
                      if (word.type === "word") {
                        if (word.value === "cover") {
                          result.warn(
                            "Gradient has outdated direction syntax. Replace `cover` to `farthest-corner`.",
                            { node: decl }
                          );
                        } else if (word.value === "contain") {
                          result.warn(
                            "Gradient has outdated direction syntax. Replace `contain` to `closest-side`.",
                            { node: decl }
                          );
                        }
                      }
                    }
                  }
                }
              }
            }
            if (value.includes("linear-gradient")) {
              if (OLD_LINEAR.test(value)) {
                result.warn(
                  "Gradient has outdated direction syntax. New syntax is like `to left` instead of `right`.",
                  { node: decl }
                );
              }
            }
          }
          if (SIZES.includes(decl.prop)) {
            if (!decl.value.includes("-fill-available")) {
              if (decl.value.includes("fill-available")) {
                result.warn(
                  "Replace fill-available to stretch, because spec had been changed",
                  { node: decl }
                );
              } else if (decl.value.includes("fill")) {
                let ast = parser(value);
                if (ast.nodes.some((i) => i.type === "word" && i.value === "fill")) {
                  result.warn(
                    "Replace fill to stretch, because spec had been changed",
                    { node: decl }
                  );
                }
              }
            }
          }
          let prefixer;
          if (decl.prop === "transition" || decl.prop === "transition-property") {
            return this.prefixes.transition.add(decl, result);
          } else if (decl.prop === "align-self") {
            let display = this.displayType(decl);
            if (display !== "grid" && this.prefixes.options.flexbox !== false) {
              prefixer = this.prefixes.add["align-self"];
              if (prefixer && prefixer.prefixes) {
                prefixer.process(decl);
              }
            }
            if (this.gridStatus(decl, result) !== false) {
              prefixer = this.prefixes.add["grid-row-align"];
              if (prefixer && prefixer.prefixes) {
                return prefixer.process(decl, result);
              }
            }
          } else if (decl.prop === "justify-self") {
            if (this.gridStatus(decl, result) !== false) {
              prefixer = this.prefixes.add["grid-column-align"];
              if (prefixer && prefixer.prefixes) {
                return prefixer.process(decl, result);
              }
            }
          } else if (decl.prop === "place-self") {
            prefixer = this.prefixes.add["place-self"];
            if (prefixer && prefixer.prefixes && this.gridStatus(decl, result) !== false) {
              return prefixer.process(decl, result);
            }
          } else {
            prefixer = this.prefixes.add[decl.prop];
            if (prefixer && prefixer.prefixes) {
              return prefixer.process(decl, result);
            }
          }
          return void 0;
        });
        if (this.gridStatus(css, result)) {
          insertAreas(css, this.disabled);
        }
        return css.walkDecls((decl) => {
          if (this.disabledValue(decl, result))
            return;
          let unprefixed = this.prefixes.unprefixed(decl.prop);
          let list = this.prefixes.values("add", unprefixed);
          if (Array.isArray(list)) {
            for (let value of list) {
              if (value.process)
                value.process(decl, result);
            }
          }
          Value.save(this.prefixes, decl);
        });
      }
      remove(css, result) {
        let resolution = this.prefixes.remove["@resolution"];
        css.walkAtRules((rule, i) => {
          if (this.prefixes.remove[`@${rule.name}`]) {
            if (!this.disabled(rule, result)) {
              rule.parent.removeChild(i);
            }
          } else if (rule.name === "media" && rule.params.includes("-resolution") && resolution) {
            resolution.clean(rule);
          }
        });
        for (let checker of this.prefixes.remove.selectors) {
          css.walkRules((rule, i) => {
            if (checker.check(rule)) {
              if (!this.disabled(rule, result)) {
                rule.parent.removeChild(i);
              }
            }
          });
        }
        return css.walkDecls((decl, i) => {
          if (this.disabled(decl, result))
            return;
          let rule = decl.parent;
          let unprefixed = this.prefixes.unprefixed(decl.prop);
          if (decl.prop === "transition" || decl.prop === "transition-property") {
            this.prefixes.transition.remove(decl);
          }
          if (this.prefixes.remove[decl.prop] && this.prefixes.remove[decl.prop].remove) {
            let notHack = this.prefixes.group(decl).down((other) => {
              return this.prefixes.normalize(other.prop) === unprefixed;
            });
            if (unprefixed === "flex-flow") {
              notHack = true;
            }
            if (decl.prop === "-webkit-box-orient") {
              let hacks = { "flex-direction": true, "flex-flow": true };
              if (!decl.parent.some((j) => hacks[j.prop]))
                return;
            }
            if (notHack && !this.withHackValue(decl)) {
              if (decl.raw("before").includes("\n")) {
                this.reduceSpaces(decl);
              }
              rule.removeChild(i);
              return;
            }
          }
          for (let checker of this.prefixes.values("remove", unprefixed)) {
            if (!checker.check)
              continue;
            if (!checker.check(decl.value))
              continue;
            unprefixed = checker.unprefixed;
            let notHack = this.prefixes.group(decl).down((other) => {
              return other.value.includes(unprefixed);
            });
            if (notHack) {
              rule.removeChild(i);
              return;
            }
          }
        });
      }
      withHackValue(decl) {
        return decl.prop === "-webkit-background-clip" && decl.value === "text";
      }
      disabledValue(node, result) {
        if (this.gridStatus(node, result) === false && node.type === "decl") {
          if (node.prop === "display" && node.value.includes("grid")) {
            return true;
          }
        }
        if (this.prefixes.options.flexbox === false && node.type === "decl") {
          if (node.prop === "display" && node.value.includes("flex")) {
            return true;
          }
        }
        if (node.type === "decl" && node.prop === "content") {
          return true;
        }
        return this.disabled(node, result);
      }
      disabledDecl(node, result) {
        if (this.gridStatus(node, result) === false && node.type === "decl") {
          if (node.prop.includes("grid") || node.prop === "justify-items") {
            return true;
          }
        }
        if (this.prefixes.options.flexbox === false && node.type === "decl") {
          let other = ["order", "justify-content", "align-items", "align-content"];
          if (node.prop.includes("flex") || other.includes(node.prop)) {
            return true;
          }
        }
        return this.disabled(node, result);
      }
      disabled(node, result) {
        if (!node)
          return false;
        if (node._autoprefixerDisabled !== void 0) {
          return node._autoprefixerDisabled;
        }
        if (node.parent) {
          let p = node.prev();
          if (p && p.type === "comment" && IGNORE_NEXT.test(p.text)) {
            node._autoprefixerDisabled = true;
            node._autoprefixerSelfDisabled = true;
            return true;
          }
        }
        let value = null;
        if (node.nodes) {
          let status;
          node.each((i) => {
            if (i.type !== "comment")
              return;
            if (/(!\s*)?autoprefixer:\s*(off|on)/i.test(i.text)) {
              if (typeof status !== "undefined") {
                result.warn(
                  "Second Autoprefixer control comment was ignored. Autoprefixer applies control comment to whole block, not to next rules.",
                  { node: i }
                );
              } else {
                status = /on/i.test(i.text);
              }
            }
          });
          if (status !== void 0) {
            value = !status;
          }
        }
        if (!node.nodes || value === null) {
          if (node.parent) {
            let isParentDisabled = this.disabled(node.parent, result);
            if (node.parent._autoprefixerSelfDisabled === true) {
              value = false;
            } else {
              value = isParentDisabled;
            }
          } else {
            value = false;
          }
        }
        node._autoprefixerDisabled = value;
        return value;
      }
      reduceSpaces(decl) {
        let stop = false;
        this.prefixes.group(decl).up(() => {
          stop = true;
          return true;
        });
        if (stop) {
          return;
        }
        let parts = decl.raw("before").split("\n");
        let prevMin = parts[parts.length - 1].length;
        let diff = false;
        this.prefixes.group(decl).down((other) => {
          parts = other.raw("before").split("\n");
          let last = parts.length - 1;
          if (parts[last].length > prevMin) {
            if (diff === false) {
              diff = parts[last].length - prevMin;
            }
            parts[last] = parts[last].slice(0, -diff);
            other.raws.before = parts.join("\n");
          }
        });
      }
      displayType(decl) {
        for (let i of decl.parent.nodes) {
          if (i.prop !== "display") {
            continue;
          }
          if (i.value.includes("flex")) {
            return "flex";
          }
          if (i.value.includes("grid")) {
            return "grid";
          }
        }
        return false;
      }
      gridStatus(node, result) {
        if (!node)
          return false;
        if (node._autoprefixerGridStatus !== void 0) {
          return node._autoprefixerGridStatus;
        }
        let value = null;
        if (node.nodes) {
          let status;
          node.each((i) => {
            if (i.type !== "comment")
              return;
            if (GRID_REGEX.test(i.text)) {
              let hasAutoplace = /:\s*autoplace/i.test(i.text);
              let noAutoplace = /no-autoplace/i.test(i.text);
              if (typeof status !== "undefined") {
                result.warn(
                  "Second Autoprefixer grid control comment was ignored. Autoprefixer applies control comments to the whole block, not to the next rules.",
                  { node: i }
                );
              } else if (hasAutoplace) {
                status = "autoplace";
              } else if (noAutoplace) {
                status = true;
              } else {
                status = /on/i.test(i.text);
              }
            }
          });
          if (status !== void 0) {
            value = status;
          }
        }
        if (node.type === "atrule" && node.name === "supports") {
          let params = node.params;
          if (params.includes("grid") && params.includes("auto")) {
            value = false;
          }
        }
        if (!node.nodes || value === null) {
          if (node.parent) {
            let isParentGrid = this.gridStatus(node.parent, result);
            if (node.parent._autoprefixerSelfDisabled === true) {
              value = false;
            } else {
              value = isParentGrid;
            }
          } else if (typeof this.prefixes.options.grid !== "undefined") {
            value = this.prefixes.options.grid;
          } else if (typeof process.env.AUTOPREFIXER_GRID !== "undefined") {
            if (process.env.AUTOPREFIXER_GRID === "autoplace") {
              value = "autoplace";
            } else {
              value = true;
            }
          } else {
            value = false;
          }
        }
        node._autoprefixerGridStatus = value;
        return value;
      }
    };
    module.exports = Processor;
  }
});

// node_modules/caniuse-lite/data/features/css-featurequeries.js
var require_css_featurequeries = __commonJS({
  "node_modules/caniuse-lite/data/features/css-featurequeries.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 KC zB J K E F G A B C L M H N D O k l LC MC" }, D: { "1": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 J K E F G A B C L M H N D O k l" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E F NC 5B OC PC QC" }, F: { "1": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G B C VC WC XC YC vB HC ZC" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC" }, H: { "1": "uC" }, I: { "1": "I zC 0C", "2": "zB J vC wC xC yC IC" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS Feature Queries" };
  }
});

// node_modules/caniuse-lite/dist/lib/statuses.js
var require_statuses = __commonJS({
  "node_modules/caniuse-lite/dist/lib/statuses.js"(exports, module) {
    module.exports = {
      1: "ls",
      2: "rec",
      3: "pr",
      4: "cr",
      5: "wd",
      6: "other",
      7: "unoff"
    };
  }
});

// node_modules/caniuse-lite/dist/lib/supported.js
var require_supported = __commonJS({
  "node_modules/caniuse-lite/dist/lib/supported.js"(exports, module) {
    module.exports = {
      y: 1 << 0,
      n: 1 << 1,
      a: 1 << 2,
      p: 1 << 3,
      u: 1 << 4,
      x: 1 << 5,
      d: 1 << 6
    };
  }
});

// node_modules/caniuse-lite/dist/unpacker/feature.js
var require_feature = __commonJS({
  "node_modules/caniuse-lite/dist/unpacker/feature.js"(exports, module) {
    "use strict";
    var statuses = require_statuses();
    var supported = require_supported();
    var browsers = require_browsers2().browsers;
    var versions = require_browserVersions2().browserVersions;
    var MATH2LOG = Math.log(2);
    function unpackSupport(cipher) {
      let stats = Object.keys(supported).reduce((list, support) => {
        if (cipher & supported[support])
          list.push(support);
        return list;
      }, []);
      let notes = cipher >> 7;
      let notesArray = [];
      while (notes) {
        let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
        notesArray.unshift(`#${note}`);
        notes -= Math.pow(2, note - 1);
      }
      return stats.concat(notesArray).join(" ");
    }
    function unpackFeature(packed) {
      let unpacked = { status: statuses[packed.B], title: packed.C };
      unpacked.stats = Object.keys(packed.A).reduce((browserStats, key) => {
        let browser = packed.A[key];
        browserStats[browsers[key]] = Object.keys(browser).reduce(
          (stats, support) => {
            let packedVersions = browser[support].split(" ");
            let unpacked2 = unpackSupport(support);
            packedVersions.forEach((v) => stats[versions[v]] = unpacked2);
            return stats;
          },
          {}
        );
        return browserStats;
      }, {});
      return unpacked;
    }
    module.exports = unpackFeature;
    module.exports.default = unpackFeature;
  }
});

// node_modules/autoprefixer/lib/brackets.js
var require_brackets = __commonJS({
  "node_modules/autoprefixer/lib/brackets.js"(exports, module) {
    function last(array) {
      return array[array.length - 1];
    }
    var brackets = {
      parse(str) {
        let current = [""];
        let stack = [current];
        for (let sym of str) {
          if (sym === "(") {
            current = [""];
            last(stack).push(current);
            stack.push(current);
            continue;
          }
          if (sym === ")") {
            stack.pop();
            current = last(stack);
            current.push("");
            continue;
          }
          current[current.length - 1] += sym;
        }
        return stack[0];
      },
      stringify(ast) {
        let result = "";
        for (let i of ast) {
          if (typeof i === "object") {
            result += `(${brackets.stringify(i)})`;
            continue;
          }
          result += i;
        }
        return result;
      }
    };
    module.exports = brackets;
  }
});

// node_modules/autoprefixer/lib/supports.js
var require_supports = __commonJS({
  "node_modules/autoprefixer/lib/supports.js"(exports, module) {
    var featureQueries = require_css_featurequeries();
    var feature = require_feature();
    var { parse } = require_postcss();
    var Browsers = require_browsers3();
    var brackets = require_brackets();
    var Value = require_value();
    var utils = require_utils();
    var data = feature(featureQueries);
    var supported = [];
    for (let browser in data.stats) {
      let versions = data.stats[browser];
      for (let version in versions) {
        let support = versions[version];
        if (/y/.test(support)) {
          supported.push(browser + " " + version);
        }
      }
    }
    var Supports = class {
      constructor(Prefixes, all) {
        this.Prefixes = Prefixes;
        this.all = all;
      }
      prefixer() {
        if (this.prefixerCache) {
          return this.prefixerCache;
        }
        let filtered = this.all.browsers.selected.filter((i) => {
          return supported.includes(i);
        });
        let browsers = new Browsers(
          this.all.browsers.data,
          filtered,
          this.all.options
        );
        this.prefixerCache = new this.Prefixes(
          this.all.data,
          browsers,
          this.all.options
        );
        return this.prefixerCache;
      }
      parse(str) {
        let parts = str.split(":");
        let prop = parts[0];
        let value = parts[1];
        if (!value)
          value = "";
        return [prop.trim(), value.trim()];
      }
      virtual(str) {
        let [prop, value] = this.parse(str);
        let rule = parse("a{}").first;
        rule.append({ prop, value, raws: { before: "" } });
        return rule;
      }
      prefixed(str) {
        let rule = this.virtual(str);
        if (this.disabled(rule.first)) {
          return rule.nodes;
        }
        let result = { warn: () => null };
        let prefixer = this.prefixer().add[rule.first.prop];
        prefixer && prefixer.process && prefixer.process(rule.first, result);
        for (let decl of rule.nodes) {
          for (let value of this.prefixer().values("add", rule.first.prop)) {
            value.process(decl);
          }
          Value.save(this.all, decl);
        }
        return rule.nodes;
      }
      isNot(node) {
        return typeof node === "string" && /not\s*/i.test(node);
      }
      isOr(node) {
        return typeof node === "string" && /\s*or\s*/i.test(node);
      }
      isProp(node) {
        return typeof node === "object" && node.length === 1 && typeof node[0] === "string";
      }
      isHack(all, unprefixed) {
        let check = new RegExp(`(\\(|\\s)${utils.escapeRegexp(unprefixed)}:`);
        return !check.test(all);
      }
      toRemove(str, all) {
        let [prop, value] = this.parse(str);
        let unprefixed = this.all.unprefixed(prop);
        let cleaner = this.all.cleaner();
        if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) {
          return true;
        }
        for (let checker of cleaner.values("remove", unprefixed)) {
          if (checker.check(value)) {
            return true;
          }
        }
        return false;
      }
      remove(nodes, all) {
        let i = 0;
        while (i < nodes.length) {
          if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {
            if (this.toRemove(nodes[i][0], all)) {
              nodes.splice(i, 2);
              continue;
            }
            i += 2;
            continue;
          }
          if (typeof nodes[i] === "object") {
            nodes[i] = this.remove(nodes[i], all);
          }
          i += 1;
        }
        return nodes;
      }
      cleanBrackets(nodes) {
        return nodes.map((i) => {
          if (typeof i !== "object") {
            return i;
          }
          if (i.length === 1 && typeof i[0] === "object") {
            return this.cleanBrackets(i[0]);
          }
          return this.cleanBrackets(i);
        });
      }
      convert(progress) {
        let result = [""];
        for (let i of progress) {
          result.push([`${i.prop}: ${i.value}`]);
          result.push(" or ");
        }
        result[result.length - 1] = "";
        return result;
      }
      normalize(nodes) {
        if (typeof nodes !== "object") {
          return nodes;
        }
        nodes = nodes.filter((i) => i !== "");
        if (typeof nodes[0] === "string") {
          let firstNode = nodes[0].trim();
          if (firstNode.includes(":") || firstNode === "selector" || firstNode === "not selector") {
            return [brackets.stringify(nodes)];
          }
        }
        return nodes.map((i) => this.normalize(i));
      }
      add(nodes, all) {
        return nodes.map((i) => {
          if (this.isProp(i)) {
            let prefixed = this.prefixed(i[0]);
            if (prefixed.length > 1) {
              return this.convert(prefixed);
            }
            return i;
          }
          if (typeof i === "object") {
            return this.add(i, all);
          }
          return i;
        });
      }
      process(rule) {
        let ast = brackets.parse(rule.params);
        ast = this.normalize(ast);
        ast = this.remove(ast, rule.params);
        ast = this.add(ast, rule.params);
        ast = this.cleanBrackets(ast);
        rule.params = brackets.stringify(ast);
      }
      disabled(node) {
        if (!this.all.options.grid) {
          if (node.prop === "display" && node.value.includes("grid")) {
            return true;
          }
          if (node.prop.includes("grid") || node.prop === "justify-items") {
            return true;
          }
        }
        if (this.all.options.flexbox === false) {
          if (node.prop === "display" && node.value.includes("flex")) {
            return true;
          }
          let other = ["order", "justify-content", "align-items", "align-content"];
          if (node.prop.includes("flex") || other.includes(node.prop)) {
            return true;
          }
        }
        return false;
      }
    };
    module.exports = Supports;
  }
});

// node_modules/autoprefixer/lib/old-selector.js
var require_old_selector = __commonJS({
  "node_modules/autoprefixer/lib/old-selector.js"(exports, module) {
    var OldSelector = class {
      constructor(selector, prefix) {
        this.prefix = prefix;
        this.prefixed = selector.prefixed(this.prefix);
        this.regexp = selector.regexp(this.prefix);
        this.prefixeds = selector.possible().map((x) => [selector.prefixed(x), selector.regexp(x)]);
        this.unprefixed = selector.name;
        this.nameRegexp = selector.regexp();
      }
      isHack(rule) {
        let index = rule.parent.index(rule) + 1;
        let rules = rule.parent.nodes;
        while (index < rules.length) {
          let before = rules[index].selector;
          if (!before) {
            return true;
          }
          if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {
            return false;
          }
          let some = false;
          for (let [string, regexp] of this.prefixeds) {
            if (before.includes(string) && before.match(regexp)) {
              some = true;
              break;
            }
          }
          if (!some) {
            return true;
          }
          index += 1;
        }
        return true;
      }
      check(rule) {
        if (!rule.selector.includes(this.prefixed)) {
          return false;
        }
        if (!rule.selector.match(this.regexp)) {
          return false;
        }
        if (this.isHack(rule)) {
          return false;
        }
        return true;
      }
    };
    module.exports = OldSelector;
  }
});

// node_modules/autoprefixer/lib/selector.js
var require_selector = __commonJS({
  "node_modules/autoprefixer/lib/selector.js"(exports, module) {
    var { list } = require_postcss();
    var OldSelector = require_old_selector();
    var Prefixer = require_prefixer();
    var Browsers = require_browsers3();
    var utils = require_utils();
    var Selector = class extends Prefixer {
      constructor(name, prefixes, all) {
        super(name, prefixes, all);
        this.regexpCache = /* @__PURE__ */ new Map();
      }
      check(rule) {
        if (rule.selector.includes(this.name)) {
          return !!rule.selector.match(this.regexp());
        }
        return false;
      }
      prefixed(prefix) {
        return this.name.replace(/^(\W*)/, `$1${prefix}`);
      }
      regexp(prefix) {
        if (!this.regexpCache.has(prefix)) {
          let name = prefix ? this.prefixed(prefix) : this.name;
          this.regexpCache.set(
            prefix,
            new RegExp(`(^|[^:"'=])${utils.escapeRegexp(name)}`, "gi")
          );
        }
        return this.regexpCache.get(prefix);
      }
      possible() {
        return Browsers.prefixes();
      }
      prefixeds(rule) {
        if (rule._autoprefixerPrefixeds) {
          if (rule._autoprefixerPrefixeds[this.name]) {
            return rule._autoprefixerPrefixeds;
          }
        } else {
          rule._autoprefixerPrefixeds = {};
        }
        let prefixeds = {};
        if (rule.selector.includes(",")) {
          let ruleParts = list.comma(rule.selector);
          let toProcess = ruleParts.filter((el) => el.includes(this.name));
          for (let prefix of this.possible()) {
            prefixeds[prefix] = toProcess.map((el) => this.replace(el, prefix)).join(", ");
          }
        } else {
          for (let prefix of this.possible()) {
            prefixeds[prefix] = this.replace(rule.selector, prefix);
          }
        }
        rule._autoprefixerPrefixeds[this.name] = prefixeds;
        return rule._autoprefixerPrefixeds;
      }
      already(rule, prefixeds, prefix) {
        let index = rule.parent.index(rule) - 1;
        while (index >= 0) {
          let before = rule.parent.nodes[index];
          if (before.type !== "rule") {
            return false;
          }
          let some = false;
          for (let key in prefixeds[this.name]) {
            let prefixed = prefixeds[this.name][key];
            if (before.selector === prefixed) {
              if (prefix === key) {
                return true;
              } else {
                some = true;
                break;
              }
            }
          }
          if (!some) {
            return false;
          }
          index -= 1;
        }
        return false;
      }
      replace(selector, prefix) {
        return selector.replace(this.regexp(), `$1${this.prefixed(prefix)}`);
      }
      add(rule, prefix) {
        let prefixeds = this.prefixeds(rule);
        if (this.already(rule, prefixeds, prefix)) {
          return;
        }
        let cloned = this.clone(rule, { selector: prefixeds[this.name][prefix] });
        rule.parent.insertBefore(rule, cloned);
      }
      old(prefix) {
        return new OldSelector(this, prefix);
      }
    };
    module.exports = Selector;
  }
});

// node_modules/autoprefixer/lib/at-rule.js
var require_at_rule = __commonJS({
  "node_modules/autoprefixer/lib/at-rule.js"(exports, module) {
    var Prefixer = require_prefixer();
    var AtRule = class extends Prefixer {
      add(rule, prefix) {
        let prefixed = prefix + rule.name;
        let already = rule.parent.some(
          (i) => i.name === prefixed && i.params === rule.params
        );
        if (already) {
          return void 0;
        }
        let cloned = this.clone(rule, { name: prefixed });
        return rule.parent.insertBefore(rule, cloned);
      }
      process(node) {
        let parent = this.parentPrefix(node);
        for (let prefix of this.prefixes) {
          if (!parent || parent === prefix) {
            this.add(node, prefix);
          }
        }
      }
    };
    module.exports = AtRule;
  }
});

// node_modules/autoprefixer/lib/hacks/fullscreen.js
var require_fullscreen = __commonJS({
  "node_modules/autoprefixer/lib/hacks/fullscreen.js"(exports, module) {
    var Selector = require_selector();
    var Fullscreen = class extends Selector {
      prefixed(prefix) {
        if (prefix === "-webkit-") {
          return ":-webkit-full-screen";
        }
        if (prefix === "-moz-") {
          return ":-moz-full-screen";
        }
        return `:${prefix}fullscreen`;
      }
    };
    Fullscreen.names = [":fullscreen"];
    module.exports = Fullscreen;
  }
});

// node_modules/autoprefixer/lib/hacks/placeholder.js
var require_placeholder = __commonJS({
  "node_modules/autoprefixer/lib/hacks/placeholder.js"(exports, module) {
    var Selector = require_selector();
    var Placeholder = class extends Selector {
      possible() {
        return super.possible().concat(["-moz- old", "-ms- old"]);
      }
      prefixed(prefix) {
        if (prefix === "-webkit-") {
          return "::-webkit-input-placeholder";
        }
        if (prefix === "-ms-") {
          return "::-ms-input-placeholder";
        }
        if (prefix === "-ms- old") {
          return ":-ms-input-placeholder";
        }
        if (prefix === "-moz- old") {
          return ":-moz-placeholder";
        }
        return `::${prefix}placeholder`;
      }
    };
    Placeholder.names = ["::placeholder"];
    module.exports = Placeholder;
  }
});

// node_modules/autoprefixer/lib/hacks/placeholder-shown.js
var require_placeholder_shown = __commonJS({
  "node_modules/autoprefixer/lib/hacks/placeholder-shown.js"(exports, module) {
    var Selector = require_selector();
    var PlaceholderShown = class extends Selector {
      prefixed(prefix) {
        if (prefix === "-ms-") {
          return ":-ms-input-placeholder";
        }
        return `:${prefix}placeholder-shown`;
      }
    };
    PlaceholderShown.names = [":placeholder-shown"];
    module.exports = PlaceholderShown;
  }
});

// node_modules/autoprefixer/lib/hacks/file-selector-button.js
var require_file_selector_button = __commonJS({
  "node_modules/autoprefixer/lib/hacks/file-selector-button.js"(exports, module) {
    var Selector = require_selector();
    var utils = require_utils();
    var FileSelectorButton = class extends Selector {
      constructor(name, prefixes, all) {
        super(name, prefixes, all);
        if (this.prefixes) {
          this.prefixes = utils.uniq(this.prefixes.map(() => "-webkit-"));
        }
      }
      prefixed(prefix) {
        if (prefix === "-webkit-") {
          return "::-webkit-file-upload-button";
        }
        return `::${prefix}file-selector-button`;
      }
    };
    FileSelectorButton.names = ["::file-selector-button"];
    module.exports = FileSelectorButton;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-spec.js
var require_flex_spec = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-spec.js"(exports, module) {
    module.exports = function(prefix) {
      let spec;
      if (prefix === "-webkit- 2009" || prefix === "-moz-") {
        spec = 2009;
      } else if (prefix === "-ms-") {
        spec = 2012;
      } else if (prefix === "-webkit-") {
        spec = "final";
      }
      if (prefix === "-webkit- 2009") {
        prefix = "-webkit-";
      }
      return [spec, prefix];
    };
  }
});

// node_modules/autoprefixer/lib/hacks/flex.js
var require_flex = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex.js"(exports, module) {
    var list = require_postcss().list;
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var Flex = class extends Declaration {
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          return prefix + "box-flex";
        }
        return super.prefixed(prop, prefix);
      }
      normalize() {
        return "flex";
      }
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009) {
          decl.value = list.space(decl.value)[0];
          decl.value = Flex.oldValues[decl.value] || decl.value;
          return super.set(decl, prefix);
        }
        if (spec === 2012) {
          let components = list.space(decl.value);
          if (components.length === 3 && components[2] === "0") {
            decl.value = components.slice(0, 2).concat("0px").join(" ");
          }
        }
        return super.set(decl, prefix);
      }
    };
    Flex.names = ["flex", "box-flex"];
    Flex.oldValues = {
      auto: "1",
      none: "0"
    };
    module.exports = Flex;
  }
});

// node_modules/autoprefixer/lib/hacks/order.js
var require_order = __commonJS({
  "node_modules/autoprefixer/lib/hacks/order.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var Order = class extends Declaration {
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          return prefix + "box-ordinal-group";
        }
        if (spec === 2012) {
          return prefix + "flex-order";
        }
        return super.prefixed(prop, prefix);
      }
      normalize() {
        return "order";
      }
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009 && /\d/.test(decl.value)) {
          decl.value = (parseInt(decl.value) + 1).toString();
          return super.set(decl, prefix);
        }
        return super.set(decl, prefix);
      }
    };
    Order.names = ["order", "flex-order", "box-ordinal-group"];
    module.exports = Order;
  }
});

// node_modules/autoprefixer/lib/hacks/filter.js
var require_filter = __commonJS({
  "node_modules/autoprefixer/lib/hacks/filter.js"(exports, module) {
    var Declaration = require_declaration();
    var Filter = class extends Declaration {
      check(decl) {
        let v = decl.value;
        return !v.toLowerCase().includes("alpha(") && !v.includes("DXImageTransform.Microsoft") && !v.includes("data:image/svg+xml");
      }
    };
    Filter.names = ["filter"];
    module.exports = Filter;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-end.js
var require_grid_end = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-end.js"(exports, module) {
    var Declaration = require_declaration();
    var { isPureNumber } = require_utils();
    var GridEnd = class extends Declaration {
      insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        let clonedDecl = this.clone(decl);
        let startProp = decl.prop.replace(/end$/, "start");
        let spanProp = prefix + decl.prop.replace(/end$/, "span");
        if (decl.parent.some((i) => i.prop === spanProp)) {
          return void 0;
        }
        clonedDecl.prop = spanProp;
        if (decl.value.includes("span")) {
          clonedDecl.value = decl.value.replace(/span\s/i, "");
        } else {
          let startDecl;
          decl.parent.walkDecls(startProp, (d) => {
            startDecl = d;
          });
          if (startDecl) {
            if (isPureNumber(startDecl.value)) {
              let value = Number(decl.value) - Number(startDecl.value) + "";
              clonedDecl.value = value;
            } else {
              return void 0;
            }
          } else {
            decl.warn(
              result,
              `Can not prefix ${decl.prop} (${startProp} is not found)`
            );
          }
        }
        decl.cloneBefore(clonedDecl);
        return void 0;
      }
    };
    GridEnd.names = ["grid-row-end", "grid-column-end"];
    module.exports = GridEnd;
  }
});

// node_modules/autoprefixer/lib/hacks/animation.js
var require_animation = __commonJS({
  "node_modules/autoprefixer/lib/hacks/animation.js"(exports, module) {
    var Declaration = require_declaration();
    var Animation = class extends Declaration {
      check(decl) {
        return !decl.value.split(/\s+/).some((i) => {
          let lower = i.toLowerCase();
          return lower === "reverse" || lower === "alternate-reverse";
        });
      }
    };
    Animation.names = ["animation", "animation-direction"];
    module.exports = Animation;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-flow.js
var require_flex_flow = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-flow.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var FlexFlow = class extends Declaration {
      insert(decl, prefix, prefixes) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec !== 2009) {
          return super.insert(decl, prefix, prefixes);
        }
        let values = decl.value.split(/\s+/).filter((i) => i !== "wrap" && i !== "nowrap" && "wrap-reverse");
        if (values.length === 0) {
          return void 0;
        }
        let already = decl.parent.some(
          (i) => i.prop === prefix + "box-orient" || i.prop === prefix + "box-direction"
        );
        if (already) {
          return void 0;
        }
        let value = values[0];
        let orient = value.includes("row") ? "horizontal" : "vertical";
        let dir = value.includes("reverse") ? "reverse" : "normal";
        let cloned = this.clone(decl);
        cloned.prop = prefix + "box-orient";
        cloned.value = orient;
        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        decl.parent.insertBefore(decl, cloned);
        cloned = this.clone(decl);
        cloned.prop = prefix + "box-direction";
        cloned.value = dir;
        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, cloned);
      }
    };
    FlexFlow.names = ["flex-flow", "box-direction", "box-orient"];
    module.exports = FlexFlow;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-grow.js
var require_flex_grow = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-grow.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var Flex = class extends Declaration {
      normalize() {
        return "flex";
      }
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          return prefix + "box-flex";
        }
        if (spec === 2012) {
          return prefix + "flex-positive";
        }
        return super.prefixed(prop, prefix);
      }
    };
    Flex.names = ["flex-grow", "flex-positive"];
    module.exports = Flex;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-wrap.js
var require_flex_wrap = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-wrap.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var FlexWrap = class extends Declaration {
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec !== 2009) {
          return super.set(decl, prefix);
        }
        return void 0;
      }
    };
    FlexWrap.names = ["flex-wrap"];
    module.exports = FlexWrap;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-area.js
var require_grid_area = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-area.js"(exports, module) {
    var Declaration = require_declaration();
    var utils = require_grid_utils();
    var GridArea = class extends Declaration {
      insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        let values = utils.parse(decl);
        let [rowStart, rowSpan] = utils.translate(values, 0, 2);
        let [columnStart, columnSpan] = utils.translate(values, 1, 3);
        [
          ["grid-row", rowStart],
          ["grid-row-span", rowSpan],
          ["grid-column", columnStart],
          ["grid-column-span", columnSpan]
        ].forEach(([prop, value]) => {
          utils.insertDecl(decl, prop, value);
        });
        utils.warnTemplateSelectorNotFound(decl, result);
        utils.warnIfGridRowColumnExists(decl, result);
        return void 0;
      }
    };
    GridArea.names = ["grid-area"];
    module.exports = GridArea;
  }
});

// node_modules/autoprefixer/lib/hacks/place-self.js
var require_place_self = __commonJS({
  "node_modules/autoprefixer/lib/hacks/place-self.js"(exports, module) {
    var Declaration = require_declaration();
    var utils = require_grid_utils();
    var PlaceSelf = class extends Declaration {
      insert(decl, prefix, prefixes) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        if (decl.parent.some((i) => i.prop === "-ms-grid-row-align")) {
          return void 0;
        }
        let [[first, second]] = utils.parse(decl);
        if (second) {
          utils.insertDecl(decl, "grid-row-align", first);
          utils.insertDecl(decl, "grid-column-align", second);
        } else {
          utils.insertDecl(decl, "grid-row-align", first);
          utils.insertDecl(decl, "grid-column-align", first);
        }
        return void 0;
      }
    };
    PlaceSelf.names = ["place-self"];
    module.exports = PlaceSelf;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-start.js
var require_grid_start = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-start.js"(exports, module) {
    var Declaration = require_declaration();
    var GridStart = class extends Declaration {
      check(decl) {
        let value = decl.value;
        return !value.includes("/") && !value.includes("span");
      }
      normalize(prop) {
        return prop.replace("-start", "");
      }
      prefixed(prop, prefix) {
        let result = super.prefixed(prop, prefix);
        if (prefix === "-ms-") {
          result = result.replace("-start", "");
        }
        return result;
      }
    };
    GridStart.names = ["grid-row-start", "grid-column-start"];
    module.exports = GridStart;
  }
});

// node_modules/autoprefixer/lib/hacks/align-self.js
var require_align_self = __commonJS({
  "node_modules/autoprefixer/lib/hacks/align-self.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var AlignSelf = class extends Declaration {
      check(decl) {
        return decl.parent && !decl.parent.some((i) => {
          return i.prop && i.prop.startsWith("grid-");
        });
      }
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) {
          return prefix + "flex-item-align";
        }
        return super.prefixed(prop, prefix);
      }
      normalize() {
        return "align-self";
      }
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2012) {
          decl.value = AlignSelf.oldValues[decl.value] || decl.value;
          return super.set(decl, prefix);
        }
        if (spec === "final") {
          return super.set(decl, prefix);
        }
        return void 0;
      }
    };
    AlignSelf.names = ["align-self", "flex-item-align"];
    AlignSelf.oldValues = {
      "flex-end": "end",
      "flex-start": "start"
    };
    module.exports = AlignSelf;
  }
});

// node_modules/autoprefixer/lib/hacks/appearance.js
var require_appearance = __commonJS({
  "node_modules/autoprefixer/lib/hacks/appearance.js"(exports, module) {
    var Declaration = require_declaration();
    var utils = require_utils();
    var Appearance = class extends Declaration {
      constructor(name, prefixes, all) {
        super(name, prefixes, all);
        if (this.prefixes) {
          this.prefixes = utils.uniq(
            this.prefixes.map((i) => {
              if (i === "-ms-") {
                return "-webkit-";
              }
              return i;
            })
          );
        }
      }
    };
    Appearance.names = ["appearance"];
    module.exports = Appearance;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-basis.js
var require_flex_basis = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-basis.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var FlexBasis = class extends Declaration {
      normalize() {
        return "flex-basis";
      }
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) {
          return prefix + "flex-preferred-size";
        }
        return super.prefixed(prop, prefix);
      }
      set(decl, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012 || spec === "final") {
          return super.set(decl, prefix);
        }
        return void 0;
      }
    };
    FlexBasis.names = ["flex-basis", "flex-preferred-size"];
    module.exports = FlexBasis;
  }
});

// node_modules/autoprefixer/lib/hacks/mask-border.js
var require_mask_border = __commonJS({
  "node_modules/autoprefixer/lib/hacks/mask-border.js"(exports, module) {
    var Declaration = require_declaration();
    var MaskBorder = class extends Declaration {
      normalize() {
        return this.name.replace("box-image", "border");
      }
      prefixed(prop, prefix) {
        let result = super.prefixed(prop, prefix);
        if (prefix === "-webkit-") {
          result = result.replace("border", "box-image");
        }
        return result;
      }
    };
    MaskBorder.names = [
      "mask-border",
      "mask-border-source",
      "mask-border-slice",
      "mask-border-width",
      "mask-border-outset",
      "mask-border-repeat",
      "mask-box-image",
      "mask-box-image-source",
      "mask-box-image-slice",
      "mask-box-image-width",
      "mask-box-image-outset",
      "mask-box-image-repeat"
    ];
    module.exports = MaskBorder;
  }
});

// node_modules/autoprefixer/lib/hacks/mask-composite.js
var require_mask_composite = __commonJS({
  "node_modules/autoprefixer/lib/hacks/mask-composite.js"(exports, module) {
    var Declaration = require_declaration();
    var MaskComposite = class extends Declaration {
      insert(decl, prefix, prefixes) {
        let isCompositeProp = decl.prop === "mask-composite";
        let compositeValues;
        if (isCompositeProp) {
          compositeValues = decl.value.split(",");
        } else {
          compositeValues = decl.value.match(MaskComposite.regexp) || [];
        }
        compositeValues = compositeValues.map((el) => el.trim()).filter((el) => el);
        let hasCompositeValues = compositeValues.length;
        let compositeDecl;
        if (hasCompositeValues) {
          compositeDecl = this.clone(decl);
          compositeDecl.value = compositeValues.map((value) => MaskComposite.oldValues[value] || value).join(", ");
          if (compositeValues.includes("intersect")) {
            compositeDecl.value += ", xor";
          }
          compositeDecl.prop = prefix + "mask-composite";
        }
        if (isCompositeProp) {
          if (!hasCompositeValues) {
            return void 0;
          }
          if (this.needCascade(decl)) {
            compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
          }
          return decl.parent.insertBefore(decl, compositeDecl);
        }
        let cloned = this.clone(decl);
        cloned.prop = prefix + cloned.prop;
        if (hasCompositeValues) {
          cloned.value = cloned.value.replace(MaskComposite.regexp, "");
        }
        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        decl.parent.insertBefore(decl, cloned);
        if (!hasCompositeValues) {
          return decl;
        }
        if (this.needCascade(decl)) {
          compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, compositeDecl);
      }
    };
    MaskComposite.names = ["mask", "mask-composite"];
    MaskComposite.oldValues = {
      add: "source-over",
      subtract: "source-out",
      intersect: "source-in",
      exclude: "xor"
    };
    MaskComposite.regexp = new RegExp(
      `\\s+(${Object.keys(MaskComposite.oldValues).join(
        "|"
      )})\\b(?!\\))\\s*(?=[,])`,
      "ig"
    );
    module.exports = MaskComposite;
  }
});

// node_modules/autoprefixer/lib/hacks/align-items.js
var require_align_items = __commonJS({
  "node_modules/autoprefixer/lib/hacks/align-items.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var AlignItems = class extends Declaration {
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          return prefix + "box-align";
        }
        if (spec === 2012) {
          return prefix + "flex-align";
        }
        return super.prefixed(prop, prefix);
      }
      normalize() {
        return "align-items";
      }
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009 || spec === 2012) {
          decl.value = AlignItems.oldValues[decl.value] || decl.value;
        }
        return super.set(decl, prefix);
      }
    };
    AlignItems.names = ["align-items", "flex-align", "box-align"];
    AlignItems.oldValues = {
      "flex-end": "end",
      "flex-start": "start"
    };
    module.exports = AlignItems;
  }
});

// node_modules/autoprefixer/lib/hacks/user-select.js
var require_user_select = __commonJS({
  "node_modules/autoprefixer/lib/hacks/user-select.js"(exports, module) {
    var Declaration = require_declaration();
    var UserSelect = class extends Declaration {
      set(decl, prefix) {
        if (prefix === "-ms-" && decl.value === "contain") {
          decl.value = "element";
        }
        return super.set(decl, prefix);
      }
      insert(decl, prefix, prefixes) {
        if (decl.value === "all" && prefix === "-ms-") {
          return void 0;
        } else {
          return super.insert(decl, prefix, prefixes);
        }
      }
    };
    UserSelect.names = ["user-select"];
    module.exports = UserSelect;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-shrink.js
var require_flex_shrink = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-shrink.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var FlexShrink = class extends Declaration {
      normalize() {
        return "flex-shrink";
      }
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) {
          return prefix + "flex-negative";
        }
        return super.prefixed(prop, prefix);
      }
      set(decl, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012 || spec === "final") {
          return super.set(decl, prefix);
        }
        return void 0;
      }
    };
    FlexShrink.names = ["flex-shrink", "flex-negative"];
    module.exports = FlexShrink;
  }
});

// node_modules/autoprefixer/lib/hacks/break-props.js
var require_break_props = __commonJS({
  "node_modules/autoprefixer/lib/hacks/break-props.js"(exports, module) {
    var Declaration = require_declaration();
    var BreakProps = class extends Declaration {
      prefixed(prop, prefix) {
        return `${prefix}column-${prop}`;
      }
      normalize(prop) {
        if (prop.includes("inside")) {
          return "break-inside";
        }
        if (prop.includes("before")) {
          return "break-before";
        }
        return "break-after";
      }
      set(decl, prefix) {
        if (decl.prop === "break-inside" && decl.value === "avoid-column" || decl.value === "avoid-page") {
          decl.value = "avoid";
        }
        return super.set(decl, prefix);
      }
      insert(decl, prefix, prefixes) {
        if (decl.prop !== "break-inside") {
          return super.insert(decl, prefix, prefixes);
        }
        if (/region/i.test(decl.value) || /page/i.test(decl.value)) {
          return void 0;
        }
        return super.insert(decl, prefix, prefixes);
      }
    };
    BreakProps.names = [
      "break-inside",
      "page-break-inside",
      "column-break-inside",
      "break-before",
      "page-break-before",
      "column-break-before",
      "break-after",
      "page-break-after",
      "column-break-after"
    ];
    module.exports = BreakProps;
  }
});

// node_modules/autoprefixer/lib/hacks/writing-mode.js
var require_writing_mode = __commonJS({
  "node_modules/autoprefixer/lib/hacks/writing-mode.js"(exports, module) {
    var Declaration = require_declaration();
    var WritingMode = class extends Declaration {
      insert(decl, prefix, prefixes) {
        if (prefix === "-ms-") {
          let cloned = this.set(this.clone(decl), prefix);
          if (this.needCascade(decl)) {
            cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
          }
          let direction = "ltr";
          decl.parent.nodes.forEach((i) => {
            if (i.prop === "direction") {
              if (i.value === "rtl" || i.value === "ltr")
                direction = i.value;
            }
          });
          cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;
          return decl.parent.insertBefore(decl, cloned);
        }
        return super.insert(decl, prefix, prefixes);
      }
    };
    WritingMode.names = ["writing-mode"];
    WritingMode.msValues = {
      ltr: {
        "horizontal-tb": "lr-tb",
        "vertical-rl": "tb-rl",
        "vertical-lr": "tb-lr"
      },
      rtl: {
        "horizontal-tb": "rl-tb",
        "vertical-rl": "bt-rl",
        "vertical-lr": "bt-lr"
      }
    };
    module.exports = WritingMode;
  }
});

// node_modules/autoprefixer/lib/hacks/border-image.js
var require_border_image = __commonJS({
  "node_modules/autoprefixer/lib/hacks/border-image.js"(exports, module) {
    var Declaration = require_declaration();
    var BorderImage = class extends Declaration {
      set(decl, prefix) {
        decl.value = decl.value.replace(/\s+fill(\s)/, "$1");
        return super.set(decl, prefix);
      }
    };
    BorderImage.names = ["border-image"];
    module.exports = BorderImage;
  }
});

// node_modules/autoprefixer/lib/hacks/align-content.js
var require_align_content = __commonJS({
  "node_modules/autoprefixer/lib/hacks/align-content.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var AlignContent = class extends Declaration {
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2012) {
          return prefix + "flex-line-pack";
        }
        return super.prefixed(prop, prefix);
      }
      normalize() {
        return "align-content";
      }
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2012) {
          decl.value = AlignContent.oldValues[decl.value] || decl.value;
          return super.set(decl, prefix);
        }
        if (spec === "final") {
          return super.set(decl, prefix);
        }
        return void 0;
      }
    };
    AlignContent.names = ["align-content", "flex-line-pack"];
    AlignContent.oldValues = {
      "flex-end": "end",
      "flex-start": "start",
      "space-between": "justify",
      "space-around": "distribute"
    };
    module.exports = AlignContent;
  }
});

// node_modules/autoprefixer/lib/hacks/border-radius.js
var require_border_radius = __commonJS({
  "node_modules/autoprefixer/lib/hacks/border-radius.js"(exports, module) {
    var Declaration = require_declaration();
    var BorderRadius = class extends Declaration {
      prefixed(prop, prefix) {
        if (prefix === "-moz-") {
          return prefix + (BorderRadius.toMozilla[prop] || prop);
        }
        return super.prefixed(prop, prefix);
      }
      normalize(prop) {
        return BorderRadius.toNormal[prop] || prop;
      }
    };
    BorderRadius.names = ["border-radius"];
    BorderRadius.toMozilla = {};
    BorderRadius.toNormal = {};
    for (let ver of ["top", "bottom"]) {
      for (let hor of ["left", "right"]) {
        let normal = `border-${ver}-${hor}-radius`;
        let mozilla = `border-radius-${ver}${hor}`;
        BorderRadius.names.push(normal);
        BorderRadius.names.push(mozilla);
        BorderRadius.toMozilla[normal] = mozilla;
        BorderRadius.toNormal[mozilla] = normal;
      }
    }
    module.exports = BorderRadius;
  }
});

// node_modules/autoprefixer/lib/hacks/block-logical.js
var require_block_logical = __commonJS({
  "node_modules/autoprefixer/lib/hacks/block-logical.js"(exports, module) {
    var Declaration = require_declaration();
    var BlockLogical = class extends Declaration {
      prefixed(prop, prefix) {
        if (prop.includes("-start")) {
          return prefix + prop.replace("-block-start", "-before");
        }
        return prefix + prop.replace("-block-end", "-after");
      }
      normalize(prop) {
        if (prop.includes("-before")) {
          return prop.replace("-before", "-block-start");
        }
        return prop.replace("-after", "-block-end");
      }
    };
    BlockLogical.names = [
      "border-block-start",
      "border-block-end",
      "margin-block-start",
      "margin-block-end",
      "padding-block-start",
      "padding-block-end",
      "border-before",
      "border-after",
      "margin-before",
      "margin-after",
      "padding-before",
      "padding-after"
    ];
    module.exports = BlockLogical;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-template.js
var require_grid_template = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-template.js"(exports, module) {
    var Declaration = require_declaration();
    var {
      parseTemplate,
      warnMissedAreas,
      getGridGap,
      warnGridGap,
      inheritGridGap
    } = require_grid_utils();
    var GridTemplate = class extends Declaration {
      insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        if (decl.parent.some((i) => i.prop === "-ms-grid-rows")) {
          return void 0;
        }
        let gap = getGridGap(decl);
        let inheritedGap = inheritGridGap(decl, gap);
        let { rows, columns, areas } = parseTemplate({
          decl,
          gap: inheritedGap || gap
        });
        let hasAreas = Object.keys(areas).length > 0;
        let hasRows = Boolean(rows);
        let hasColumns = Boolean(columns);
        warnGridGap({
          gap,
          hasColumns,
          decl,
          result
        });
        warnMissedAreas(areas, decl, result);
        if (hasRows && hasColumns || hasAreas) {
          decl.cloneBefore({
            prop: "-ms-grid-rows",
            value: rows,
            raws: {}
          });
        }
        if (hasColumns) {
          decl.cloneBefore({
            prop: "-ms-grid-columns",
            value: columns,
            raws: {}
          });
        }
        return decl;
      }
    };
    GridTemplate.names = ["grid-template"];
    module.exports = GridTemplate;
  }
});

// node_modules/autoprefixer/lib/hacks/inline-logical.js
var require_inline_logical = __commonJS({
  "node_modules/autoprefixer/lib/hacks/inline-logical.js"(exports, module) {
    var Declaration = require_declaration();
    var InlineLogical = class extends Declaration {
      prefixed(prop, prefix) {
        return prefix + prop.replace("-inline", "");
      }
      normalize(prop) {
        return prop.replace(/(margin|padding|border)-(start|end)/, "$1-inline-$2");
      }
    };
    InlineLogical.names = [
      "border-inline-start",
      "border-inline-end",
      "margin-inline-start",
      "margin-inline-end",
      "padding-inline-start",
      "padding-inline-end",
      "border-start",
      "border-end",
      "margin-start",
      "margin-end",
      "padding-start",
      "padding-end"
    ];
    module.exports = InlineLogical;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-row-align.js
var require_grid_row_align = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-row-align.js"(exports, module) {
    var Declaration = require_declaration();
    var GridRowAlign = class extends Declaration {
      check(decl) {
        return !decl.value.includes("flex-") && decl.value !== "baseline";
      }
      prefixed(prop, prefix) {
        return prefix + "grid-row-align";
      }
      normalize() {
        return "align-self";
      }
    };
    GridRowAlign.names = ["grid-row-align"];
    module.exports = GridRowAlign;
  }
});

// node_modules/autoprefixer/lib/hacks/transform-decl.js
var require_transform_decl = __commonJS({
  "node_modules/autoprefixer/lib/hacks/transform-decl.js"(exports, module) {
    var Declaration = require_declaration();
    var TransformDecl = class extends Declaration {
      keyframeParents(decl) {
        let { parent } = decl;
        while (parent) {
          if (parent.type === "atrule" && parent.name === "keyframes") {
            return true;
          }
          ;
          ({ parent } = parent);
        }
        return false;
      }
      contain3d(decl) {
        if (decl.prop === "transform-origin") {
          return false;
        }
        for (let func of TransformDecl.functions3d) {
          if (decl.value.includes(`${func}(`)) {
            return true;
          }
        }
        return false;
      }
      set(decl, prefix) {
        decl = super.set(decl, prefix);
        if (prefix === "-ms-") {
          decl.value = decl.value.replace(/rotatez/gi, "rotate");
        }
        return decl;
      }
      insert(decl, prefix, prefixes) {
        if (prefix === "-ms-") {
          if (!this.contain3d(decl) && !this.keyframeParents(decl)) {
            return super.insert(decl, prefix, prefixes);
          }
        } else if (prefix === "-o-") {
          if (!this.contain3d(decl)) {
            return super.insert(decl, prefix, prefixes);
          }
        } else {
          return super.insert(decl, prefix, prefixes);
        }
        return void 0;
      }
    };
    TransformDecl.names = ["transform", "transform-origin"];
    TransformDecl.functions3d = [
      "matrix3d",
      "translate3d",
      "translateZ",
      "scale3d",
      "scaleZ",
      "rotate3d",
      "rotateX",
      "rotateY",
      "perspective"
    ];
    module.exports = TransformDecl;
  }
});

// node_modules/autoprefixer/lib/hacks/flex-direction.js
var require_flex_direction = __commonJS({
  "node_modules/autoprefixer/lib/hacks/flex-direction.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var FlexDirection = class extends Declaration {
      normalize() {
        return "flex-direction";
      }
      insert(decl, prefix, prefixes) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec !== 2009) {
          return super.insert(decl, prefix, prefixes);
        }
        let already = decl.parent.some(
          (i) => i.prop === prefix + "box-orient" || i.prop === prefix + "box-direction"
        );
        if (already) {
          return void 0;
        }
        let v = decl.value;
        let orient, dir;
        if (v === "inherit" || v === "initial" || v === "unset") {
          orient = v;
          dir = v;
        } else {
          orient = v.includes("row") ? "horizontal" : "vertical";
          dir = v.includes("reverse") ? "reverse" : "normal";
        }
        let cloned = this.clone(decl);
        cloned.prop = prefix + "box-orient";
        cloned.value = orient;
        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        decl.parent.insertBefore(decl, cloned);
        cloned = this.clone(decl);
        cloned.prop = prefix + "box-direction";
        cloned.value = dir;
        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, cloned);
      }
      old(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          return [prefix + "box-orient", prefix + "box-direction"];
        } else {
          return super.old(prop, prefix);
        }
      }
    };
    FlexDirection.names = ["flex-direction", "box-direction", "box-orient"];
    module.exports = FlexDirection;
  }
});

// node_modules/autoprefixer/lib/hacks/image-rendering.js
var require_image_rendering = __commonJS({
  "node_modules/autoprefixer/lib/hacks/image-rendering.js"(exports, module) {
    var Declaration = require_declaration();
    var ImageRendering = class extends Declaration {
      check(decl) {
        return decl.value === "pixelated";
      }
      prefixed(prop, prefix) {
        if (prefix === "-ms-") {
          return "-ms-interpolation-mode";
        }
        return super.prefixed(prop, prefix);
      }
      set(decl, prefix) {
        if (prefix !== "-ms-")
          return super.set(decl, prefix);
        decl.prop = "-ms-interpolation-mode";
        decl.value = "nearest-neighbor";
        return decl;
      }
      normalize() {
        return "image-rendering";
      }
      process(node, result) {
        return super.process(node, result);
      }
    };
    ImageRendering.names = ["image-rendering", "interpolation-mode"];
    module.exports = ImageRendering;
  }
});

// node_modules/autoprefixer/lib/hacks/backdrop-filter.js
var require_backdrop_filter = __commonJS({
  "node_modules/autoprefixer/lib/hacks/backdrop-filter.js"(exports, module) {
    var Declaration = require_declaration();
    var utils = require_utils();
    var BackdropFilter = class extends Declaration {
      constructor(name, prefixes, all) {
        super(name, prefixes, all);
        if (this.prefixes) {
          this.prefixes = utils.uniq(
            this.prefixes.map((i) => {
              return i === "-ms-" ? "-webkit-" : i;
            })
          );
        }
      }
    };
    BackdropFilter.names = ["backdrop-filter"];
    module.exports = BackdropFilter;
  }
});

// node_modules/autoprefixer/lib/hacks/background-clip.js
var require_background_clip = __commonJS({
  "node_modules/autoprefixer/lib/hacks/background-clip.js"(exports, module) {
    var Declaration = require_declaration();
    var utils = require_utils();
    var BackgroundClip = class extends Declaration {
      constructor(name, prefixes, all) {
        super(name, prefixes, all);
        if (this.prefixes) {
          this.prefixes = utils.uniq(
            this.prefixes.map((i) => {
              return i === "-ms-" ? "-webkit-" : i;
            })
          );
        }
      }
      check(decl) {
        return decl.value.toLowerCase() === "text";
      }
    };
    BackgroundClip.names = ["background-clip"];
    module.exports = BackgroundClip;
  }
});

// node_modules/autoprefixer/lib/hacks/text-decoration.js
var require_text_decoration = __commonJS({
  "node_modules/autoprefixer/lib/hacks/text-decoration.js"(exports, module) {
    var Declaration = require_declaration();
    var BASIC = [
      "none",
      "underline",
      "overline",
      "line-through",
      "blink",
      "inherit",
      "initial",
      "unset"
    ];
    var TextDecoration = class extends Declaration {
      check(decl) {
        return decl.value.split(/\s+/).some((i) => !BASIC.includes(i));
      }
    };
    TextDecoration.names = ["text-decoration"];
    module.exports = TextDecoration;
  }
});

// node_modules/autoprefixer/lib/hacks/justify-content.js
var require_justify_content = __commonJS({
  "node_modules/autoprefixer/lib/hacks/justify-content.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var Declaration = require_declaration();
    var JustifyContent = class extends Declaration {
      prefixed(prop, prefix) {
        let spec;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          return prefix + "box-pack";
        }
        if (spec === 2012) {
          return prefix + "flex-pack";
        }
        return super.prefixed(prop, prefix);
      }
      normalize() {
        return "justify-content";
      }
      set(decl, prefix) {
        let spec = flexSpec(prefix)[0];
        if (spec === 2009 || spec === 2012) {
          let value = JustifyContent.oldValues[decl.value] || decl.value;
          decl.value = value;
          if (spec !== 2009 || value !== "distribute") {
            return super.set(decl, prefix);
          }
        } else if (spec === "final") {
          return super.set(decl, prefix);
        }
        return void 0;
      }
    };
    JustifyContent.names = ["justify-content", "flex-pack", "box-pack"];
    JustifyContent.oldValues = {
      "flex-end": "end",
      "flex-start": "start",
      "space-between": "justify",
      "space-around": "distribute"
    };
    module.exports = JustifyContent;
  }
});

// node_modules/autoprefixer/lib/hacks/background-size.js
var require_background_size = __commonJS({
  "node_modules/autoprefixer/lib/hacks/background-size.js"(exports, module) {
    var Declaration = require_declaration();
    var BackgroundSize = class extends Declaration {
      set(decl, prefix) {
        let value = decl.value.toLowerCase();
        if (prefix === "-webkit-" && !value.includes(" ") && value !== "contain" && value !== "cover") {
          decl.value = decl.value + " " + decl.value;
        }
        return super.set(decl, prefix);
      }
    };
    BackgroundSize.names = ["background-size"];
    module.exports = BackgroundSize;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-row-column.js
var require_grid_row_column = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-row-column.js"(exports, module) {
    var Declaration = require_declaration();
    var utils = require_grid_utils();
    var GridRowColumn = class extends Declaration {
      insert(decl, prefix, prefixes) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        let values = utils.parse(decl);
        let [start, span] = utils.translate(values, 0, 1);
        let hasStartValueSpan = values[0] && values[0].includes("span");
        if (hasStartValueSpan) {
          span = values[0].join("").replace(/\D/g, "");
        }
        ;
        [
          [decl.prop, start],
          [`${decl.prop}-span`, span]
        ].forEach(([prop, value]) => {
          utils.insertDecl(decl, prop, value);
        });
        return void 0;
      }
    };
    GridRowColumn.names = ["grid-row", "grid-column"];
    module.exports = GridRowColumn;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-rows-columns.js
var require_grid_rows_columns = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-rows-columns.js"(exports, module) {
    var Declaration = require_declaration();
    var {
      prefixTrackProp,
      prefixTrackValue,
      autoplaceGridItems,
      getGridGap,
      inheritGridGap
    } = require_grid_utils();
    var Processor = require_processor();
    var GridRowsColumns = class extends Declaration {
      prefixed(prop, prefix) {
        if (prefix === "-ms-") {
          return prefixTrackProp({ prop, prefix });
        }
        return super.prefixed(prop, prefix);
      }
      normalize(prop) {
        return prop.replace(/^grid-(rows|columns)/, "grid-template-$1");
      }
      insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        let { parent, prop, value } = decl;
        let isRowProp = prop.includes("rows");
        let isColumnProp = prop.includes("columns");
        let hasGridTemplate = parent.some(
          (i) => i.prop === "grid-template" || i.prop === "grid-template-areas"
        );
        if (hasGridTemplate && isRowProp) {
          return false;
        }
        let processor = new Processor({ options: {} });
        let status = processor.gridStatus(parent, result);
        let gap = getGridGap(decl);
        gap = inheritGridGap(decl, gap) || gap;
        let gapValue = isRowProp ? gap.row : gap.column;
        if ((status === "no-autoplace" || status === true) && !hasGridTemplate) {
          gapValue = null;
        }
        let prefixValue = prefixTrackValue({
          value,
          gap: gapValue
        });
        decl.cloneBefore({
          prop: prefixTrackProp({ prop, prefix }),
          value: prefixValue
        });
        let autoflow = parent.nodes.find((i) => i.prop === "grid-auto-flow");
        let autoflowValue = "row";
        if (autoflow && !processor.disabled(autoflow, result)) {
          autoflowValue = autoflow.value.trim();
        }
        if (status === "autoplace") {
          let rowDecl = parent.nodes.find((i) => i.prop === "grid-template-rows");
          if (!rowDecl && hasGridTemplate) {
            return void 0;
          } else if (!rowDecl && !hasGridTemplate) {
            decl.warn(
              result,
              "Autoplacement does not work without grid-template-rows property"
            );
            return void 0;
          }
          let columnDecl = parent.nodes.find((i) => {
            return i.prop === "grid-template-columns";
          });
          if (!columnDecl && !hasGridTemplate) {
            decl.warn(
              result,
              "Autoplacement does not work without grid-template-columns property"
            );
          }
          if (isColumnProp && !hasGridTemplate) {
            autoplaceGridItems(decl, result, gap, autoflowValue);
          }
        }
        return void 0;
      }
    };
    GridRowsColumns.names = [
      "grid-template-rows",
      "grid-template-columns",
      "grid-rows",
      "grid-columns"
    ];
    module.exports = GridRowsColumns;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-column-align.js
var require_grid_column_align = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-column-align.js"(exports, module) {
    var Declaration = require_declaration();
    var GridColumnAlign = class extends Declaration {
      check(decl) {
        return !decl.value.includes("flex-") && decl.value !== "baseline";
      }
      prefixed(prop, prefix) {
        return prefix + "grid-column-align";
      }
      normalize() {
        return "justify-self";
      }
    };
    GridColumnAlign.names = ["grid-column-align"];
    module.exports = GridColumnAlign;
  }
});

// node_modules/autoprefixer/lib/hacks/print-color-adjust.js
var require_print_color_adjust = __commonJS({
  "node_modules/autoprefixer/lib/hacks/print-color-adjust.js"(exports, module) {
    var Declaration = require_declaration();
    var PrintColorAdjust = class extends Declaration {
      prefixed(prop, prefix) {
        if (prefix === "-moz-") {
          return "color-adjust";
        } else {
          return prefix + "print-color-adjust";
        }
      }
      normalize() {
        return "print-color-adjust";
      }
    };
    PrintColorAdjust.names = ["print-color-adjust", "color-adjust"];
    module.exports = PrintColorAdjust;
  }
});

// node_modules/autoprefixer/lib/hacks/overscroll-behavior.js
var require_overscroll_behavior = __commonJS({
  "node_modules/autoprefixer/lib/hacks/overscroll-behavior.js"(exports, module) {
    var Declaration = require_declaration();
    var OverscrollBehavior = class extends Declaration {
      prefixed(prop, prefix) {
        return prefix + "scroll-chaining";
      }
      normalize() {
        return "overscroll-behavior";
      }
      set(decl, prefix) {
        if (decl.value === "auto") {
          decl.value = "chained";
        } else if (decl.value === "none" || decl.value === "contain") {
          decl.value = "none";
        }
        return super.set(decl, prefix);
      }
    };
    OverscrollBehavior.names = ["overscroll-behavior", "scroll-chaining"];
    module.exports = OverscrollBehavior;
  }
});

// node_modules/autoprefixer/lib/hacks/grid-template-areas.js
var require_grid_template_areas = __commonJS({
  "node_modules/autoprefixer/lib/hacks/grid-template-areas.js"(exports, module) {
    var Declaration = require_declaration();
    var {
      parseGridAreas,
      warnMissedAreas,
      prefixTrackProp,
      prefixTrackValue,
      getGridGap,
      warnGridGap,
      inheritGridGap
    } = require_grid_utils();
    function getGridRows(tpl) {
      return tpl.trim().slice(1, -1).split(/["']\s*["']?/g);
    }
    var GridTemplateAreas = class extends Declaration {
      insert(decl, prefix, prefixes, result) {
        if (prefix !== "-ms-")
          return super.insert(decl, prefix, prefixes);
        let hasColumns = false;
        let hasRows = false;
        let parent = decl.parent;
        let gap = getGridGap(decl);
        gap = inheritGridGap(decl, gap) || gap;
        parent.walkDecls(/-ms-grid-rows/, (i) => i.remove());
        parent.walkDecls(/grid-template-(rows|columns)/, (trackDecl) => {
          if (trackDecl.prop === "grid-template-rows") {
            hasRows = true;
            let { prop, value } = trackDecl;
            trackDecl.cloneBefore({
              prop: prefixTrackProp({ prop, prefix }),
              value: prefixTrackValue({ value, gap: gap.row })
            });
          } else {
            hasColumns = true;
          }
        });
        let gridRows = getGridRows(decl.value);
        if (hasColumns && !hasRows && gap.row && gridRows.length > 1) {
          decl.cloneBefore({
            prop: "-ms-grid-rows",
            value: prefixTrackValue({
              value: `repeat(${gridRows.length}, auto)`,
              gap: gap.row
            }),
            raws: {}
          });
        }
        warnGridGap({
          gap,
          hasColumns,
          decl,
          result
        });
        let areas = parseGridAreas({
          rows: gridRows,
          gap
        });
        warnMissedAreas(areas, decl, result);
        return decl;
      }
    };
    GridTemplateAreas.names = ["grid-template-areas"];
    module.exports = GridTemplateAreas;
  }
});

// node_modules/autoprefixer/lib/hacks/text-emphasis-position.js
var require_text_emphasis_position = __commonJS({
  "node_modules/autoprefixer/lib/hacks/text-emphasis-position.js"(exports, module) {
    var Declaration = require_declaration();
    var TextEmphasisPosition = class extends Declaration {
      set(decl, prefix) {
        if (prefix === "-webkit-") {
          decl.value = decl.value.replace(/\s*(right|left)\s*/i, "");
        }
        return super.set(decl, prefix);
      }
    };
    TextEmphasisPosition.names = ["text-emphasis-position"];
    module.exports = TextEmphasisPosition;
  }
});

// node_modules/autoprefixer/lib/hacks/text-decoration-skip-ink.js
var require_text_decoration_skip_ink = __commonJS({
  "node_modules/autoprefixer/lib/hacks/text-decoration-skip-ink.js"(exports, module) {
    var Declaration = require_declaration();
    var TextDecorationSkipInk = class extends Declaration {
      set(decl, prefix) {
        if (decl.prop === "text-decoration-skip-ink" && decl.value === "auto") {
          decl.prop = prefix + "text-decoration-skip";
          decl.value = "ink";
          return decl;
        } else {
          return super.set(decl, prefix);
        }
      }
    };
    TextDecorationSkipInk.names = [
      "text-decoration-skip-ink",
      "text-decoration-skip"
    ];
    module.exports = TextDecorationSkipInk;
  }
});

// node_modules/normalize-range/index.js
var require_normalize_range = __commonJS({
  "node_modules/normalize-range/index.js"(exports, module) {
    "use strict";
    module.exports = {
      wrap: wrapRange,
      limit: limitRange,
      validate: validateRange,
      test: testRange,
      curry,
      name
    };
    function wrapRange(min, max, value) {
      var maxLessMin = max - min;
      return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;
    }
    function limitRange(min, max, value) {
      return Math.max(min, Math.min(max, value));
    }
    function validateRange(min, max, value, minExclusive, maxExclusive) {
      if (!testRange(min, max, value, minExclusive, maxExclusive)) {
        throw new Error(value + " is outside of range [" + min + "," + max + ")");
      }
      return value;
    }
    function testRange(min, max, value, minExclusive, maxExclusive) {
      return !(value < min || value > max || maxExclusive && value === max || minExclusive && value === min);
    }
    function name(min, max, minExcl, maxExcl) {
      return (minExcl ? "(" : "[") + min + "," + max + (maxExcl ? ")" : "]");
    }
    function curry(min, max, minExclusive, maxExclusive) {
      var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);
      return {
        wrap: wrapRange.bind(null, min, max),
        limit: limitRange.bind(null, min, max),
        validate: function(value) {
          return validateRange(min, max, value, minExclusive, maxExclusive);
        },
        test: function(value) {
          return testRange(min, max, value, minExclusive, maxExclusive);
        },
        toString: boundNameFn,
        name: boundNameFn
      };
    }
  }
});

// node_modules/autoprefixer/lib/hacks/gradient.js
var require_gradient = __commonJS({
  "node_modules/autoprefixer/lib/hacks/gradient.js"(exports, module) {
    var parser = require_lib();
    var range = require_normalize_range();
    var OldValue = require_old_value();
    var Value = require_value();
    var utils = require_utils();
    var IS_DIRECTION = /top|left|right|bottom/gi;
    var Gradient = class extends Value {
      replace(string, prefix) {
        let ast = parser(string);
        for (let node of ast.nodes) {
          let gradientName = this.name;
          if (node.type === "function" && node.value === gradientName) {
            node.nodes = this.newDirection(node.nodes);
            node.nodes = this.normalize(node.nodes, gradientName);
            if (prefix === "-webkit- old") {
              let changes = this.oldWebkit(node);
              if (!changes) {
                return false;
              }
            } else {
              node.nodes = this.convertDirection(node.nodes);
              node.value = prefix + node.value;
            }
          }
        }
        return ast.toString();
      }
      replaceFirst(params, ...words) {
        let prefix = words.map((i) => {
          if (i === " ") {
            return { type: "space", value: i };
          }
          return { type: "word", value: i };
        });
        return prefix.concat(params.slice(1));
      }
      normalizeUnit(str, full) {
        let num = parseFloat(str);
        let deg = num / full * 360;
        return `${deg}deg`;
      }
      normalize(nodes, gradientName) {
        if (!nodes[0])
          return nodes;
        if (/-?\d+(.\d+)?grad/.test(nodes[0].value)) {
          nodes[0].value = this.normalizeUnit(nodes[0].value, 400);
        } else if (/-?\d+(.\d+)?rad/.test(nodes[0].value)) {
          nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);
        } else if (/-?\d+(.\d+)?turn/.test(nodes[0].value)) {
          nodes[0].value = this.normalizeUnit(nodes[0].value, 1);
        } else if (nodes[0].value.includes("deg")) {
          let num = parseFloat(nodes[0].value);
          num = range.wrap(0, 360, num);
          nodes[0].value = `${num}deg`;
        }
        if (gradientName === "linear-gradient" || gradientName === "repeating-linear-gradient") {
          let direction = nodes[0].value;
          if (direction === "0deg" || direction === "0") {
            nodes = this.replaceFirst(nodes, "to", " ", "top");
          } else if (direction === "90deg") {
            nodes = this.replaceFirst(nodes, "to", " ", "right");
          } else if (direction === "180deg") {
            nodes = this.replaceFirst(nodes, "to", " ", "bottom");
          } else if (direction === "270deg") {
            nodes = this.replaceFirst(nodes, "to", " ", "left");
          }
        }
        return nodes;
      }
      newDirection(params) {
        if (params[0].value === "to") {
          return params;
        }
        IS_DIRECTION.lastIndex = 0;
        if (!IS_DIRECTION.test(params[0].value)) {
          return params;
        }
        params.unshift(
          {
            type: "word",
            value: "to"
          },
          {
            type: "space",
            value: " "
          }
        );
        for (let i = 2; i < params.length; i++) {
          if (params[i].type === "div") {
            break;
          }
          if (params[i].type === "word") {
            params[i].value = this.revertDirection(params[i].value);
          }
        }
        return params;
      }
      isRadial(params) {
        let state = "before";
        for (let param of params) {
          if (state === "before" && param.type === "space") {
            state = "at";
          } else if (state === "at" && param.value === "at") {
            state = "after";
          } else if (state === "after" && param.type === "space") {
            return true;
          } else if (param.type === "div") {
            break;
          } else {
            state = "before";
          }
        }
        return false;
      }
      convertDirection(params) {
        if (params.length > 0) {
          if (params[0].value === "to") {
            this.fixDirection(params);
          } else if (params[0].value.includes("deg")) {
            this.fixAngle(params);
          } else if (this.isRadial(params)) {
            this.fixRadial(params);
          }
        }
        return params;
      }
      fixDirection(params) {
        params.splice(0, 2);
        for (let param of params) {
          if (param.type === "div") {
            break;
          }
          if (param.type === "word") {
            param.value = this.revertDirection(param.value);
          }
        }
      }
      fixAngle(params) {
        let first = params[0].value;
        first = parseFloat(first);
        first = Math.abs(450 - first) % 360;
        first = this.roundFloat(first, 3);
        params[0].value = `${first}deg`;
      }
      fixRadial(params) {
        let first = [];
        let second = [];
        let a, b, c, i, next;
        for (i = 0; i < params.length - 2; i++) {
          a = params[i];
          b = params[i + 1];
          c = params[i + 2];
          if (a.type === "space" && b.value === "at" && c.type === "space") {
            next = i + 3;
            break;
          } else {
            first.push(a);
          }
        }
        let div;
        for (i = next; i < params.length; i++) {
          if (params[i].type === "div") {
            div = params[i];
            break;
          } else {
            second.push(params[i]);
          }
        }
        params.splice(0, i, ...second, div, ...first);
      }
      revertDirection(word) {
        return Gradient.directions[word.toLowerCase()] || word;
      }
      roundFloat(float, digits) {
        return parseFloat(float.toFixed(digits));
      }
      oldWebkit(node) {
        let { nodes } = node;
        let string = parser.stringify(node.nodes);
        if (this.name !== "linear-gradient") {
          return false;
        }
        if (nodes[0] && nodes[0].value.includes("deg")) {
          return false;
        }
        if (string.includes("px") || string.includes("-corner") || string.includes("-side")) {
          return false;
        }
        let params = [[]];
        for (let i of nodes) {
          params[params.length - 1].push(i);
          if (i.type === "div" && i.value === ",") {
            params.push([]);
          }
        }
        this.oldDirection(params);
        this.colorStops(params);
        node.nodes = [];
        for (let param of params) {
          node.nodes = node.nodes.concat(param);
        }
        node.nodes.unshift(
          { type: "word", value: "linear" },
          this.cloneDiv(node.nodes)
        );
        node.value = "-webkit-gradient";
        return true;
      }
      oldDirection(params) {
        let div = this.cloneDiv(params[0]);
        if (params[0][0].value !== "to") {
          return params.unshift([
            { type: "word", value: Gradient.oldDirections.bottom },
            div
          ]);
        } else {
          let words = [];
          for (let node of params[0].slice(2)) {
            if (node.type === "word") {
              words.push(node.value.toLowerCase());
            }
          }
          words = words.join(" ");
          let old = Gradient.oldDirections[words] || words;
          params[0] = [{ type: "word", value: old }, div];
          return params[0];
        }
      }
      cloneDiv(params) {
        for (let i of params) {
          if (i.type === "div" && i.value === ",") {
            return i;
          }
        }
        return { type: "div", value: ",", after: " " };
      }
      colorStops(params) {
        let result = [];
        for (let i = 0; i < params.length; i++) {
          let pos;
          let param = params[i];
          let item;
          if (i === 0) {
            continue;
          }
          let color = parser.stringify(param[0]);
          if (param[1] && param[1].type === "word") {
            pos = param[1].value;
          } else if (param[2] && param[2].type === "word") {
            pos = param[2].value;
          }
          let stop;
          if (i === 1 && (!pos || pos === "0%")) {
            stop = `from(${color})`;
          } else if (i === params.length - 1 && (!pos || pos === "100%")) {
            stop = `to(${color})`;
          } else if (pos) {
            stop = `color-stop(${pos}, ${color})`;
          } else {
            stop = `color-stop(${color})`;
          }
          let div = param[param.length - 1];
          params[i] = [{ type: "word", value: stop }];
          if (div.type === "div" && div.value === ",") {
            item = params[i].push(div);
          }
          result.push(item);
        }
        return result;
      }
      old(prefix) {
        if (prefix === "-webkit-") {
          let type;
          if (this.name === "linear-gradient") {
            type = "linear";
          } else if (this.name === "repeating-linear-gradient") {
            type = "repeating-linear";
          } else if (this.name === "repeating-radial-gradient") {
            type = "repeating-radial";
          } else {
            type = "radial";
          }
          let string = "-gradient";
          let regexp = utils.regexp(
            `-webkit-(${type}-gradient|gradient\\(\\s*${type})`,
            false
          );
          return new OldValue(this.name, prefix + this.name, string, regexp);
        } else {
          return super.old(prefix);
        }
      }
      add(decl, prefix) {
        let p = decl.prop;
        if (p.includes("mask")) {
          if (prefix === "-webkit-" || prefix === "-webkit- old") {
            return super.add(decl, prefix);
          }
        } else if (p === "list-style" || p === "list-style-image" || p === "content") {
          if (prefix === "-webkit-" || prefix === "-webkit- old") {
            return super.add(decl, prefix);
          }
        } else {
          return super.add(decl, prefix);
        }
        return void 0;
      }
    };
    Gradient.names = [
      "linear-gradient",
      "repeating-linear-gradient",
      "radial-gradient",
      "repeating-radial-gradient"
    ];
    Gradient.directions = {
      top: "bottom",
      left: "right",
      bottom: "top",
      right: "left"
    };
    Gradient.oldDirections = {
      "top": "left bottom, left top",
      "left": "right top, left top",
      "bottom": "left top, left bottom",
      "right": "left top, right top",
      "top right": "left bottom, right top",
      "top left": "right bottom, left top",
      "right top": "left bottom, right top",
      "right bottom": "left top, right bottom",
      "bottom right": "left top, right bottom",
      "bottom left": "right top, left bottom",
      "left top": "right bottom, left top",
      "left bottom": "right top, left bottom"
    };
    module.exports = Gradient;
  }
});

// node_modules/autoprefixer/lib/hacks/intrinsic.js
var require_intrinsic = __commonJS({
  "node_modules/autoprefixer/lib/hacks/intrinsic.js"(exports, module) {
    var OldValue = require_old_value();
    var Value = require_value();
    function regexp(name) {
      return new RegExp(`(^|[\\s,(])(${name}($|[\\s),]))`, "gi");
    }
    var Intrinsic = class extends Value {
      regexp() {
        if (!this.regexpCache)
          this.regexpCache = regexp(this.name);
        return this.regexpCache;
      }
      isStretch() {
        return this.name === "stretch" || this.name === "fill" || this.name === "fill-available";
      }
      replace(string, prefix) {
        if (prefix === "-moz-" && this.isStretch()) {
          return string.replace(this.regexp(), "$1-moz-available$3");
        }
        if (prefix === "-webkit-" && this.isStretch()) {
          return string.replace(this.regexp(), "$1-webkit-fill-available$3");
        }
        return super.replace(string, prefix);
      }
      old(prefix) {
        let prefixed = prefix + this.name;
        if (this.isStretch()) {
          if (prefix === "-moz-") {
            prefixed = "-moz-available";
          } else if (prefix === "-webkit-") {
            prefixed = "-webkit-fill-available";
          }
        }
        return new OldValue(this.name, prefixed, prefixed, regexp(prefixed));
      }
      add(decl, prefix) {
        if (decl.prop.includes("grid") && prefix !== "-webkit-") {
          return void 0;
        }
        return super.add(decl, prefix);
      }
    };
    Intrinsic.names = [
      "max-content",
      "min-content",
      "fit-content",
      "fill",
      "fill-available",
      "stretch"
    ];
    module.exports = Intrinsic;
  }
});

// node_modules/autoprefixer/lib/hacks/pixelated.js
var require_pixelated = __commonJS({
  "node_modules/autoprefixer/lib/hacks/pixelated.js"(exports, module) {
    var OldValue = require_old_value();
    var Value = require_value();
    var Pixelated = class extends Value {
      replace(string, prefix) {
        if (prefix === "-webkit-") {
          return string.replace(this.regexp(), "$1-webkit-optimize-contrast");
        }
        if (prefix === "-moz-") {
          return string.replace(this.regexp(), "$1-moz-crisp-edges");
        }
        return super.replace(string, prefix);
      }
      old(prefix) {
        if (prefix === "-webkit-") {
          return new OldValue(this.name, "-webkit-optimize-contrast");
        }
        if (prefix === "-moz-") {
          return new OldValue(this.name, "-moz-crisp-edges");
        }
        return super.old(prefix);
      }
    };
    Pixelated.names = ["pixelated"];
    module.exports = Pixelated;
  }
});

// node_modules/autoprefixer/lib/hacks/image-set.js
var require_image_set = __commonJS({
  "node_modules/autoprefixer/lib/hacks/image-set.js"(exports, module) {
    var Value = require_value();
    var ImageSet = class extends Value {
      replace(string, prefix) {
        let fixed = super.replace(string, prefix);
        if (prefix === "-webkit-") {
          fixed = fixed.replace(/("[^"]+"|'[^']+')(\s+\d+\w)/gi, "url($1)$2");
        }
        return fixed;
      }
    };
    ImageSet.names = ["image-set"];
    module.exports = ImageSet;
  }
});

// node_modules/autoprefixer/lib/hacks/cross-fade.js
var require_cross_fade = __commonJS({
  "node_modules/autoprefixer/lib/hacks/cross-fade.js"(exports, module) {
    var list = require_postcss().list;
    var Value = require_value();
    var CrossFade = class extends Value {
      replace(string, prefix) {
        return list.space(string).map((value) => {
          if (value.slice(0, +this.name.length + 1) !== this.name + "(") {
            return value;
          }
          let close = value.lastIndexOf(")");
          let after = value.slice(close + 1);
          let args = value.slice(this.name.length + 1, close);
          if (prefix === "-webkit-") {
            let match = args.match(/\d*.?\d+%?/);
            if (match) {
              args = args.slice(match[0].length).trim();
              args += `, ${match[0]}`;
            } else {
              args += ", 0.5";
            }
          }
          return prefix + this.name + "(" + args + ")" + after;
        }).join(" ");
      }
    };
    CrossFade.names = ["cross-fade"];
    module.exports = CrossFade;
  }
});

// node_modules/autoprefixer/lib/hacks/display-flex.js
var require_display_flex = __commonJS({
  "node_modules/autoprefixer/lib/hacks/display-flex.js"(exports, module) {
    var flexSpec = require_flex_spec();
    var OldValue = require_old_value();
    var Value = require_value();
    var DisplayFlex = class extends Value {
      constructor(name, prefixes) {
        super(name, prefixes);
        if (name === "display-flex") {
          this.name = "flex";
        }
      }
      check(decl) {
        return decl.prop === "display" && decl.value === this.name;
      }
      prefixed(prefix) {
        let spec, value;
        [spec, prefix] = flexSpec(prefix);
        if (spec === 2009) {
          if (this.name === "flex") {
            value = "box";
          } else {
            value = "inline-box";
          }
        } else if (spec === 2012) {
          if (this.name === "flex") {
            value = "flexbox";
          } else {
            value = "inline-flexbox";
          }
        } else if (spec === "final") {
          value = this.name;
        }
        return prefix + value;
      }
      replace(string, prefix) {
        return this.prefixed(prefix);
      }
      old(prefix) {
        let prefixed = this.prefixed(prefix);
        if (!prefixed)
          return void 0;
        return new OldValue(this.name, prefixed);
      }
    };
    DisplayFlex.names = ["display-flex", "inline-flex"];
    module.exports = DisplayFlex;
  }
});

// node_modules/autoprefixer/lib/hacks/display-grid.js
var require_display_grid = __commonJS({
  "node_modules/autoprefixer/lib/hacks/display-grid.js"(exports, module) {
    var Value = require_value();
    var DisplayGrid = class extends Value {
      constructor(name, prefixes) {
        super(name, prefixes);
        if (name === "display-grid") {
          this.name = "grid";
        }
      }
      check(decl) {
        return decl.prop === "display" && decl.value === this.name;
      }
    };
    DisplayGrid.names = ["display-grid", "inline-grid"];
    module.exports = DisplayGrid;
  }
});

// node_modules/autoprefixer/lib/hacks/filter-value.js
var require_filter_value = __commonJS({
  "node_modules/autoprefixer/lib/hacks/filter-value.js"(exports, module) {
    var Value = require_value();
    var FilterValue = class extends Value {
      constructor(name, prefixes) {
        super(name, prefixes);
        if (name === "filter-function") {
          this.name = "filter";
        }
      }
    };
    FilterValue.names = ["filter", "filter-function"];
    module.exports = FilterValue;
  }
});

// node_modules/autoprefixer/lib/hacks/autofill.js
var require_autofill = __commonJS({
  "node_modules/autoprefixer/lib/hacks/autofill.js"(exports, module) {
    var Selector = require_selector();
    var utils = require_utils();
    var Autofill = class extends Selector {
      constructor(name, prefixes, all) {
        super(name, prefixes, all);
        if (this.prefixes) {
          this.prefixes = utils.uniq(this.prefixes.map(() => "-webkit-"));
        }
      }
      prefixed(prefix) {
        if (prefix === "-webkit-") {
          return ":-webkit-autofill";
        }
        return `:${prefix}autofill`;
      }
    };
    Autofill.names = [":autofill"];
    module.exports = Autofill;
  }
});

// node_modules/autoprefixer/lib/prefixes.js
var require_prefixes = __commonJS({
  "node_modules/autoprefixer/lib/prefixes.js"(exports, module) {
    var vendor = require_vendor();
    var Declaration = require_declaration();
    var Resolution = require_resolution();
    var Transition = require_transition();
    var Processor = require_processor();
    var Supports = require_supports();
    var Browsers = require_browsers3();
    var Selector = require_selector();
    var AtRule = require_at_rule();
    var Value = require_value();
    var utils = require_utils();
    var hackFullscreen = require_fullscreen();
    var hackPlaceholder = require_placeholder();
    var hackPlaceholderShown = require_placeholder_shown();
    var hackFileSelectorButton = require_file_selector_button();
    var hackFlex = require_flex();
    var hackOrder = require_order();
    var hackFilter = require_filter();
    var hackGridEnd = require_grid_end();
    var hackAnimation = require_animation();
    var hackFlexFlow = require_flex_flow();
    var hackFlexGrow = require_flex_grow();
    var hackFlexWrap = require_flex_wrap();
    var hackGridArea = require_grid_area();
    var hackPlaceSelf = require_place_self();
    var hackGridStart = require_grid_start();
    var hackAlignSelf = require_align_self();
    var hackAppearance = require_appearance();
    var hackFlexBasis = require_flex_basis();
    var hackMaskBorder = require_mask_border();
    var hackMaskComposite = require_mask_composite();
    var hackAlignItems = require_align_items();
    var hackUserSelect = require_user_select();
    var hackFlexShrink = require_flex_shrink();
    var hackBreakProps = require_break_props();
    var hackWritingMode = require_writing_mode();
    var hackBorderImage = require_border_image();
    var hackAlignContent = require_align_content();
    var hackBorderRadius = require_border_radius();
    var hackBlockLogical = require_block_logical();
    var hackGridTemplate = require_grid_template();
    var hackInlineLogical = require_inline_logical();
    var hackGridRowAlign = require_grid_row_align();
    var hackTransformDecl = require_transform_decl();
    var hackFlexDirection = require_flex_direction();
    var hackImageRendering = require_image_rendering();
    var hackBackdropFilter = require_backdrop_filter();
    var hackBackgroundClip = require_background_clip();
    var hackTextDecoration = require_text_decoration();
    var hackJustifyContent = require_justify_content();
    var hackBackgroundSize = require_background_size();
    var hackGridRowColumn = require_grid_row_column();
    var hackGridRowsColumns = require_grid_rows_columns();
    var hackGridColumnAlign = require_grid_column_align();
    var hackPrintColorAdjust = require_print_color_adjust();
    var hackOverscrollBehavior = require_overscroll_behavior();
    var hackGridTemplateAreas = require_grid_template_areas();
    var hackTextEmphasisPosition = require_text_emphasis_position();
    var hackTextDecorationSkipInk = require_text_decoration_skip_ink();
    var hackGradient = require_gradient();
    var hackIntrinsic = require_intrinsic();
    var hackPixelated = require_pixelated();
    var hackImageSet = require_image_set();
    var hackCrossFade = require_cross_fade();
    var hackDisplayFlex = require_display_flex();
    var hackDisplayGrid = require_display_grid();
    var hackFilterValue = require_filter_value();
    var hackAutofill = require_autofill();
    Selector.hack(hackAutofill);
    Selector.hack(hackFullscreen);
    Selector.hack(hackPlaceholder);
    Selector.hack(hackPlaceholderShown);
    Selector.hack(hackFileSelectorButton);
    Declaration.hack(hackFlex);
    Declaration.hack(hackOrder);
    Declaration.hack(hackFilter);
    Declaration.hack(hackGridEnd);
    Declaration.hack(hackAnimation);
    Declaration.hack(hackFlexFlow);
    Declaration.hack(hackFlexGrow);
    Declaration.hack(hackFlexWrap);
    Declaration.hack(hackGridArea);
    Declaration.hack(hackPlaceSelf);
    Declaration.hack(hackGridStart);
    Declaration.hack(hackAlignSelf);
    Declaration.hack(hackAppearance);
    Declaration.hack(hackFlexBasis);
    Declaration.hack(hackMaskBorder);
    Declaration.hack(hackMaskComposite);
    Declaration.hack(hackAlignItems);
    Declaration.hack(hackUserSelect);
    Declaration.hack(hackFlexShrink);
    Declaration.hack(hackBreakProps);
    Declaration.hack(hackWritingMode);
    Declaration.hack(hackBorderImage);
    Declaration.hack(hackAlignContent);
    Declaration.hack(hackBorderRadius);
    Declaration.hack(hackBlockLogical);
    Declaration.hack(hackGridTemplate);
    Declaration.hack(hackInlineLogical);
    Declaration.hack(hackGridRowAlign);
    Declaration.hack(hackTransformDecl);
    Declaration.hack(hackFlexDirection);
    Declaration.hack(hackImageRendering);
    Declaration.hack(hackBackdropFilter);
    Declaration.hack(hackBackgroundClip);
    Declaration.hack(hackTextDecoration);
    Declaration.hack(hackJustifyContent);
    Declaration.hack(hackBackgroundSize);
    Declaration.hack(hackGridRowColumn);
    Declaration.hack(hackGridRowsColumns);
    Declaration.hack(hackGridColumnAlign);
    Declaration.hack(hackOverscrollBehavior);
    Declaration.hack(hackGridTemplateAreas);
    Declaration.hack(hackPrintColorAdjust);
    Declaration.hack(hackTextEmphasisPosition);
    Declaration.hack(hackTextDecorationSkipInk);
    Value.hack(hackGradient);
    Value.hack(hackIntrinsic);
    Value.hack(hackPixelated);
    Value.hack(hackImageSet);
    Value.hack(hackCrossFade);
    Value.hack(hackDisplayFlex);
    Value.hack(hackDisplayGrid);
    Value.hack(hackFilterValue);
    var declsCache = /* @__PURE__ */ new Map();
    var Prefixes = class {
      constructor(data, browsers, options = {}) {
        this.data = data;
        this.browsers = browsers;
        this.options = options;
        [this.add, this.remove] = this.preprocess(this.select(this.data));
        this.transition = new Transition(this);
        this.processor = new Processor(this);
      }
      cleaner() {
        if (this.cleanerCache) {
          return this.cleanerCache;
        }
        if (this.browsers.selected.length) {
          let empty = new Browsers(this.browsers.data, []);
          this.cleanerCache = new Prefixes(this.data, empty, this.options);
        } else {
          return this;
        }
        return this.cleanerCache;
      }
      select(list) {
        let selected = { add: {}, remove: {} };
        for (let name in list) {
          let data = list[name];
          let add = data.browsers.map((i) => {
            let params = i.split(" ");
            return {
              browser: `${params[0]} ${params[1]}`,
              note: params[2]
            };
          });
          let notes = add.filter((i) => i.note).map((i) => `${this.browsers.prefix(i.browser)} ${i.note}`);
          notes = utils.uniq(notes);
          add = add.filter((i) => this.browsers.isSelected(i.browser)).map((i) => {
            let prefix = this.browsers.prefix(i.browser);
            if (i.note) {
              return `${prefix} ${i.note}`;
            } else {
              return prefix;
            }
          });
          add = this.sort(utils.uniq(add));
          if (this.options.flexbox === "no-2009") {
            add = add.filter((i) => !i.includes("2009"));
          }
          let all = data.browsers.map((i) => this.browsers.prefix(i));
          if (data.mistakes) {
            all = all.concat(data.mistakes);
          }
          all = all.concat(notes);
          all = utils.uniq(all);
          if (add.length) {
            selected.add[name] = add;
            if (add.length < all.length) {
              selected.remove[name] = all.filter((i) => !add.includes(i));
            }
          } else {
            selected.remove[name] = all;
          }
        }
        return selected;
      }
      sort(prefixes) {
        return prefixes.sort((a, b) => {
          let aLength = utils.removeNote(a).length;
          let bLength = utils.removeNote(b).length;
          if (aLength === bLength) {
            return b.length - a.length;
          } else {
            return bLength - aLength;
          }
        });
      }
      preprocess(selected) {
        let add = {
          "selectors": [],
          "@supports": new Supports(Prefixes, this)
        };
        for (let name in selected.add) {
          let prefixes = selected.add[name];
          if (name === "@keyframes" || name === "@viewport") {
            add[name] = new AtRule(name, prefixes, this);
          } else if (name === "@resolution") {
            add[name] = new Resolution(name, prefixes, this);
          } else if (this.data[name].selector) {
            add.selectors.push(Selector.load(name, prefixes, this));
          } else {
            let props = this.data[name].props;
            if (props) {
              let value = Value.load(name, prefixes, this);
              for (let prop of props) {
                if (!add[prop]) {
                  add[prop] = { values: [] };
                }
                add[prop].values.push(value);
              }
            } else {
              let values = add[name] && add[name].values || [];
              add[name] = Declaration.load(name, prefixes, this);
              add[name].values = values;
            }
          }
        }
        let remove = { selectors: [] };
        for (let name in selected.remove) {
          let prefixes = selected.remove[name];
          if (this.data[name].selector) {
            let selector = Selector.load(name, prefixes);
            for (let prefix of prefixes) {
              remove.selectors.push(selector.old(prefix));
            }
          } else if (name === "@keyframes" || name === "@viewport") {
            for (let prefix of prefixes) {
              let prefixed = `@${prefix}${name.slice(1)}`;
              remove[prefixed] = { remove: true };
            }
          } else if (name === "@resolution") {
            remove[name] = new Resolution(name, prefixes, this);
          } else {
            let props = this.data[name].props;
            if (props) {
              let value = Value.load(name, [], this);
              for (let prefix of prefixes) {
                let old = value.old(prefix);
                if (old) {
                  for (let prop of props) {
                    if (!remove[prop]) {
                      remove[prop] = {};
                    }
                    if (!remove[prop].values) {
                      remove[prop].values = [];
                    }
                    remove[prop].values.push(old);
                  }
                }
              }
            } else {
              for (let p of prefixes) {
                let olds = this.decl(name).old(name, p);
                if (name === "align-self") {
                  let a = add[name] && add[name].prefixes;
                  if (a) {
                    if (p === "-webkit- 2009" && a.includes("-webkit-")) {
                      continue;
                    } else if (p === "-webkit-" && a.includes("-webkit- 2009")) {
                      continue;
                    }
                  }
                }
                for (let prefixed of olds) {
                  if (!remove[prefixed]) {
                    remove[prefixed] = {};
                  }
                  remove[prefixed].remove = true;
                }
              }
            }
          }
        }
        return [add, remove];
      }
      decl(prop) {
        if (!declsCache.has(prop)) {
          declsCache.set(prop, Declaration.load(prop));
        }
        return declsCache.get(prop);
      }
      unprefixed(prop) {
        let value = this.normalize(vendor.unprefixed(prop));
        if (value === "flex-direction") {
          value = "flex-flow";
        }
        return value;
      }
      normalize(prop) {
        return this.decl(prop).normalize(prop);
      }
      prefixed(prop, prefix) {
        prop = vendor.unprefixed(prop);
        return this.decl(prop).prefixed(prop, prefix);
      }
      values(type, prop) {
        let data = this[type];
        let global = data["*"] && data["*"].values;
        let values = data[prop] && data[prop].values;
        if (global && values) {
          return utils.uniq(global.concat(values));
        } else {
          return global || values || [];
        }
      }
      group(decl) {
        let rule = decl.parent;
        let index = rule.index(decl);
        let { length } = rule.nodes;
        let unprefixed = this.unprefixed(decl.prop);
        let checker = (step, callback) => {
          index += step;
          while (index >= 0 && index < length) {
            let other = rule.nodes[index];
            if (other.type === "decl") {
              if (step === -1 && other.prop === unprefixed) {
                if (!Browsers.withPrefix(other.value)) {
                  break;
                }
              }
              if (this.unprefixed(other.prop) !== unprefixed) {
                break;
              } else if (callback(other) === true) {
                return true;
              }
              if (step === 1 && other.prop === unprefixed) {
                if (!Browsers.withPrefix(other.value)) {
                  break;
                }
              }
            }
            index += step;
          }
          return false;
        };
        return {
          up(callback) {
            return checker(-1, callback);
          },
          down(callback) {
            return checker(1, callback);
          }
        };
      }
    };
    module.exports = Prefixes;
  }
});

// node_modules/caniuse-lite/data/features/border-radius.js
var require_border_radius2 = __commonJS({
  "node_modules/caniuse-lite/data/features/border-radius.js"(exports, module) {
    module.exports = { A: { A: { "1": "G A B", "2": "K E F JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "257": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB", "289": "zB LC MC", "292": "KC" }, D: { "1": "0 1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "J" }, E: { "1": "0 E F G A B C L M H D QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "J NC 5B", "129": "K OC PC" }, F: { "1": "1 2 3 4 5 6 7 8 9 B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j XC YC vB HC ZC wB", "2": "G VC WC" }, G: { "1": "F D aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "5B" }, H: { "2": "uC" }, I: { "1": "zB J I wC xC yC IC zC 0C", "33": "vC" }, J: { "1": "E A" }, K: { "1": "B C m vB HC wB", "2": "A" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "257": "FD" } }, B: 4, C: "CSS3 Border-radius (rounded corners)" };
  }
});

// node_modules/caniuse-lite/data/features/css-boxshadow.js
var require_css_boxshadow = __commonJS({
  "node_modules/caniuse-lite/data/features/css-boxshadow.js"(exports, module) {
    module.exports = { A: { A: { "1": "G A B", "2": "K E F JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB", "33": "LC MC" }, D: { "1": "1 2 3 4 5 6 7 8 9 A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 J K E F G" }, E: { "1": "K E F G A B C L M H D OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "0", "164": "J NC 5B" }, F: { "1": "1 2 3 4 5 6 7 8 9 B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j XC YC vB HC ZC wB", "2": "G VC WC" }, G: { "1": "F D bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "aC IC", "164": "5B" }, H: { "2": "uC" }, I: { "1": "J I yC IC zC 0C", "164": "zB vC wC xC" }, J: { "1": "A", "33": "E" }, K: { "1": "B C m vB HC wB", "2": "A" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS3 Box-shadow" };
  }
});

// node_modules/caniuse-lite/data/features/css-animation.js
var require_css_animation = __commonJS({
  "node_modules/caniuse-lite/data/features/css-animation.js"(exports, module) {
    module.exports = { A: { A: { "1": "A B", "2": "K E F G JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB J LC MC", "33": "0 K E F G A B C L M H" }, D: { "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "NC 5B", "33": "K E F OC PC QC", "292": "0 J" }, F: { "1": "AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G B VC WC XC YC vB HC ZC", "33": "1 2 3 4 5 6 7 8 9 C H N D O k l" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "F cC dC eC", "164": "5B aC IC bC" }, H: { "2": "uC" }, I: { "1": "I", "33": "J yC IC zC 0C", "164": "zB vC wC xC" }, J: { "33": "E A" }, K: { "1": "m wB", "2": "A B C vB HC" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 5, C: "CSS Animation" };
  }
});

// node_modules/caniuse-lite/data/features/css-transitions.js
var require_css_transitions = __commonJS({
  "node_modules/caniuse-lite/data/features/css-transitions.js"(exports, module) {
    module.exports = { A: { A: { "1": "A B", "2": "K E F G JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC MC", "33": "0 K E F G A B C L M H", "164": "J" }, D: { "1": "6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 J K E F G A B C L M H N D O k l" }, E: { "1": "E F G A B C L M H D PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "K OC", "164": "0 J NC 5B" }, F: { "1": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G VC WC", "33": "C", "164": "B XC YC vB HC ZC" }, G: { "1": "F D dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "cC", "164": "5B aC IC bC" }, H: { "2": "uC" }, I: { "1": "I zC 0C", "33": "zB J vC wC xC yC IC" }, J: { "1": "A", "33": "E" }, K: { "1": "m wB", "33": "C", "164": "A B vB HC" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 5, C: "CSS3 Transitions" };
  }
});

// node_modules/caniuse-lite/data/features/transforms2d.js
var require_transforms2d = __commonJS({
  "node_modules/caniuse-lite/data/features/transforms2d.js"(exports, module) {
    module.exports = { A: { A: { "2": "JC", "8": "K E F", "129": "A B", "161": "G" }, B: { "1": "D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "129": "C L M H N" }, C: { "1": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB", "33": "0 J K E F G A B C L M H LC MC" }, D: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "0 J K E F NC 5B OC PC QC" }, F: { "1": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G VC WC", "33": "1 2 B C H N D O k l XC YC vB HC ZC" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "F 5B aC IC bC cC dC eC" }, H: { "2": "uC" }, I: { "1": "I", "33": "zB J vC wC xC yC IC zC 0C" }, J: { "33": "E A" }, K: { "1": "B C m vB HC wB", "2": "A" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS3 2D Transforms" };
  }
});

// node_modules/caniuse-lite/data/features/transforms3d.js
var require_transforms3d = __commonJS({
  "node_modules/caniuse-lite/data/features/transforms3d.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "132": "A B" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G LC MC", "33": "A B C L M H" }, D: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K E F G A B", "33": "1 2 3 4 5 6 7 8 9 C L M H N D O k l AB BB CB DB EB FB" }, E: { "1": "D 9B xB AC yB BC CC DC EC FC GC UC", "2": "NC 5B", "33": "0 J K E F OC PC QC", "257": "G A B C L M H RC 6B vB wB 7B SC TC 8B" }, F: { "1": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 H N D O k l" }, G: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "33": "F 5B aC IC bC cC dC eC", "257": "fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B" }, H: { "2": "uC" }, I: { "1": "I", "2": "vC wC xC", "33": "zB J yC IC zC 0C" }, J: { "33": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "132": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 5, C: "CSS3 3D Transforms" };
  }
});

// node_modules/caniuse-lite/data/features/css-gradients.js
var require_css_gradients = __commonJS({
  "node_modules/caniuse-lite/data/features/css-gradients.js"(exports, module) {
    module.exports = { A: { A: { "1": "A B", "2": "K E F G JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC", "260": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB", "292": "0 J K E F G A B C L M H MC" }, D: { "1": "6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "1 2 3 4 5 A B C L M H N D O k l", "548": "0 J K E F G" }, E: { "1": "D 9B xB AC yB BC CC DC EC FC GC UC", "2": "NC 5B", "260": "E F G A B C L M H PC QC RC 6B vB wB 7B SC TC 8B", "292": "K OC", "804": "0 J" }, F: { "1": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G B VC WC XC YC", "33": "C ZC", "164": "vB HC" }, G: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "260": "F dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B", "292": "bC cC", "804": "5B aC IC" }, H: { "2": "uC" }, I: { "1": "I zC 0C", "33": "J yC IC", "548": "zB vC wC xC" }, J: { "1": "A", "548": "E" }, K: { "1": "m wB", "2": "A B", "33": "C", "164": "vB HC" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS Gradients" };
  }
});

// node_modules/caniuse-lite/data/features/css3-boxsizing.js
var require_css3_boxsizing = __commonJS({
  "node_modules/caniuse-lite/data/features/css3-boxsizing.js"(exports, module) {
    module.exports = { A: { A: { "1": "F G A B", "8": "K E JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 KC zB J K E F G A B C L M H N D O k l LC MC" }, D: { "1": "1 2 3 4 5 6 7 8 9 A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 J K E F G" }, E: { "1": "K E F G A B C L M H D OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "0 J NC 5B" }, F: { "1": "1 2 3 4 5 6 7 8 9 B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j VC WC XC YC vB HC ZC wB", "2": "G" }, G: { "1": "F D bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "5B aC IC" }, H: { "1": "uC" }, I: { "1": "J I yC IC zC 0C", "33": "zB vC wC xC" }, J: { "1": "A", "33": "E" }, K: { "1": "A B C m vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 5, C: "CSS3 Box-sizing" };
  }
});

// node_modules/caniuse-lite/data/features/css-filters.js
var require_css_filters = __commonJS({
  "node_modules/caniuse-lite/data/features/css-filters.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "1028": "L M H N D O", "1346": "C" }, C: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC", "196": "EB", "516": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB MC" }, D: { "1": "XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K E F G A B C L M H N D", "33": "1 2 3 4 5 6 7 8 9 O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB" }, E: { "1": "A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J NC 5B OC", "33": "K E F G PC QC" }, F: { "1": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB" }, G: { "1": "D gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "33": "F cC dC eC fC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "33": "zC 0C" }, J: { "2": "E", "33": "A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "33": "J 1C 2C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 5, C: "CSS Filter Effects" };
  }
});

// node_modules/caniuse-lite/data/features/css-filter-function.js
var require_css_filter_function = __commonJS({
  "node_modules/caniuse-lite/data/features/css-filter-function.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, D: { "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E F NC 5B OC PC QC", "33": "G" }, F: { "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j VC WC XC YC vB HC ZC wB" }, G: { "1": "D hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC", "33": "fC gC" }, H: { "2": "uC" }, I: { "2": "zB J I vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C m vB HC wB" }, L: { "2": "I" }, M: { "2": "uB" }, N: { "2": "A B" }, O: { "2": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "2": "7B" }, R: { "2": "ED" }, S: { "2": "FD GD" } }, B: 5, C: "CSS filter() function" };
  }
});

// node_modules/caniuse-lite/data/features/css-backdrop-filter.js
var require_css_backdrop_filter = __commonJS({
  "node_modules/caniuse-lite/data/features/css-backdrop-filter.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N", "257": "D O" }, C: { "1": "p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB LC MC", "578": "mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o" }, D: { "1": "rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB", "194": "RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB" }, E: { "2": "0 J K E F NC 5B OC PC QC", "33": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "1": "gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB VC WC XC YC vB HC ZC wB", "194": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB" }, G: { "2": "F 5B aC IC bC cC dC eC", "33": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 7C 8C 9C AD yB BD CD DD", "2": "J", "194": "1C 2C 3C 4C 5C 6B 6C" }, Q: { "2": "7B" }, R: { "1": "ED" }, S: { "2": "FD GD" } }, B: 7, C: "CSS Backdrop Filter" };
  }
});

// node_modules/caniuse-lite/data/features/css-element-function.js
var require_css_element_function = __commonJS({
  "node_modules/caniuse-lite/data/features/css-element-function.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "164": "KC zB LC MC" }, D: { "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "2": "0 J K E F G A B C L M H D NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j VC WC XC YC vB HC ZC wB" }, G: { "2": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "2": "zB J I vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C m vB HC wB" }, L: { "2": "I" }, M: { "33": "uB" }, N: { "2": "A B" }, O: { "2": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "2": "7B" }, R: { "2": "ED" }, S: { "33": "FD GD" } }, B: 5, C: "CSS element() function" };
  }
});

// node_modules/caniuse-lite/data/features/multicolumn.js
var require_multicolumn = __commonJS({
  "node_modules/caniuse-lite/data/features/multicolumn.js"(exports, module) {
    module.exports = { A: { A: { "1": "A B", "2": "K E F G JC" }, B: { "1": "C L M H N D O", "516": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "132": "WB XB YB ZB aB bB cB 0B dB 1B eB fB gB", "164": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB LC MC", "516": "hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a", "1028": "b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, D: { "420": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB", "516": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "A B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "132": "G RC", "164": "E F QC", "420": "0 J K NC 5B OC PC" }, F: { "1": "C vB HC ZC wB", "2": "G B VC WC XC YC", "420": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB", "516": "HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "1": "D hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "132": "fC gC", "164": "F dC eC", "420": "5B aC IC bC cC" }, H: { "1": "uC" }, I: { "420": "zB J vC wC xC yC IC zC 0C", "516": "I" }, J: { "420": "E A" }, K: { "1": "C vB HC wB", "2": "A B", "516": "m" }, L: { "516": "I" }, M: { "1028": "uB" }, N: { "1": "A B" }, O: { "516": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "420": "J" }, Q: { "516": "7B" }, R: { "516": "ED" }, S: { "164": "FD GD" } }, B: 4, C: "CSS3 Multiple column layout" };
  }
});

// node_modules/caniuse-lite/data/features/user-select-none.js
var require_user_select_none = __commonJS({
  "node_modules/caniuse-lite/data/features/user-select-none.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "33": "A B" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "33": "C L M H N D O" }, C: { "1": "lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB LC MC" }, D: { "1": "YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB" }, E: { "1": "UC", "33": "0 J K E F G A B C L M H D NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC" }, F: { "1": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB" }, G: { "33": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "33": "zB J vC wC xC yC IC zC 0C" }, J: { "33": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "33": "A B" }, O: { "1": "xB" }, P: { "1": "k l 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "33": "J 1C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "33": "FD" } }, B: 5, C: "CSS user-select: none" };
  }
});

// node_modules/caniuse-lite/data/features/flexbox.js
var require_flexbox = __commonJS({
  "node_modules/caniuse-lite/data/features/flexbox.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "1028": "B", "1316": "A" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "164": "0 1 KC zB J K E F G A B C L M H N D O k l LC MC", "516": "2 3 4 5 6 7" }, D: { "1": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "2 3 4 5 6 7 8 l", "164": "0 1 J K E F G A B C L M H N D O k" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "E F PC QC", "164": "0 J K NC 5B OC" }, F: { "1": "1 2 3 4 5 6 7 8 9 D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G B C VC WC XC YC vB HC ZC", "33": "H N" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "F dC eC", "164": "5B aC IC bC cC" }, H: { "1": "uC" }, I: { "1": "I zC 0C", "164": "zB J vC wC xC yC IC" }, J: { "1": "A", "164": "E" }, K: { "1": "m wB", "2": "A B C vB HC" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "B", "292": "A" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS Flexible Box Layout Module" };
  }
});

// node_modules/caniuse-lite/data/features/calc.js
var require_calc = __commonJS({
  "node_modules/caniuse-lite/data/features/calc.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F JC", "260": "G", "516": "A B" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC MC", "33": "0 J K E F G A B C L M H" }, D: { "1": "6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K E F G A B C L M H N D O", "33": "1 2 3 4 5 k l" }, E: { "1": "E F G A B C L M H D PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J NC 5B OC", "33": "K" }, F: { "1": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB" }, G: { "1": "F D dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "33": "cC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "132": "zC 0C" }, J: { "1": "A", "2": "E" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "calc() as CSS unit value" };
  }
});

// node_modules/caniuse-lite/data/features/background-img-opts.js
var require_background_img_opts = __commonJS({
  "node_modules/caniuse-lite/data/features/background-img-opts.js"(exports, module) {
    module.exports = { A: { A: { "1": "G A B", "2": "K E F JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC", "36": "MC" }, D: { "1": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "516": "0 J K E F G A B C L M" }, E: { "1": "E F G A B C L M H D QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "772": "0 J K NC 5B OC PC" }, F: { "1": "1 2 3 4 5 6 7 8 9 B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j XC YC vB HC ZC wB", "2": "G VC", "36": "WC" }, G: { "1": "F D dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "4": "5B aC IC cC", "516": "bC" }, H: { "132": "uC" }, I: { "1": "I zC 0C", "36": "vC", "516": "zB J yC IC", "548": "wC xC" }, J: { "1": "E A" }, K: { "1": "A B C m vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS3 Background-image options" };
  }
});

// node_modules/caniuse-lite/data/features/background-clip-text.js
var require_background_clip_text = __commonJS({
  "node_modules/caniuse-lite/data/features/background-clip-text.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "H N D O", "33": "C L M P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB LC MC" }, D: { "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "M H D SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "16": "NC 5B", "33": "0 J K E F G A B C L OC PC QC RC 6B vB wB 7B" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "1": "D rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "16": "5B aC IC bC", "33": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC" }, H: { "2": "uC" }, I: { "16": "zB vC wC xC", "33": "J I yC IC zC 0C" }, J: { "33": "E A" }, K: { "16": "A B C vB HC wB", "33": "m" }, L: { "33": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "33": "xB" }, P: { "33": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "33": "7B" }, R: { "33": "ED" }, S: { "1": "FD GD" } }, B: 7, C: "Background-clip: text" };
  }
});

// node_modules/caniuse-lite/data/features/font-feature.js
var require_font_feature = __commonJS({
  "node_modules/caniuse-lite/data/features/font-feature.js"(exports, module) {
    module.exports = { A: { A: { "1": "A B", "2": "K E F G JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC MC", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB", "164": "0 J K E F G A B C L M" }, D: { "1": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K E F G A B C L M H", "33": "2 3 4 5 6 7 8 9 l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB", "292": "1 N D O k" }, E: { "1": "A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "E F G NC 5B PC QC", "4": "0 J K OC" }, F: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB" }, G: { "1": "D gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "F dC eC fC", "4": "5B aC IC bC cC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "33": "zC 0C" }, J: { "2": "E", "33": "A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "33": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 2, C: "CSS font-feature-settings" };
  }
});

// node_modules/caniuse-lite/data/features/font-kerning.js
var require_font_kerning = __commonJS({
  "node_modules/caniuse-lite/data/features/font-kerning.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 KC zB J K E F G A B C L M H N D O k l LC MC", "194": "4 5 6 7 8 9 AB BB CB DB" }, D: { "1": "DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 J K E F G A B C L M H N D O k l", "33": "9 AB BB CB" }, E: { "1": "A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K NC 5B OC PC", "33": "E F G QC" }, F: { "1": "2 3 4 5 6 7 8 9 k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C H VC WC XC YC vB HC ZC wB", "33": "1 N D O" }, G: { "1": "D lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC dC", "33": "F eC fC gC hC iC jC kC" }, H: { "2": "uC" }, I: { "1": "I 0C", "2": "zB J vC wC xC yC IC", "33": "zC" }, J: { "2": "E", "33": "A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS3 font-kerning" };
  }
});

// node_modules/caniuse-lite/data/features/border-image.js
var require_border_image2 = __commonJS({
  "node_modules/caniuse-lite/data/features/border-image.js"(exports, module) {
    module.exports = { A: { A: { "1": "B", "2": "K E F G A JC" }, B: { "1": "M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "129": "C L" }, C: { "1": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB", "260": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB", "804": "0 J K E F G A B C L M LC MC" }, D: { "1": "aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "260": "VB WB XB YB ZB", "388": "AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB", "1412": "1 2 3 4 5 6 7 8 9 H N D O k l", "1956": "0 J K E F G A B C L M" }, E: { "1": "D 9B xB AC yB BC CC DC EC FC GC UC", "129": "A B C L M H RC 6B vB wB 7B SC TC 8B", "1412": "K E F G PC QC", "1956": "0 J NC 5B OC" }, F: { "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G VC WC", "260": "IB JB KB LB MB", "388": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB", "1796": "XC YC", "1828": "B C vB HC ZC wB" }, G: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "129": "gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B", "1412": "F cC dC eC fC", "1956": "5B aC IC bC" }, H: { "1828": "uC" }, I: { "1": "I", "388": "zC 0C", "1956": "zB J vC wC xC yC IC" }, J: { "1412": "A", "1924": "E" }, K: { "1": "m", "2": "A", "1828": "B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "B", "2": "A" }, O: { "1": "xB" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "260": "1C 2C", "388": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "260": "FD" } }, B: 4, C: "CSS3 Border images" };
  }
});

// node_modules/caniuse-lite/data/features/css-selection.js
var require_css_selection = __commonJS({
  "node_modules/caniuse-lite/data/features/css-selection.js"(exports, module) {
    module.exports = { A: { A: { "1": "G A B", "2": "K E F JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B LC MC" }, D: { "1": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "0 J K E F G A B C L M H D NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "1": "1 2 3 4 5 6 7 8 9 B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j VC WC XC YC vB HC ZC wB", "2": "G" }, G: { "2": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I zC 0C", "2": "zB J vC wC xC yC IC" }, J: { "1": "A", "2": "E" }, K: { "1": "C m HC wB", "16": "A B vB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "33": "FD" } }, B: 5, C: "::selection CSS pseudo-element" };
  }
});

// node_modules/caniuse-lite/data/features/css-placeholder.js
var require_css_placeholder = __commonJS({
  "node_modules/caniuse-lite/data/features/css-placeholder.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "36": "C L M H N D O" }, C: { "1": "VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "1 2 3 4 5 6 7 8 9 k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB", "130": "0 KC zB J K E F G A B C L M H N D O LC MC" }, D: { "1": "bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "36": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB" }, E: { "1": "B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "J NC 5B", "36": "0 K E F G A OC PC QC RC" }, F: { "1": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "36": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB" }, G: { "1": "D iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC", "36": "F IC bC cC dC eC fC gC hC" }, H: { "2": "uC" }, I: { "1": "I", "36": "zB J vC wC xC yC IC zC 0C" }, J: { "36": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "36": "A B" }, O: { "1": "xB" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "36": "J 1C 2C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "33": "FD" } }, B: 5, C: "::placeholder CSS pseudo-element" };
  }
});

// node_modules/caniuse-lite/data/features/css-placeholder-shown.js
var require_css_placeholder_shown = __commonJS({
  "node_modules/caniuse-lite/data/features/css-placeholder-shown.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "292": "A B" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC MC", "164": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB" }, D: { "1": "RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E F NC 5B OC PC QC" }, F: { "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB VC WC XC YC vB HC ZC wB" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "164": "FD" } }, B: 5, C: ":placeholder-shown CSS pseudo-class" };
  }
});

// node_modules/caniuse-lite/data/features/css-hyphens.js
var require_css_hyphens = __commonJS({
  "node_modules/caniuse-lite/data/features/css-hyphens.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "33": "A B" }, B: { "1": "r s t u v w x y z I", "33": "C L M H N D O", "132": "P Q R S T U V W", "260": "X Y Z a b c d e f g h i j n o p q" }, C: { "1": "NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J LC MC", "33": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB" }, D: { "1": "X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB", "132": "ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W" }, E: { "1": "UC", "2": "0 J NC 5B", "33": "K E F G A B C L M H D OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC" }, F: { "1": "a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB VC WC XC YC vB HC ZC wB", "132": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z" }, G: { "2": "5B aC", "33": "F D IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J", "132": "1C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS Hyphenation" };
  }
});

// node_modules/caniuse-lite/data/features/fullscreen.js
var require_fullscreen2 = __commonJS({
  "node_modules/caniuse-lite/data/features/fullscreen.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A JC", "548": "B" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "516": "C L M H N D O" }, C: { "1": "gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G LC MC", "676": "1 2 3 4 5 6 7 8 9 A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB", "1700": "RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB" }, D: { "1": "nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K E F G A B C L M", "676": "1 H N D O", "804": "2 3 4 5 6 7 8 9 k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB" }, E: { "1": "D EC FC GC UC", "2": "0 J NC 5B", "548": "9B xB AC yB BC CC DC", "676": "OC", "804": "K E F G A B C L M H PC QC RC 6B vB wB 7B SC TC 8B" }, F: { "1": "gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G B C VC WC XC YC vB HC ZC", "804": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB" }, G: { "2": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC", "2052": "D lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "2": "zB J I vC wC xC yC IC zC 0C" }, J: { "2": "E", "292": "A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A", "548": "B" }, O: { "1": "xB" }, P: { "1": "k l 6B 6C 7C 8C 9C AD yB BD CD DD", "804": "J 1C 2C 3C 4C 5C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 1, C: "Full Screen API" };
  }
});

// node_modules/caniuse-lite/data/features/css-file-selector-button.js
var require_css_file_selector_button = __commonJS({
  "node_modules/caniuse-lite/data/features/css-file-selector-button.js"(exports, module) {
    module.exports = { A: { D: { "1": "Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X" }, L: { "1": "I" }, B: { "1": "Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "33": "C L M H N D O P Q R S T U V W X" }, C: { "1": "2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R LC MC" }, M: { "1": "uB" }, A: { "2": "K E F G JC", "33": "A B" }, F: { "1": "qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "H D SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "UC", "33": "0 J K E F G A B C L M NC 5B OC PC QC RC 6B vB wB 7B" }, G: { "1": "D sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC" }, P: { "1": "k l AD yB BD CD DD", "33": "J 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "33": "zC 0C" } }, B: 6, C: "::file-selector-button CSS pseudo-element" };
  }
});

// node_modules/caniuse-lite/data/features/css-autofill.js
var require_css_autofill = __commonJS({
  "node_modules/caniuse-lite/data/features/css-autofill.js"(exports, module) {
    module.exports = { A: { D: { "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, L: { "33": "I" }, B: { "2": "C L M H N D O", "33": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U LC MC" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, K: { "2": "A B C vB HC wB", "33": "m" }, E: { "1": "H D TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "UC", "33": "0 J K E F G A B C L M NC 5B OC PC QC RC 6B vB wB 7B SC" }, G: { "1": "D tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC" }, P: { "33": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, I: { "2": "zB J vC wC xC yC IC", "33": "I zC 0C" } }, B: 6, C: ":autofill CSS pseudo-class" };
  }
});

// node_modules/caniuse-lite/data/features/css3-tabsize.js
var require_css3_tabsize = __commonJS({
  "node_modules/caniuse-lite/data/features/css3-tabsize.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC MC", "33": "XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z", "164": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB" }, D: { "1": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 J K E F G A B C L M H N D O k", "132": "2 3 4 5 6 7 8 9 l AB BB CB DB EB FB GB HB IB JB KB LB" }, E: { "1": "M H D 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K NC 5B OC", "132": "E F G A B C L PC QC RC 6B vB wB" }, F: { "1": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G VC WC XC", "132": "1 2 3 4 5 6 7 8 H N D O k l", "164": "B C YC vB HC ZC wB" }, G: { "1": "D qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC", "132": "F dC eC fC gC hC iC jC kC lC mC nC oC pC" }, H: { "164": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "132": "zC 0C" }, J: { "132": "E A" }, K: { "1": "m", "2": "A", "164": "B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "164": "FD GD" } }, B: 4, C: "CSS3 tab-size" };
  }
});

// node_modules/caniuse-lite/data/features/intrinsic-width.js
var require_intrinsic_width = __commonJS({
  "node_modules/caniuse-lite/data/features/intrinsic-width.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D O", "1025": "d e f g h i j n o p q r s t u v w x y z I", "1537": "P Q R S T U V W X Y Z a b c" }, C: { "2": "KC", "932": "0 1 2 3 4 5 6 7 8 9 zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB LC MC", "2308": "iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, D: { "2": "0 1 J K E F G A B C L M H N D O k l", "545": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB", "1025": "d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "1537": "QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c" }, E: { "1": "D yB BC CC DC EC FC GC UC", "2": "0 J K NC 5B OC", "516": "B C L M H vB wB 7B SC TC 8B 9B xB AC", "548": "G A RC 6B", "676": "E F PC QC" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "513": "EB", "545": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB", "1025": "e f g h i j", "1537": "DB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d" }, G: { "1": "D yB BC CC DC EC FC GC", "2": "5B aC IC bC cC", "516": "rC sC tC 8B 9B xB AC", "548": "fC gC hC iC jC kC lC mC nC oC pC qC", "676": "F dC eC" }, H: { "2": "uC" }, I: { "2": "zB J vC wC xC yC IC", "545": "zC 0C", "1025": "I" }, J: { "2": "E", "545": "A" }, K: { "2": "A B C vB HC wB", "1025": "m" }, L: { "1025": "I" }, M: { "2308": "uB" }, N: { "2": "A B" }, O: { "1537": "xB" }, P: { "545": "J", "1025": "k l BD CD DD", "1537": "1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB" }, Q: { "1537": "7B" }, R: { "1537": "ED" }, S: { "932": "FD", "2308": "GD" } }, B: 5, C: "Intrinsic & Extrinsic Sizing" };
  }
});

// node_modules/caniuse-lite/data/features/css-width-stretch.js
var require_css_width_stretch = __commonJS({
  "node_modules/caniuse-lite/data/features/css-width-stretch.js"(exports, module) {
    module.exports = { A: { D: { "2": "0 1 J K E F G A B C L M H N D O k l", "33": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, L: { "33": "I" }, B: { "2": "C L M H N D O", "33": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "2": "KC", "33": "0 1 2 3 4 5 6 7 8 9 zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, M: { "33": "uB" }, A: { "2": "K E F G A B JC" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, K: { "2": "A B C vB HC wB", "33": "m" }, E: { "2": "0 J K NC 5B OC PC UC", "33": "E F G A B C L M H D QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC" }, G: { "2": "5B aC IC bC cC", "33": "F D dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, P: { "2": "J", "33": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, I: { "2": "zB J vC wC xC yC IC", "33": "I zC 0C" } }, B: 6, C: "width: stretch property" };
  }
});

// node_modules/caniuse-lite/data/features/css3-cursors-newer.js
var require_css3_cursors_newer = __commonJS({
  "node_modules/caniuse-lite/data/features/css3-cursors-newer.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 KC zB J K E F G A B C L M H N D O k l LC MC" }, D: { "1": "HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "0 J K E F NC 5B OC PC QC" }, F: { "1": "4 5 6 7 8 9 C AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j ZC wB", "2": "G B VC WC XC YC vB HC", "33": "1 2 3 H N D O k l" }, G: { "2": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "33": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "2": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "2": "FD GD" } }, B: 2, C: "CSS3 Cursors: zoom-in & zoom-out" };
  }
});

// node_modules/caniuse-lite/data/features/css3-cursors-grab.js
var require_css3_cursors_grab = __commonJS({
  "node_modules/caniuse-lite/data/features/css3-cursors-grab.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M" }, C: { "1": "7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 KC zB J K E F G A B C L M H N D O k l LC MC" }, D: { "1": "kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB" }, E: { "1": "B C L M H D vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "0 J K E F G A NC 5B OC PC QC RC 6B" }, F: { "1": "C ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j ZC wB", "2": "G B VC WC XC YC vB HC", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB" }, G: { "2": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "33": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "2": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "2": "FD GD" } }, B: 2, C: "CSS grab & grabbing cursors" };
  }
});

// node_modules/caniuse-lite/data/features/css-sticky.js
var require_css_sticky = __commonJS({
  "node_modules/caniuse-lite/data/features/css-sticky.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H", "1028": "P Q R S T U V W X Y Z", "4100": "N D O" }, C: { "1": "0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 KC zB J K E F G A B C L M H N D O k l LC MC", "194": "6 7 8 9 AB BB", "516": "CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB" }, D: { "1": "a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 J K E F G A B C L M H N D O k l HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB", "322": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB WB XB YB ZB", "1028": "aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z" }, E: { "1": "L M H D 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K NC 5B OC", "33": "F G A B C QC RC 6B vB wB", "2084": "E PC" }, F: { "1": "tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB VC WC XC YC vB HC ZC wB", "322": "JB KB LB", "1028": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB" }, G: { "1": "D nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "33": "F eC fC gC hC iC jC kC lC mC", "2084": "cC dC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C" }, Q: { "1028": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "516": "FD" } }, B: 5, C: "CSS position:sticky" };
  }
});

// node_modules/caniuse-lite/data/features/pointer.js
var require_pointer = __commonJS({
  "node_modules/caniuse-lite/data/features/pointer.js"(exports, module) {
    module.exports = { A: { A: { "1": "B", "2": "K E F G JC", "164": "A" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J LC MC", "8": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB", "328": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB" }, D: { "1": "ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 J K E F G A B C L M H N D O k l", "8": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB", "584": "WB XB YB" }, E: { "1": "L M H D 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K NC 5B OC", "8": "E F G A B C PC QC RC 6B vB", "1096": "wB" }, F: { "1": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "8": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB", "584": "JB KB LB" }, G: { "1": "D oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "8": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC", "6148": "nC" }, H: { "2": "uC" }, I: { "1": "I", "8": "zB J vC wC xC yC IC zC 0C" }, J: { "8": "E A" }, K: { "1": "m", "2": "A", "8": "B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "B", "36": "A" }, O: { "1": "xB" }, P: { "1": "k l 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "1C", "8": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "328": "FD" } }, B: 2, C: "Pointer events" };
  }
});

// node_modules/caniuse-lite/data/features/text-decoration.js
var require_text_decoration2 = __commonJS({
  "node_modules/caniuse-lite/data/features/text-decoration.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D O", "2052": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "2": "0 KC zB J LC MC", "1028": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "1060": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB" }, D: { "2": "0 1 2 3 4 5 J K E F G A B C L M H N D O k l", "226": "6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB", "2052": "bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "2": "0 J K E NC 5B OC PC", "772": "L M H D wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "804": "F G A B C RC 6B vB", "1316": "QC" }, F: { "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB VC WC XC YC vB HC ZC wB", "226": "FB GB HB IB JB KB LB MB NB", "2052": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "2": "5B aC IC bC cC dC", "292": "F D eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C vB HC wB", "2052": "m" }, L: { "2052": "I" }, M: { "1028": "uB" }, N: { "2": "A B" }, O: { "2052": "xB" }, P: { "2": "J 1C 2C", "2052": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "2052": "7B" }, R: { "2052": "ED" }, S: { "1028": "FD GD" } }, B: 4, C: "text-decoration styling" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-text-decoration-shorthand.js
var require_mdn_text_decoration_shorthand = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-text-decoration-shorthand.js"(exports, module) {
    module.exports = { A: { D: { "1": "bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J LC MC" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB VC WC XC YC vB HC ZC wB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "2": "0 J K E NC 5B OC PC QC UC", "33": "F G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC" }, G: { "2": "5B aC IC bC cC dC", "33": "F D eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C 2C" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "text-decoration shorthand property" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-text-decoration-color.js
var require_mdn_text_decoration_color = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-text-decoration-color.js"(exports, module) {
    module.exports = { A: { D: { "1": "bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J LC MC", "33": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB VC WC XC YC vB HC ZC wB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "L M H D wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "0 J K E NC 5B OC PC QC UC", "33": "F G A B C RC 6B vB" }, G: { "1": "D mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC dC", "33": "F eC fC gC hC iC jC kC lC" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C 2C" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "text-decoration-color property" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-text-decoration-line.js
var require_mdn_text_decoration_line = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-text-decoration-line.js"(exports, module) {
    module.exports = { A: { D: { "1": "bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J LC MC", "33": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB VC WC XC YC vB HC ZC wB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "L M H D wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "0 J K E NC 5B OC PC QC UC", "33": "F G A B C RC 6B vB" }, G: { "1": "D mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC dC", "33": "F eC fC gC hC iC jC kC lC" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C 2C" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "text-decoration-line property" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-text-decoration-style.js
var require_mdn_text_decoration_style = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-text-decoration-style.js"(exports, module) {
    module.exports = { A: { D: { "1": "bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J LC MC", "33": "1 2 3 4 5 6 7 8 9 K E F G A B C L M H N D O k l AB BB CB DB EB FB" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB VC WC XC YC vB HC ZC wB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "L M H D wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "0 J K E NC 5B OC PC QC UC", "33": "F G A B C RC 6B vB" }, G: { "1": "D mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC dC", "33": "F eC fC gC hC iC jC kC lC" }, P: { "1": "k l 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C 2C" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "text-decoration-style property" };
  }
});

// node_modules/caniuse-lite/data/features/text-size-adjust.js
var require_text_size_adjust = __commonJS({
  "node_modules/caniuse-lite/data/features/text-size-adjust.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "33": "C L M H N D O" }, C: { "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, D: { "1": "YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB", "258": "6" }, E: { "2": "0 J K E F G A B C L M H D NC 5B PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "258": "OC" }, F: { "1": "NB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB OB VC WC XC YC vB HC ZC wB" }, G: { "2": "5B aC IC", "33": "F D bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "33": "uB" }, N: { "161": "A B" }, O: { "1": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "2": "FD GD" } }, B: 7, C: "CSS text-size-adjust" };
  }
});

// node_modules/caniuse-lite/data/features/css-masks.js
var require_css_masks = __commonJS({
  "node_modules/caniuse-lite/data/features/css-masks.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N", "164": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "3138": "D", "12292": "O" }, C: { "1": "XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB", "260": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB LC MC" }, D: { "164": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "D 9B xB AC yB BC CC DC EC FC GC UC", "2": "NC 5B", "164": "0 J K E F G A B C L M H OC PC QC RC 6B vB wB 7B SC TC 8B" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "164": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "164": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B" }, H: { "2": "uC" }, I: { "164": "I zC 0C", "676": "zB J vC wC xC yC IC" }, J: { "164": "E A" }, K: { "2": "A B C vB HC wB", "164": "m" }, L: { "164": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "164": "xB" }, P: { "164": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "164": "7B" }, R: { "164": "ED" }, S: { "1": "GD", "260": "FD" } }, B: 4, C: "CSS Masks" };
  }
});

// node_modules/caniuse-lite/data/features/css-clip-path.js
var require_css_clip_path = __commonJS({
  "node_modules/caniuse-lite/data/features/css-clip-path.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D", "260": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "3138": "O" }, C: { "1": "YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB", "132": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB LC MC", "644": "RB SB TB UB VB WB XB" }, D: { "2": "0 1 2 3 J K E F G A B C L M H N D O k l", "260": "ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "292": "4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB" }, E: { "2": "0 J K NC 5B OC PC", "260": "M H D 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "292": "E F G A B C L QC RC 6B vB wB" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "260": "MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "292": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB" }, G: { "2": "5B aC IC bC cC", "260": "D nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "292": "F dC eC fC gC hC iC jC kC lC mC" }, H: { "2": "uC" }, I: { "2": "zB J vC wC xC yC IC", "260": "I", "292": "zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C vB HC wB", "260": "m" }, L: { "260": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "260": "xB" }, P: { "292": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "260": "7B" }, R: { "260": "ED" }, S: { "1": "GD", "644": "FD" } }, B: 4, C: "CSS clip-path property (for HTML)" };
  }
});

// node_modules/caniuse-lite/data/features/css-boxdecorationbreak.js
var require_css_boxdecorationbreak = __commonJS({
  "node_modules/caniuse-lite/data/features/css-boxdecorationbreak.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D O", "164": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB LC MC" }, D: { "2": "0 1 J K E F G A B C L M H N D O k l", "164": "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "2": "0 J K NC 5B OC", "164": "E F G A B C L M H D PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "2": "G VC WC XC YC", "129": "B C vB HC ZC wB", "164": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "2": "5B aC IC bC cC", "164": "F D dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "132": "uC" }, I: { "2": "zB J vC wC xC yC IC", "164": "I zC 0C" }, J: { "2": "E", "164": "A" }, K: { "2": "A", "129": "B C vB HC wB", "164": "m" }, L: { "164": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "164": "xB" }, P: { "164": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "164": "7B" }, R: { "164": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS box-decoration-break" };
  }
});

// node_modules/caniuse-lite/data/features/object-fit.js
var require_object_fit = __commonJS({
  "node_modules/caniuse-lite/data/features/object-fit.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H", "260": "N D O" }, C: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB LC MC" }, D: { "1": "CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB" }, E: { "1": "A B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E NC 5B OC PC", "132": "F G QC RC" }, F: { "1": "1 2 3 4 5 6 7 8 9 k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G H N D O VC WC XC", "33": "B C YC vB HC ZC wB" }, G: { "1": "D hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC dC", "132": "F eC fC gC" }, H: { "33": "uC" }, I: { "1": "I 0C", "2": "zB J vC wC xC yC IC zC" }, J: { "2": "E A" }, K: { "1": "m", "2": "A", "33": "B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS3 object-fit/object-position" };
  }
});

// node_modules/caniuse-lite/data/features/css-shapes.js
var require_css_shapes = __commonJS({
  "node_modules/caniuse-lite/data/features/css-shapes.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB LC MC", "322": "VB WB XB YB ZB aB bB cB 0B dB 1B" }, D: { "1": "HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB", "194": "EB FB GB" }, E: { "1": "B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E NC 5B OC PC", "33": "F G A QC RC" }, F: { "1": "4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 G B C H N D O k l VC WC XC YC vB HC ZC wB" }, G: { "1": "D iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC dC", "33": "F eC fC gC hC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "2": "FD" } }, B: 4, C: "CSS Shapes Level 1" };
  }
});

// node_modules/caniuse-lite/data/features/text-overflow.js
var require_text_overflow = __commonJS({
  "node_modules/caniuse-lite/data/features/text-overflow.js"(exports, module) {
    module.exports = { A: { A: { "1": "K E F G A B", "2": "JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "1 2 3 4 5 6 7 8 9 E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "8": "0 KC zB J K LC MC" }, D: { "1": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "0 J K E F G A B C L M H D NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "1": "1 2 3 4 5 6 7 8 9 B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j vB HC ZC wB", "33": "G VC WC XC YC" }, G: { "1": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "1": "uC" }, I: { "1": "zB J I vC wC xC yC IC zC 0C" }, J: { "1": "E A" }, K: { "1": "m wB", "33": "A B C vB HC" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "1": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 2, C: "CSS3 Text-overflow" };
  }
});

// node_modules/caniuse-lite/data/features/css-deviceadaptation.js
var require_css_deviceadaptation = __commonJS({
  "node_modules/caniuse-lite/data/features/css-deviceadaptation.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "164": "A B" }, B: { "66": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "164": "C L M H N D O" }, C: { "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, D: { "2": "0 1 2 3 4 5 6 7 8 J K E F G A B C L M H N D O k l", "66": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "2": "0 J K E F G A B C L M H D NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB VC WC XC YC vB HC ZC wB", "66": "KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "2": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "292": "uC" }, I: { "2": "zB J I vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "2": "A m", "292": "B C vB HC wB" }, L: { "2": "I" }, M: { "2": "uB" }, N: { "164": "A B" }, O: { "2": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "66": "7B" }, R: { "2": "ED" }, S: { "2": "FD GD" } }, B: 5, C: "CSS Device Adaptation" };
  }
});

// node_modules/caniuse-lite/data/features/css-media-resolution.js
var require_css_media_resolution = __commonJS({
  "node_modules/caniuse-lite/data/features/css-media-resolution.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F JC", "132": "G A B" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "1028": "C L M H N D O" }, C: { "1": "eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB", "260": "0 J K E F G A B C L M H LC MC", "1028": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B" }, D: { "1": "kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "548": "0 1 2 3 4 5 6 7 8 J K E F G A B C L M H N D O k l", "1028": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB" }, E: { "1": "D yB BC CC DC EC FC GC UC", "2": "NC 5B", "548": "0 J K E F G A B C L M H OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC" }, F: { "1": "ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB", "2": "G", "548": "B C VC WC XC YC vB HC ZC", "1028": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB" }, G: { "1": "D yB BC CC DC EC FC GC", "16": "5B", "548": "F aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC" }, H: { "132": "uC" }, I: { "1": "I", "16": "vC wC", "548": "zB J xC yC IC", "1028": "zC 0C" }, J: { "548": "E A" }, K: { "1": "m wB", "548": "A B C vB HC" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "132": "A B" }, O: { "1": "xB" }, P: { "1": "k l 6B 6C 7C 8C 9C AD yB BD CD DD", "1028": "J 1C 2C 3C 4C 5C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "Media Queries: resolution feature" };
  }
});

// node_modules/caniuse-lite/data/features/css-text-align-last.js
var require_css_text_align_last = __commonJS({
  "node_modules/caniuse-lite/data/features/css-text-align-last.js"(exports, module) {
    module.exports = { A: { A: { "132": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "4": "C L M H N D O" }, C: { "1": "TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G A B LC MC", "33": "1 2 3 4 5 6 7 8 9 C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB" }, D: { "1": "RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB", "322": "FB GB HB IB JB KB LB MB NB OB PB QB" }, E: { "1": "D yB BC CC DC EC FC GC UC", "2": "0 J K E F G A B C L M H NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC" }, F: { "1": "EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 G B C H N D O k l VC WC XC YC vB HC ZC wB", "578": "2 3 4 5 6 7 8 9 AB BB CB DB" }, G: { "1": "D yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "132": "A B" }, O: { "1": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "33": "FD" } }, B: 4, C: "CSS3 text-align-last" };
  }
});

// node_modules/caniuse-lite/data/features/css-crisp-edges.js
var require_css_crisp_edges = __commonJS({
  "node_modules/caniuse-lite/data/features/css-crisp-edges.js"(exports, module) {
    module.exports = { A: { A: { "2": "K JC", "2340": "E F G A B" }, B: { "2": "C L M H N D O", "1025": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC zB LC", "513": "hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b", "545": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB MC" }, D: { "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB", "1025": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "A B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J NC 5B OC", "164": "K", "4644": "E F G PC QC RC" }, F: { "2": "1 2 3 4 5 6 7 G B H N D O k l VC WC XC YC vB HC", "545": "C ZC wB", "1025": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "1": "D hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC", "4260": "bC cC", "4644": "F dC eC fC gC" }, H: { "2": "uC" }, I: { "2": "zB J vC wC xC yC IC zC 0C", "1025": "I" }, J: { "2": "E", "4260": "A" }, K: { "2": "A B vB HC", "545": "C wB", "1025": "m" }, L: { "1025": "I" }, M: { "1": "uB" }, N: { "2340": "A B" }, O: { "1025": "xB" }, P: { "1025": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1025": "7B" }, R: { "1025": "ED" }, S: { "1": "GD", "4097": "FD" } }, B: 4, C: "Crisp edges/pixelated images" };
  }
});

// node_modules/caniuse-lite/data/features/css-logical-props.js
var require_css_logical_props = __commonJS({
  "node_modules/caniuse-lite/data/features/css-logical-props.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O", "1028": "W X", "1540": "P Q R S T U V" }, C: { "1": "iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "KC", "164": "0 1 2 3 4 5 6 7 8 9 zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LC MC", "1540": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB" }, D: { "1": "Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "292": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB", "1028": "W X", "1540": "lB mB nB oB m pB qB rB sB tB P Q R S T U V" }, E: { "1": "H D TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "292": "0 J K E F G A B C NC 5B OC PC QC RC 6B vB", "1540": "L M wB 7B", "3076": "SC" }, F: { "1": "rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "292": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB", "1028": "pB qB", "1540": "aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m" }, G: { "1": "D tC 8B 9B xB AC yB BC CC DC EC FC GC", "292": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC", "1540": "mC nC oC pC qC rC", "3076": "sC" }, H: { "2": "uC" }, I: { "1": "I", "292": "zB J vC wC xC yC IC zC 0C" }, J: { "292": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l AD yB BD CD DD", "292": "J 1C 2C 3C 4C 5C", "1540": "6B 6C 7C 8C 9C" }, Q: { "1540": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "1540": "FD" } }, B: 5, C: "CSS Logical Properties" };
  }
});

// node_modules/caniuse-lite/data/features/css-appearance.js
var require_css_appearance = __commonJS({
  "node_modules/caniuse-lite/data/features/css-appearance.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "33": "S", "164": "P Q R", "388": "C L M H N D O" }, C: { "1": "Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "164": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P", "676": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB LC MC" }, D: { "1": "T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "33": "S", "164": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R" }, E: { "1": "D 9B xB AC yB BC CC DC EC FC GC UC", "164": "0 J K E F G A B C L M H NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B" }, F: { "1": "m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "mB nB oB", "164": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB" }, G: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "164": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B" }, H: { "2": "uC" }, I: { "1": "I", "164": "zB J vC wC xC yC IC zC 0C" }, J: { "164": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A", "388": "B" }, O: { "1": "xB" }, P: { "164": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "164": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "164": "FD" } }, B: 5, C: "CSS Appearance" };
  }
});

// node_modules/caniuse-lite/data/features/css-snappoints.js
var require_css_snappoints = __commonJS({
  "node_modules/caniuse-lite/data/features/css-snappoints.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "6308": "A", "6436": "B" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "6436": "C L M H N D O" }, C: { "1": "kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB LC MC", "2052": "JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB" }, D: { "1": "lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB", "8258": "iB jB kB" }, E: { "1": "B C L M H D vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E F NC 5B OC PC QC", "3108": "G A RC 6B" }, F: { "1": "gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB VC WC XC YC vB HC ZC wB", "8258": "YB ZB aB bB cB dB eB fB" }, G: { "1": "D jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC", "3108": "fC gC hC iC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C 2C 3C 4C 5C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "2052": "FD" } }, B: 4, C: "CSS Scroll Snap" };
  }
});

// node_modules/caniuse-lite/data/features/css-regions.js
var require_css_regions = __commonJS({
  "node_modules/caniuse-lite/data/features/css-regions.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "420": "A B" }, B: { "2": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "420": "C L M H N D O" }, C: { "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, D: { "2": "0 J K E F G A B C L M FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "36": "H N D O", "66": "1 2 3 4 5 6 7 8 9 k l AB BB CB DB EB" }, E: { "2": "0 J K C L M H D NC 5B OC vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "33": "E F G A B PC QC RC 6B" }, F: { "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j VC WC XC YC vB HC ZC wB" }, G: { "2": "D 5B aC IC bC cC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "33": "F dC eC fC gC hC iC jC" }, H: { "2": "uC" }, I: { "2": "zB J I vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C m vB HC wB" }, L: { "2": "I" }, M: { "2": "uB" }, N: { "420": "A B" }, O: { "2": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "2": "7B" }, R: { "2": "ED" }, S: { "2": "FD GD" } }, B: 5, C: "CSS Regions" };
  }
});

// node_modules/caniuse-lite/data/features/css-image-set.js
var require_css_image_set = __commonJS({
  "node_modules/caniuse-lite/data/features/css-image-set.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "I", "2": "C L M H N D O", "164": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y", "2049": "z" }, C: { "1": "z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U LC MC", "66": "V W", "2305": "Y Z a b c d e f g h i j n o p q r s t u v w x y", "2820": "X" }, D: { "1": "I uB 3B 4B", "2": "0 1 J K E F G A B C L M H N D O k", "164": "2 3 4 5 6 7 8 9 l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y", "2049": "z" }, E: { "1": "D UC", "2": "0 J NC 5B OC", "132": "A B C L 6B vB wB 7B", "164": "K E F G PC QC RC", "1540": "M H SC TC 8B 9B xB AC yB BC CC DC EC FC GC" }, F: { "1": "j", "2": "G B C VC WC XC YC vB HC ZC wB", "164": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h", "2049": "i" }, G: { "1": "D", "2": "5B aC IC bC", "132": "hC iC jC kC lC mC nC oC pC qC", "164": "F cC dC eC fC gC", "1540": "rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "164": "zC 0C" }, J: { "2": "E", "164": "A" }, K: { "2": "A B C vB HC wB", "164": "m" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "164": "xB" }, P: { "164": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "164": "7B" }, R: { "164": "ED" }, S: { "2": "FD GD" } }, B: 5, C: "CSS image-set" };
  }
});

// node_modules/caniuse-lite/data/features/css-writing-mode.js
var require_css_writing_mode = __commonJS({
  "node_modules/caniuse-lite/data/features/css-writing-mode.js"(exports, module) {
    module.exports = { A: { A: { "132": "K E F G A B JC" }, B: { "1": "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB LC MC", "322": "GB HB IB JB KB" }, D: { "1": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K", "16": "E", "33": "1 2 3 4 5 6 7 8 9 F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB" }, E: { "1": "B C L M H D vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "J NC 5B", "16": "0", "33": "K E F G A OC PC QC RC 6B" }, F: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB" }, G: { "1": "D jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "16": "5B aC IC", "33": "F bC cC dC eC fC gC hC iC" }, H: { "2": "uC" }, I: { "1": "I", "2": "vC wC xC", "33": "zB J yC IC zC 0C" }, J: { "33": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "36": "A B" }, O: { "1": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "33": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 2, C: "CSS writing-mode property" };
  }
});

// node_modules/caniuse-lite/data/features/css-cross-fade.js
var require_css_cross_fade = __commonJS({
  "node_modules/caniuse-lite/data/features/css-cross-fade.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "2": "C L M H N D O", "33": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, D: { "2": "0 J K E F G A B C L M H N", "33": "1 2 3 4 5 6 7 8 9 D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "1": "A B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J NC 5B", "33": "K E F G OC PC QC RC" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, G: { "1": "D hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC", "33": "F bC cC dC eC fC gC" }, H: { "2": "uC" }, I: { "2": "zB J vC wC xC yC IC", "33": "I zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C vB HC wB", "33": "m" }, L: { "33": "I" }, M: { "2": "uB" }, N: { "2": "A B" }, O: { "33": "xB" }, P: { "33": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "33": "7B" }, R: { "33": "ED" }, S: { "2": "FD GD" } }, B: 4, C: "CSS Cross-Fade Function" };
  }
});

// node_modules/caniuse-lite/data/features/css-read-only-write.js
var require_css_read_only_write = __commonJS({
  "node_modules/caniuse-lite/data/features/css-read-only-write.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C" }, C: { "1": "tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "16": "KC", "33": "0 1 2 3 4 5 6 7 8 9 zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB LC MC" }, D: { "1": "GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "16": "0 J K E F G A B C L M", "132": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "16": "NC 5B", "132": "0 J K E F OC PC QC" }, F: { "1": "3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "16": "G B VC WC XC YC vB", "132": "1 2 C H N D O k l HC ZC wB" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "16": "5B aC", "132": "F IC bC cC dC eC" }, H: { "2": "uC" }, I: { "1": "I", "16": "vC wC", "132": "zB J xC yC IC zC 0C" }, J: { "1": "A", "132": "E" }, K: { "1": "m", "2": "A B vB", "132": "C HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "33": "FD" } }, B: 1, C: "CSS :read-only and :read-write selectors" };
  }
});

// node_modules/caniuse-lite/data/features/text-emphasis.js
var require_text_emphasis = __commonJS({
  "node_modules/caniuse-lite/data/features/text-emphasis.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "i j n o p q r s t u v w x y z I", "2": "C L M H N D O", "164": "P Q R S T U V W X Y Z a b c d e f g h" }, C: { "1": "QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB LC MC", "322": "PB" }, D: { "1": "i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 J K E F G A B C L M H N D O k l", "164": "5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h" }, E: { "1": "F G A B C L M H D QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K NC 5B OC", "164": "E PC" }, F: { "1": "V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "164": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U" }, G: { "1": "F D dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC", "164": "zC 0C" }, J: { "2": "E", "164": "A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l CD DD", "164": "J 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD" }, Q: { "164": "7B" }, R: { "164": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "text-emphasis styling" };
  }
});

// node_modules/caniuse-lite/data/features/css-grid.js
var require_css_grid = __commonJS({
  "node_modules/caniuse-lite/data/features/css-grid.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F JC", "8": "G", "292": "A B" }, B: { "1": "N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "292": "C L M H" }, C: { "1": "YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G A B C L M H N D O LC MC", "8": "1 2 3 4 5 6 7 8 9 k l AB BB CB DB EB FB GB HB IB JB", "584": "KB LB MB NB OB PB QB RB SB TB UB VB", "1025": "WB XB" }, D: { "1": "cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 J K E F G A B C L M H N D O k l", "8": "5 6 7 8", "200": "9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB", "1025": "bB" }, E: { "1": "B C L M H D 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J NC 5B OC", "8": "K E F G A PC QC RC" }, F: { "1": "OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 G B C H N D O k l VC WC XC YC vB HC ZC wB", "200": "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB" }, G: { "1": "D iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "8": "F cC dC eC fC gC hC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC", "8": "IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "292": "A B" }, O: { "1": "xB" }, P: { "1": "k l 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "1C", "8": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 4, C: "CSS Grid Layout (level 1)" };
  }
});

// node_modules/caniuse-lite/data/features/css-text-spacing.js
var require_css_text_spacing = __commonJS({
  "node_modules/caniuse-lite/data/features/css-text-spacing.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E JC", "161": "F G A B" }, B: { "2": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "161": "C L M H N D O" }, C: { "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B LC MC" }, D: { "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, E: { "2": "0 J K E F G A B C L M H D NC 5B OC PC QC RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC" }, F: { "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j VC WC XC YC vB HC ZC wB" }, G: { "2": "F D 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC" }, H: { "2": "uC" }, I: { "2": "zB J I vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "2": "A B C m vB HC wB" }, L: { "2": "I" }, M: { "2": "uB" }, N: { "16": "A B" }, O: { "2": "xB" }, P: { "2": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, Q: { "2": "7B" }, R: { "2": "ED" }, S: { "2": "FD GD" } }, B: 5, C: "CSS Text 4 text-spacing" };
  }
});

// node_modules/caniuse-lite/data/features/css-any-link.js
var require_css_any_link = __commonJS({
  "node_modules/caniuse-lite/data/features/css-any-link.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "16": "KC", "33": "0 1 2 3 4 5 6 7 8 9 zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB LC MC" }, D: { "1": "hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "16": "0 J K E F G A B C L M", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB" }, E: { "1": "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "16": "0 J K NC 5B OC", "33": "E F PC QC" }, F: { "1": "WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB" }, G: { "1": "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "16": "5B aC IC bC", "33": "F cC dC eC" }, H: { "2": "uC" }, I: { "1": "I", "16": "zB J vC wC xC yC IC", "33": "zC 0C" }, J: { "16": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "16": "J", "33": "1C 2C 3C 4C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "33": "FD" } }, B: 5, C: "CSS :any-link selector" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-isolate.js
var require_mdn_css_unicode_bidi_isolate = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-isolate.js"(exports, module) {
    module.exports = { A: { D: { "1": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 J K E F G A B C L M H", "33": "1 2 3 4 5 6 7 8 9 N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G LC MC", "33": "1 2 3 4 5 6 7 8 9 A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "B C L M H D vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "0 J NC 5B OC UC", "33": "K E F G A PC QC RC 6B" }, G: { "1": "D jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "33": "F cC dC eC fC gC hC iC" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "isolate from unicode-bidi" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-plaintext.js
var require_mdn_css_unicode_bidi_plaintext = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-plaintext.js"(exports, module) {
    module.exports = { A: { D: { "1": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G LC MC", "33": "1 2 3 4 5 6 7 8 9 A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB VC WC XC YC vB HC ZC wB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "B C L M H D vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "0 J NC 5B OC UC", "33": "K E F G A PC QC RC 6B" }, G: { "1": "D jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "33": "F cC dC eC fC gC hC iC" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "plaintext from unicode-bidi" };
  }
});

// node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-isolate-override.js
var require_mdn_css_unicode_bidi_isolate_override = __commonJS({
  "node_modules/caniuse-lite/data/features/mdn-css-unicode-bidi-isolate-override.js"(exports, module) {
    module.exports = { A: { D: { "1": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB" }, L: { "1": "I" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 KC zB J K E F G A B C L M H N LC MC", "33": "1 2 3 4 5 6 7 8 9 D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB VC WC XC YC vB HC ZC wB" }, K: { "1": "m", "2": "A B C vB HC wB" }, E: { "1": "B C L M H D vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "0 J K NC 5B OC PC UC", "33": "E F G A QC RC 6B" }, G: { "1": "D jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC cC", "33": "F dC eC fC gC hC iC" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" } }, B: 6, C: "isolate-override from unicode-bidi" };
  }
});

// node_modules/caniuse-lite/data/features/css-overscroll-behavior.js
var require_css_overscroll_behavior = __commonJS({
  "node_modules/caniuse-lite/data/features/css-overscroll-behavior.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G JC", "132": "A B" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "132": "C L M H N D", "516": "O" }, C: { "1": "0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB LC MC" }, D: { "1": "hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB", "260": "fB gB" }, E: { "1": "D yB BC CC DC EC FC GC UC", "2": "0 J K E F G A B C L M NC 5B OC PC QC RC 6B vB wB 7B", "1090": "H SC TC 8B 9B xB AC" }, F: { "1": "WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB VC WC XC YC vB HC ZC wB", "260": "UB VB" }, G: { "1": "D yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC", "1090": "sC tC 8B 9B xB AC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "132": "A B" }, O: { "1": "xB" }, P: { "1": "k l 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J 1C 2C 3C" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "GD", "2": "FD" } }, B: 5, C: "CSS overscroll-behavior" };
  }
});

// node_modules/caniuse-lite/data/features/css-text-orientation.js
var require_css_text_orientation = __commonJS({
  "node_modules/caniuse-lite/data/features/css-text-orientation.js"(exports, module) {
    module.exports = { A: { A: { "2": "K E F G A B JC" }, B: { "1": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I", "2": "C L M H N D O" }, C: { "1": "LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB LC MC", "194": "IB JB KB" }, D: { "1": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB" }, E: { "1": "M H D SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC", "2": "0 J K E F G NC 5B OC PC QC RC", "16": "A", "33": "B C L 6B vB wB 7B" }, F: { "1": "FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j", "2": "1 2 3 4 5 6 7 8 9 G B C H N D O k l AB BB CB DB EB VC WC XC YC vB HC ZC wB" }, G: { "1": "D hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC", "2": "F 5B aC IC bC cC dC eC fC gC" }, H: { "2": "uC" }, I: { "1": "I", "2": "zB J vC wC xC yC IC zC 0C" }, J: { "2": "E A" }, K: { "1": "m", "2": "A B C vB HC wB" }, L: { "1": "I" }, M: { "1": "uB" }, N: { "2": "A B" }, O: { "1": "xB" }, P: { "1": "k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD", "2": "J" }, Q: { "1": "7B" }, R: { "1": "ED" }, S: { "1": "FD GD" } }, B: 2, C: "CSS text-orientation" };
  }
});

// node_modules/caniuse-lite/data/features/css-print-color-adjust.js
var require_css_print_color_adjust = __commonJS({
  "node_modules/caniuse-lite/data/features/css-print-color-adjust.js"(exports, module) {
    module.exports = { A: { D: { "2": "0 J K E F G A B C L M H N", "33": "1 2 3 4 5 6 7 8 9 D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B" }, L: { "33": "I" }, B: { "2": "C L M H N D O", "33": "P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I" }, C: { "1": "g h i j n o p q r s t u v w x y z I uB 3B 4B", "2": "0 1 2 3 4 5 6 7 8 9 KC zB J K E F G A B C L M H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB LC MC", "33": "SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f" }, M: { "1": "uB" }, A: { "2": "K E F G A B JC" }, F: { "2": "G B C VC WC XC YC vB HC ZC wB", "33": "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j" }, K: { "2": "A B C vB HC wB", "33": "m" }, E: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "2": "0 J NC 5B OC UC", "33": "K E F G A B C L M H PC QC RC 6B vB wB 7B SC TC 8B" }, G: { "1": "D 9B xB AC yB BC CC DC EC FC GC", "2": "5B aC IC bC", "33": "F cC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B" }, P: { "33": "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" }, I: { "2": "zB J vC wC xC yC IC", "33": "I zC 0C" } }, B: 6, C: "print-color-adjust property" };
  }
});

// node_modules/autoprefixer/data/prefixes.js
var require_prefixes2 = __commonJS({
  "node_modules/autoprefixer/data/prefixes.js"(exports, module) {
    var unpack = require_feature();
    function browsersSort(a, b) {
      a = a.split(" ");
      b = b.split(" ");
      if (a[0] > b[0]) {
        return 1;
      } else if (a[0] < b[0]) {
        return -1;
      } else {
        return Math.sign(parseFloat(a[1]) - parseFloat(b[1]));
      }
    }
    function f(data, opts, callback) {
      data = unpack(data);
      if (!callback) {
        ;
        [callback, opts] = [opts, {}];
      }
      let match = opts.match || /\sx($|\s)/;
      let need = [];
      for (let browser in data.stats) {
        let versions = data.stats[browser];
        for (let version in versions) {
          let support = versions[version];
          if (support.match(match)) {
            need.push(browser + " " + version);
          }
        }
      }
      callback(need.sort(browsersSort));
    }
    var result = {};
    function prefix(names, data) {
      for (let name of names) {
        result[name] = Object.assign({}, data);
      }
    }
    function add(names, data) {
      for (let name of names) {
        result[name].browsers = result[name].browsers.concat(data.browsers).sort(browsersSort);
      }
    }
    module.exports = result;
    var prefixBorderRadius = require_border_radius2();
    f(
      prefixBorderRadius,
      (browsers) => prefix(
        [
          "border-radius",
          "border-top-left-radius",
          "border-top-right-radius",
          "border-bottom-right-radius",
          "border-bottom-left-radius"
        ],
        {
          mistakes: ["-khtml-", "-ms-", "-o-"],
          feature: "border-radius",
          browsers
        }
      )
    );
    var prefixBoxshadow = require_css_boxshadow();
    f(
      prefixBoxshadow,
      (browsers) => prefix(["box-shadow"], {
        mistakes: ["-khtml-"],
        feature: "css-boxshadow",
        browsers
      })
    );
    var prefixAnimation = require_css_animation();
    f(
      prefixAnimation,
      (browsers) => prefix(
        [
          "animation",
          "animation-name",
          "animation-duration",
          "animation-delay",
          "animation-direction",
          "animation-fill-mode",
          "animation-iteration-count",
          "animation-play-state",
          "animation-timing-function",
          "@keyframes"
        ],
        {
          mistakes: ["-khtml-", "-ms-"],
          feature: "css-animation",
          browsers
        }
      )
    );
    var prefixTransition = require_css_transitions();
    f(
      prefixTransition,
      (browsers) => prefix(
        [
          "transition",
          "transition-property",
          "transition-duration",
          "transition-delay",
          "transition-timing-function"
        ],
        {
          mistakes: ["-khtml-", "-ms-"],
          browsers,
          feature: "css-transitions"
        }
      )
    );
    var prefixTransform2d = require_transforms2d();
    f(
      prefixTransform2d,
      (browsers) => prefix(["transform", "transform-origin"], {
        feature: "transforms2d",
        browsers
      })
    );
    var prefixTransforms3d = require_transforms3d();
    f(prefixTransforms3d, (browsers) => {
      prefix(["perspective", "perspective-origin"], {
        feature: "transforms3d",
        browsers
      });
      return prefix(["transform-style"], {
        mistakes: ["-ms-", "-o-"],
        browsers,
        feature: "transforms3d"
      });
    });
    f(
      prefixTransforms3d,
      { match: /y\sx|y\s#2/ },
      (browsers) => prefix(["backface-visibility"], {
        mistakes: ["-ms-", "-o-"],
        feature: "transforms3d",
        browsers
      })
    );
    var prefixGradients = require_css_gradients();
    f(
      prefixGradients,
      { match: /y\sx/ },
      (browsers) => prefix(
        [
          "linear-gradient",
          "repeating-linear-gradient",
          "radial-gradient",
          "repeating-radial-gradient"
        ],
        {
          props: [
            "background",
            "background-image",
            "border-image",
            "mask",
            "list-style",
            "list-style-image",
            "content",
            "mask-image"
          ],
          mistakes: ["-ms-"],
          feature: "css-gradients",
          browsers
        }
      )
    );
    f(prefixGradients, { match: /a\sx/ }, (browsers) => {
      browsers = browsers.map((i) => {
        if (/firefox|op/.test(i)) {
          return i;
        } else {
          return `${i} old`;
        }
      });
      return add(
        [
          "linear-gradient",
          "repeating-linear-gradient",
          "radial-gradient",
          "repeating-radial-gradient"
        ],
        {
          feature: "css-gradients",
          browsers
        }
      );
    });
    var prefixBoxsizing = require_css3_boxsizing();
    f(
      prefixBoxsizing,
      (browsers) => prefix(["box-sizing"], {
        feature: "css3-boxsizing",
        browsers
      })
    );
    var prefixFilters = require_css_filters();
    f(
      prefixFilters,
      (browsers) => prefix(["filter"], {
        feature: "css-filters",
        browsers
      })
    );
    var prefixFilterFunction = require_css_filter_function();
    f(
      prefixFilterFunction,
      (browsers) => prefix(["filter-function"], {
        props: [
          "background",
          "background-image",
          "border-image",
          "mask",
          "list-style",
          "list-style-image",
          "content",
          "mask-image"
        ],
        feature: "css-filter-function",
        browsers
      })
    );
    var prefixBackdrop = require_css_backdrop_filter();
    f(
      prefixBackdrop,
      { match: /y\sx|y\s#2/ },
      (browsers) => prefix(["backdrop-filter"], {
        feature: "css-backdrop-filter",
        browsers
      })
    );
    var prefixElementFunction = require_css_element_function();
    f(
      prefixElementFunction,
      (browsers) => prefix(["element"], {
        props: [
          "background",
          "background-image",
          "border-image",
          "mask",
          "list-style",
          "list-style-image",
          "content",
          "mask-image"
        ],
        feature: "css-element-function",
        browsers
      })
    );
    var prefixMulticolumns = require_multicolumn();
    f(prefixMulticolumns, (browsers) => {
      prefix(
        [
          "columns",
          "column-width",
          "column-gap",
          "column-rule",
          "column-rule-color",
          "column-rule-width",
          "column-count",
          "column-rule-style",
          "column-span",
          "column-fill"
        ],
        {
          feature: "multicolumn",
          browsers
        }
      );
      let noff = browsers.filter((i) => !/firefox/.test(i));
      prefix(["break-before", "break-after", "break-inside"], {
        feature: "multicolumn",
        browsers: noff
      });
    });
    var prefixUserSelect = require_user_select_none();
    f(
      prefixUserSelect,
      (browsers) => prefix(["user-select"], {
        mistakes: ["-khtml-"],
        feature: "user-select-none",
        browsers
      })
    );
    var prefixFlexbox = require_flexbox();
    f(prefixFlexbox, { match: /a\sx/ }, (browsers) => {
      browsers = browsers.map((i) => {
        if (/ie|firefox/.test(i)) {
          return i;
        } else {
          return `${i} 2009`;
        }
      });
      prefix(["display-flex", "inline-flex"], {
        props: ["display"],
        feature: "flexbox",
        browsers
      });
      prefix(["flex", "flex-grow", "flex-shrink", "flex-basis"], {
        feature: "flexbox",
        browsers
      });
      prefix(
        [
          "flex-direction",
          "flex-wrap",
          "flex-flow",
          "justify-content",
          "order",
          "align-items",
          "align-self",
          "align-content"
        ],
        {
          feature: "flexbox",
          browsers
        }
      );
    });
    f(prefixFlexbox, { match: /y\sx/ }, (browsers) => {
      add(["display-flex", "inline-flex"], {
        feature: "flexbox",
        browsers
      });
      add(["flex", "flex-grow", "flex-shrink", "flex-basis"], {
        feature: "flexbox",
        browsers
      });
      add(
        [
          "flex-direction",
          "flex-wrap",
          "flex-flow",
          "justify-content",
          "order",
          "align-items",
          "align-self",
          "align-content"
        ],
        {
          feature: "flexbox",
          browsers
        }
      );
    });
    var prefixCalc = require_calc();
    f(
      prefixCalc,
      (browsers) => prefix(["calc"], {
        props: ["*"],
        feature: "calc",
        browsers
      })
    );
    var prefixBackgroundOptions = require_background_img_opts();
    f(
      prefixBackgroundOptions,
      (browsers) => prefix(["background-origin", "background-size"], {
        feature: "background-img-opts",
        browsers
      })
    );
    var prefixBackgroundClipText = require_background_clip_text();
    f(
      prefixBackgroundClipText,
      (browsers) => prefix(["background-clip"], {
        feature: "background-clip-text",
        browsers
      })
    );
    var prefixFontFeature = require_font_feature();
    f(
      prefixFontFeature,
      (browsers) => prefix(
        [
          "font-feature-settings",
          "font-variant-ligatures",
          "font-language-override"
        ],
        {
          feature: "font-feature",
          browsers
        }
      )
    );
    var prefixFontKerning = require_font_kerning();
    f(
      prefixFontKerning,
      (browsers) => prefix(["font-kerning"], {
        feature: "font-kerning",
        browsers
      })
    );
    var prefixBorderImage = require_border_image2();
    f(
      prefixBorderImage,
      (browsers) => prefix(["border-image"], {
        feature: "border-image",
        browsers
      })
    );
    var prefixSelection = require_css_selection();
    f(
      prefixSelection,
      (browsers) => prefix(["::selection"], {
        selector: true,
        feature: "css-selection",
        browsers
      })
    );
    var prefixPlaceholder = require_css_placeholder();
    f(prefixPlaceholder, (browsers) => {
      prefix(["::placeholder"], {
        selector: true,
        feature: "css-placeholder",
        browsers: browsers.concat(["ie 10 old", "ie 11 old", "firefox 18 old"])
      });
    });
    var prefixPlaceholderShown = require_css_placeholder_shown();
    f(prefixPlaceholderShown, (browsers) => {
      prefix([":placeholder-shown"], {
        selector: true,
        feature: "css-placeholder-shown",
        browsers
      });
    });
    var prefixHyphens = require_css_hyphens();
    f(
      prefixHyphens,
      (browsers) => prefix(["hyphens"], {
        feature: "css-hyphens",
        browsers
      })
    );
    var prefixFullscreen = require_fullscreen2();
    f(
      prefixFullscreen,
      (browsers) => prefix([":fullscreen"], {
        selector: true,
        feature: "fullscreen",
        browsers
      })
    );
    f(
      prefixFullscreen,
      { match: /x(\s#2|$)/ },
      (browsers) => prefix(["::backdrop"], {
        selector: true,
        feature: "fullscreen",
        browsers
      })
    );
    var prefixFileSelectorButton = require_css_file_selector_button();
    f(
      prefixFileSelectorButton,
      (browsers) => prefix(["::file-selector-button"], {
        selector: true,
        feature: "file-selector-button",
        browsers
      })
    );
    var prefixAutofill = require_css_autofill();
    f(
      prefixAutofill,
      (browsers) => prefix([":autofill"], {
        selector: true,
        feature: "css-autofill",
        browsers
      })
    );
    var prefixTabsize = require_css3_tabsize();
    f(
      prefixTabsize,
      (browsers) => prefix(["tab-size"], {
        feature: "css3-tabsize",
        browsers
      })
    );
    var prefixIntrinsic = require_intrinsic_width();
    var sizeProps = [
      "width",
      "min-width",
      "max-width",
      "height",
      "min-height",
      "max-height",
      "inline-size",
      "min-inline-size",
      "max-inline-size",
      "block-size",
      "min-block-size",
      "max-block-size",
      "grid",
      "grid-template",
      "grid-template-rows",
      "grid-template-columns",
      "grid-auto-columns",
      "grid-auto-rows"
    ];
    f(
      prefixIntrinsic,
      (browsers) => prefix(["max-content", "min-content"], {
        props: sizeProps,
        feature: "intrinsic-width",
        browsers
      })
    );
    f(
      prefixIntrinsic,
      { match: /x|\s#4/ },
      (browsers) => prefix(["fill", "fill-available"], {
        props: sizeProps,
        feature: "intrinsic-width",
        browsers
      })
    );
    f(
      prefixIntrinsic,
      { match: /x|\s#5/ },
      (browsers) => prefix(["fit-content"], {
        props: sizeProps,
        feature: "intrinsic-width",
        browsers
      })
    );
    var prefixStretch = require_css_width_stretch();
    f(
      prefixStretch,
      (browsers) => prefix(["stretch"], {
        props: sizeProps,
        feature: "css-width-stretch",
        browsers
      })
    );
    var prefixCursorsNewer = require_css3_cursors_newer();
    f(
      prefixCursorsNewer,
      (browsers) => prefix(["zoom-in", "zoom-out"], {
        props: ["cursor"],
        feature: "css3-cursors-newer",
        browsers
      })
    );
    var prefixCursorsGrab = require_css3_cursors_grab();
    f(
      prefixCursorsGrab,
      (browsers) => prefix(["grab", "grabbing"], {
        props: ["cursor"],
        feature: "css3-cursors-grab",
        browsers
      })
    );
    var prefixSticky = require_css_sticky();
    f(
      prefixSticky,
      (browsers) => prefix(["sticky"], {
        props: ["position"],
        feature: "css-sticky",
        browsers
      })
    );
    var prefixPointer = require_pointer();
    f(
      prefixPointer,
      (browsers) => prefix(["touch-action"], {
        feature: "pointer",
        browsers
      })
    );
    var prefixDecoration = require_text_decoration2();
    f(
      prefixDecoration,
      { match: /x.*#[235]/ },
      (browsers) => prefix(["text-decoration-skip", "text-decoration-skip-ink"], {
        feature: "text-decoration",
        browsers
      })
    );
    var prefixDecorationShorthand = require_mdn_text_decoration_shorthand();
    f(
      prefixDecorationShorthand,
      (browsers) => prefix(["text-decoration"], {
        feature: "text-decoration",
        browsers
      })
    );
    var prefixDecorationColor = require_mdn_text_decoration_color();
    f(
      prefixDecorationColor,
      (browsers) => prefix(["text-decoration-color"], {
        feature: "text-decoration",
        browsers
      })
    );
    var prefixDecorationLine = require_mdn_text_decoration_line();
    f(
      prefixDecorationLine,
      (browsers) => prefix(["text-decoration-line"], {
        feature: "text-decoration",
        browsers
      })
    );
    var prefixDecorationStyle = require_mdn_text_decoration_style();
    f(
      prefixDecorationStyle,
      (browsers) => prefix(["text-decoration-style"], {
        feature: "text-decoration",
        browsers
      })
    );
    var prefixTextSizeAdjust = require_text_size_adjust();
    f(
      prefixTextSizeAdjust,
      (browsers) => prefix(["text-size-adjust"], {
        feature: "text-size-adjust",
        browsers
      })
    );
    var prefixCssMasks = require_css_masks();
    f(prefixCssMasks, (browsers) => {
      prefix(
        [
          "mask-clip",
          "mask-composite",
          "mask-image",
          "mask-origin",
          "mask-repeat",
          "mask-border-repeat",
          "mask-border-source"
        ],
        {
          feature: "css-masks",
          browsers
        }
      );
      prefix(
        [
          "mask",
          "mask-position",
          "mask-size",
          "mask-border",
          "mask-border-outset",
          "mask-border-width",
          "mask-border-slice"
        ],
        {
          feature: "css-masks",
          browsers
        }
      );
    });
    var prefixClipPath = require_css_clip_path();
    f(
      prefixClipPath,
      (browsers) => prefix(["clip-path"], {
        feature: "css-clip-path",
        browsers
      })
    );
    var prefixBoxdecoration = require_css_boxdecorationbreak();
    f(
      prefixBoxdecoration,
      (browsers) => prefix(["box-decoration-break"], {
        feature: "css-boxdecorationbreak",
        browsers
      })
    );
    var prefixObjectFit = require_object_fit();
    f(
      prefixObjectFit,
      (browsers) => prefix(["object-fit", "object-position"], {
        feature: "object-fit",
        browsers
      })
    );
    var prefixShapes = require_css_shapes();
    f(
      prefixShapes,
      (browsers) => prefix(["shape-margin", "shape-outside", "shape-image-threshold"], {
        feature: "css-shapes",
        browsers
      })
    );
    var prefixTextOverflow = require_text_overflow();
    f(
      prefixTextOverflow,
      (browsers) => prefix(["text-overflow"], {
        feature: "text-overflow",
        browsers
      })
    );
    var prefixDeviceadaptation = require_css_deviceadaptation();
    f(
      prefixDeviceadaptation,
      (browsers) => prefix(["@viewport"], {
        feature: "css-deviceadaptation",
        browsers
      })
    );
    var prefixResolut = require_css_media_resolution();
    f(
      prefixResolut,
      { match: /( x($| )|a #2)/ },
      (browsers) => prefix(["@resolution"], {
        feature: "css-media-resolution",
        browsers
      })
    );
    var prefixTextAlignLast = require_css_text_align_last();
    f(
      prefixTextAlignLast,
      (browsers) => prefix(["text-align-last"], {
        feature: "css-text-align-last",
        browsers
      })
    );
    var prefixCrispedges = require_css_crisp_edges();
    f(
      prefixCrispedges,
      { match: /y x|a x #1/ },
      (browsers) => prefix(["pixelated"], {
        props: ["image-rendering"],
        feature: "css-crisp-edges",
        browsers
      })
    );
    f(
      prefixCrispedges,
      { match: /a x #2/ },
      (browsers) => prefix(["image-rendering"], {
        feature: "css-crisp-edges",
        browsers
      })
    );
    var prefixLogicalProps = require_css_logical_props();
    f(
      prefixLogicalProps,
      (browsers) => prefix(
        [
          "border-inline-start",
          "border-inline-end",
          "margin-inline-start",
          "margin-inline-end",
          "padding-inline-start",
          "padding-inline-end"
        ],
        {
          feature: "css-logical-props",
          browsers
        }
      )
    );
    f(
      prefixLogicalProps,
      { match: /x\s#2/ },
      (browsers) => prefix(
        [
          "border-block-start",
          "border-block-end",
          "margin-block-start",
          "margin-block-end",
          "padding-block-start",
          "padding-block-end"
        ],
        {
          feature: "css-logical-props",
          browsers
        }
      )
    );
    var prefixAppearance = require_css_appearance();
    f(
      prefixAppearance,
      { match: /#2|x/ },
      (browsers) => prefix(["appearance"], {
        feature: "css-appearance",
        browsers
      })
    );
    var prefixSnappoints = require_css_snappoints();
    f(
      prefixSnappoints,
      (browsers) => prefix(
        [
          "scroll-snap-type",
          "scroll-snap-coordinate",
          "scroll-snap-destination",
          "scroll-snap-points-x",
          "scroll-snap-points-y"
        ],
        {
          feature: "css-snappoints",
          browsers
        }
      )
    );
    var prefixRegions = require_css_regions();
    f(
      prefixRegions,
      (browsers) => prefix(["flow-into", "flow-from", "region-fragment"], {
        feature: "css-regions",
        browsers
      })
    );
    var prefixImageSet = require_css_image_set();
    f(
      prefixImageSet,
      (browsers) => prefix(["image-set"], {
        props: [
          "background",
          "background-image",
          "border-image",
          "cursor",
          "mask",
          "mask-image",
          "list-style",
          "list-style-image",
          "content"
        ],
        feature: "css-image-set",
        browsers
      })
    );
    var prefixWritingMode = require_css_writing_mode();
    f(
      prefixWritingMode,
      { match: /a|x/ },
      (browsers) => prefix(["writing-mode"], {
        feature: "css-writing-mode",
        browsers
      })
    );
    var prefixCrossFade = require_css_cross_fade();
    f(
      prefixCrossFade,
      (browsers) => prefix(["cross-fade"], {
        props: [
          "background",
          "background-image",
          "border-image",
          "mask",
          "list-style",
          "list-style-image",
          "content",
          "mask-image"
        ],
        feature: "css-cross-fade",
        browsers
      })
    );
    var prefixReadOnly = require_css_read_only_write();
    f(
      prefixReadOnly,
      (browsers) => prefix([":read-only", ":read-write"], {
        selector: true,
        feature: "css-read-only-write",
        browsers
      })
    );
    var prefixTextEmphasis = require_text_emphasis();
    f(
      prefixTextEmphasis,
      (browsers) => prefix(
        [
          "text-emphasis",
          "text-emphasis-position",
          "text-emphasis-style",
          "text-emphasis-color"
        ],
        {
          feature: "text-emphasis",
          browsers
        }
      )
    );
    var prefixGrid = require_css_grid();
    f(prefixGrid, (browsers) => {
      prefix(["display-grid", "inline-grid"], {
        props: ["display"],
        feature: "css-grid",
        browsers
      });
      prefix(
        [
          "grid-template-columns",
          "grid-template-rows",
          "grid-row-start",
          "grid-column-start",
          "grid-row-end",
          "grid-column-end",
          "grid-row",
          "grid-column",
          "grid-area",
          "grid-template",
          "grid-template-areas",
          "place-self"
        ],
        {
          feature: "css-grid",
          browsers
        }
      );
    });
    f(
      prefixGrid,
      { match: /a x/ },
      (browsers) => prefix(["grid-column-align", "grid-row-align"], {
        feature: "css-grid",
        browsers
      })
    );
    var prefixTextSpacing = require_css_text_spacing();
    f(
      prefixTextSpacing,
      (browsers) => prefix(["text-spacing"], {
        feature: "css-text-spacing",
        browsers
      })
    );
    var prefixAnyLink = require_css_any_link();
    f(
      prefixAnyLink,
      (browsers) => prefix([":any-link"], {
        selector: true,
        feature: "css-any-link",
        browsers
      })
    );
    var bidiIsolate = require_mdn_css_unicode_bidi_isolate();
    f(
      bidiIsolate,
      (browsers) => prefix(["isolate"], {
        props: ["unicode-bidi"],
        feature: "css-unicode-bidi",
        browsers
      })
    );
    var bidiPlaintext = require_mdn_css_unicode_bidi_plaintext();
    f(
      bidiPlaintext,
      (browsers) => prefix(["plaintext"], {
        props: ["unicode-bidi"],
        feature: "css-unicode-bidi",
        browsers
      })
    );
    var bidiOverride = require_mdn_css_unicode_bidi_isolate_override();
    f(
      bidiOverride,
      { match: /y x/ },
      (browsers) => prefix(["isolate-override"], {
        props: ["unicode-bidi"],
        feature: "css-unicode-bidi",
        browsers
      })
    );
    var prefixOverscroll = require_css_overscroll_behavior();
    f(
      prefixOverscroll,
      { match: /a #1/ },
      (browsers) => prefix(["overscroll-behavior"], {
        feature: "css-overscroll-behavior",
        browsers
      })
    );
    var prefixTextOrientation = require_css_text_orientation();
    f(
      prefixTextOrientation,
      (browsers) => prefix(["text-orientation"], {
        feature: "css-text-orientation",
        browsers
      })
    );
    var prefixPrintAdjust = require_css_print_color_adjust();
    f(
      prefixPrintAdjust,
      (browsers) => prefix(["print-color-adjust", "color-adjust"], {
        feature: "css-print-color-adjust",
        browsers
      })
    );
  }
});

// node_modules/autoprefixer/lib/info.js
var require_info = __commonJS({
  "node_modules/autoprefixer/lib/info.js"(exports, module) {
    var browserslist = require_browserslist();
    function capitalize(str) {
      return str.slice(0, 1).toUpperCase() + str.slice(1);
    }
    var NAMES = {
      ie: "IE",
      ie_mob: "IE Mobile",
      ios_saf: "iOS Safari",
      op_mini: "Opera Mini",
      op_mob: "Opera Mobile",
      and_chr: "Chrome for Android",
      and_ff: "Firefox for Android",
      and_uc: "UC for Android",
      and_qq: "QQ Browser",
      kaios: "KaiOS Browser",
      baidu: "Baidu Browser",
      samsung: "Samsung Internet"
    };
    function prefix(name, prefixes, note) {
      let out = `  ${name}`;
      if (note)
        out += " *";
      out += ": ";
      out += prefixes.map((i) => i.replace(/^-(.*)-$/g, "$1")).join(", ");
      out += "\n";
      return out;
    }
    module.exports = function(prefixes) {
      if (prefixes.browsers.selected.length === 0) {
        return "No browsers selected";
      }
      let versions = {};
      for (let browser of prefixes.browsers.selected) {
        let parts = browser.split(" ");
        let name = parts[0];
        let version = parts[1];
        name = NAMES[name] || capitalize(name);
        if (versions[name]) {
          versions[name].push(version);
        } else {
          versions[name] = [version];
        }
      }
      let out = "Browsers:\n";
      for (let browser in versions) {
        let list = versions[browser];
        list = list.sort((a, b) => parseFloat(b) - parseFloat(a));
        out += `  ${browser}: ${list.join(", ")}
`;
      }
      let coverage = browserslist.coverage(prefixes.browsers.selected);
      let round = Math.round(coverage * 100) / 100;
      out += `
These browsers account for ${round}% of all users globally
`;
      let atrules = [];
      for (let name in prefixes.add) {
        let data = prefixes.add[name];
        if (name[0] === "@" && data.prefixes) {
          atrules.push(prefix(name, data.prefixes));
        }
      }
      if (atrules.length > 0) {
        out += `
At-Rules:
${atrules.sort().join("")}`;
      }
      let selectors = [];
      for (let selector of prefixes.add.selectors) {
        if (selector.prefixes) {
          selectors.push(prefix(selector.name, selector.prefixes));
        }
      }
      if (selectors.length > 0) {
        out += `
Selectors:
${selectors.sort().join("")}`;
      }
      let values = [];
      let props = [];
      let hadGrid = false;
      for (let name in prefixes.add) {
        let data = prefixes.add[name];
        if (name[0] !== "@" && data.prefixes) {
          let grid = name.indexOf("grid-") === 0;
          if (grid)
            hadGrid = true;
          props.push(prefix(name, data.prefixes, grid));
        }
        if (!Array.isArray(data.values)) {
          continue;
        }
        for (let value of data.values) {
          let grid = value.name.includes("grid");
          if (grid)
            hadGrid = true;
          let string = prefix(value.name, value.prefixes, grid);
          if (!values.includes(string)) {
            values.push(string);
          }
        }
      }
      if (props.length > 0) {
        out += `
Properties:
${props.sort().join("")}`;
      }
      if (values.length > 0) {
        out += `
Values:
${values.sort().join("")}`;
      }
      if (hadGrid) {
        out += "\n* - Prefixes will be added only on grid: true option.\n";
      }
      if (!atrules.length && !selectors.length && !props.length && !values.length) {
        out += "\nAwesome! Your browsers don't require any vendor prefixes.\nNow you can remove Autoprefixer from build steps.";
      }
      return out;
    };
  }
});

// node_modules/autoprefixer/lib/autoprefixer.js
var require_autoprefixer = __commonJS({
  "node_modules/autoprefixer/lib/autoprefixer.js"(exports, module) {
    var browserslist = require_browserslist();
    var { agents } = require_agents2();
    var pico = require_picocolors_browser();
    var Browsers = require_browsers3();
    var Prefixes = require_prefixes();
    var dataPrefixes = require_prefixes2();
    var getInfo = require_info();
    var autoprefixerData = { browsers: agents, prefixes: dataPrefixes };
    var WARNING = "\n  Replace Autoprefixer `browsers` option to Browserslist config.\n  Use `browserslist` key in `package.json` or `.browserslistrc` file.\n\n  Using `browsers` option can cause errors. Browserslist config can\n  be used for Babel, Autoprefixer, postcss-normalize and other tools.\n\n  If you really need to use option, rename it to `overrideBrowserslist`.\n\n  Learn more at:\n  https://github.com/browserslist/browserslist#readme\n  https://twitter.com/browserslist\n\n";
    function isPlainObject(obj) {
      return Object.prototype.toString.apply(obj) === "[object Object]";
    }
    var cache = /* @__PURE__ */ new Map();
    function timeCapsule(result, prefixes) {
      if (prefixes.browsers.selected.length === 0) {
        return;
      }
      if (prefixes.add.selectors.length > 0) {
        return;
      }
      if (Object.keys(prefixes.add).length > 2) {
        return;
      }
      result.warn(
        "Autoprefixer target browsers do not need any prefixes.You do not need Autoprefixer anymore.\nCheck your Browserslist config to be sure that your targets are set up correctly.\n\n  Learn more at:\n  https://github.com/postcss/autoprefixer#readme\n  https://github.com/browserslist/browserslist#readme\n\n"
      );
    }
    module.exports = plugin;
    function plugin(...reqs) {
      let options;
      if (reqs.length === 1 && isPlainObject(reqs[0])) {
        options = reqs[0];
        reqs = void 0;
      } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {
        reqs = void 0;
      } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {
        options = reqs[1];
        reqs = reqs[0];
      } else if (typeof reqs[reqs.length - 1] === "object") {
        options = reqs.pop();
      }
      if (!options) {
        options = {};
      }
      if (options.browser) {
        throw new Error(
          "Change `browser` option to `overrideBrowserslist` in Autoprefixer"
        );
      } else if (options.browserslist) {
        throw new Error(
          "Change `browserslist` option to `overrideBrowserslist` in Autoprefixer"
        );
      }
      if (options.overrideBrowserslist) {
        reqs = options.overrideBrowserslist;
      } else if (options.browsers) {
        if (typeof console !== "undefined" && console.warn) {
          console.warn(
            pico.red(WARNING.replace(/`[^`]+`/g, (i) => pico.yellow(i.slice(1, -1))))
          );
        }
        reqs = options.browsers;
      }
      let brwlstOpts = {
        ignoreUnknownVersions: options.ignoreUnknownVersions,
        stats: options.stats,
        env: options.env
      };
      function loadPrefixes(opts) {
        let d = autoprefixerData;
        let browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts);
        let key = browsers.selected.join(", ") + JSON.stringify(options);
        if (!cache.has(key)) {
          cache.set(key, new Prefixes(d.prefixes, browsers, options));
        }
        return cache.get(key);
      }
      return {
        postcssPlugin: "autoprefixer",
        prepare(result) {
          let prefixes = loadPrefixes({
            from: result.opts.from,
            env: options.env
          });
          return {
            OnceExit(root) {
              timeCapsule(result, prefixes);
              if (options.remove !== false) {
                prefixes.processor.remove(root, result);
              }
              if (options.add !== false) {
                prefixes.processor.add(root, result);
              }
            }
          };
        },
        info(opts) {
          opts = opts || {};
          opts.from = opts.from || process.cwd();
          return getInfo(loadPrefixes(opts));
        },
        options,
        browsers: reqs
      };
    }
    plugin.postcss = true;
    plugin.data = autoprefixerData;
    plugin.defaults = browserslist.defaults;
    plugin.info = () => plugin().info();
  }
});

// dep:autoprefixer
var autoprefixer_default = require_autoprefixer();
export {
  autoprefixer_default as default
};
/**
 * @license Fraction.js v4.2.0 05/03/2022
 * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2021, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/
//# sourceMappingURL=autoprefixer.js.map
